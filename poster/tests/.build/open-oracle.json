{"contracts":{"contracts/AnchoredView/AnchoredView.sol:AnchorOracle":{"abi":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AnchorOracle.Anchor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"internalType\":\"struct AnchorOracle.Anchor\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/AnchoredView/AnchoredView.sol\":\"AnchorOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnchoredView/AnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SymbolConfiguration.sol\\\";\\nimport \\\"../OpenOraclePriceData.sol\\\";\\n\\ninterface AnchorOracle {\\n    function numBlocksPerPeriod() external view returns (uint); // approximately 1 hour: 60 seconds/minute * 60 minutes/hour * 1 block/15 seconds\\n\\n    function assetPrices(address asset) external view returns (uint);\\n\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    function anchors(address asset) external view returns (Anchor memory);\\n}\\n\\n\\n/**\\n * @notice Price feed conforming to Price Oracle Proxy interface.\\n * @dev Use a single open oracle reporter and anchored to and falling back to the Compound v2 oracle system.\\n * @dev The reporter must report at a minimum the USD/ETH price, so that anchor ETH/TOKEN prices can be converted to USD/TOKEN\\n * @author Compound Labs, Inc.\\n */\\ncontract AnchoredView is SymbolConfiguration {\\n    /// @notice The mapping of anchored reporter prices by symbol\\n    mapping(string => uint) public _prices;\\n\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\n    bool public reporterBreaker;\\n\\n    /// @notice Circuit breaker for using reporter price without anchor\\n    bool public anchorBreaker;\\n\\n    /// @notice the Open Oracle Reporter price reporter\\n    address public immutable reporter;\\n\\n    /// @notice The anchor oracle ( Compound Oracle V1 )\\n    AnchorOracle public immutable anchor;\\n\\n    /// @notice The Open Oracle Price Data contract\\n    OpenOraclePriceData public immutable priceData;\\n\\n    /// @dev The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint immutable upperBoundAnchorRatio;\\n\\n    /// @dev The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint immutable lowerBoundAnchorRatio;\\n\\n    /// @dev Average blocks per day, for checking anchor staleness (1 day / 15)\\n    uint constant blocksInADay = 5760;\\n\\n    /// @notice The event emitted when the median price is updated\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\n\\n    /// @notice The event emitted when reporter invalidates itself\\n    event ReporterInvalidated(address reporter);\\n\\n    /// @notice The event emitted when the anchor is cut for staleness\\n    event AnchorCut(address anchor);\\n\\n    /**\\n     * @param data_ Address of the Oracle Data contract\\n     * @param reporter_ The reporter address whose price will be used if it matches the anchor\\n     * @param anchor_ The PriceOracleProxy that will be used to verify reporter price, or serve prices not given by the reporter\\n     * @param anchorToleranceMantissa_ The tolerance allowed between the anchor and median. A tolerance of 10e16 means a new median that is 10% off from the anchor will still be saved\\n     * @param tokens_ The CTokens struct that contains addresses for CToken contracts\\n     */\\n    constructor(OpenOraclePriceData data_,\\n                address reporter_,\\n                AnchorOracle anchor_,\\n                uint anchorToleranceMantissa_,\\n                CTokens memory tokens_) SymbolConfiguration(tokens_) public {\\n        reporter = reporter_;\\n        anchor = anchor_;\\n        priceData = data_;\\n\\n        require(anchorToleranceMantissa_ < 100e16, \\\"Anchor Tolerance is too high\\\");\\n        upperBoundAnchorRatio = 100e16 + anchorToleranceMantissa_;\\n        lowerBoundAnchorRatio = 100e16 - anchorToleranceMantissa_;\\n    }\\n\\n    /**\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view\\n     * @param messages The messages to post to the oracle\\n     * @param signatures The signatures for the corresponding messages\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\n     */\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\n\\n        // Save the prices\\n        for (uint i = 0; i < messages.length; i++) {\\n            priceData.put(messages[i], signatures[i]);\\n        }\\n\\n        // load usdc for using in loop to convert anchor prices to dollars\\n        uint usdcPrice = readAnchor(cUsdcAddress);\\n\\n        // Try to update the view storage\\n        for (uint i = 0; i < symbols.length; i++) {\\n            CTokenMetadata memory tokenConfig = getCTokenConfig(symbols[i]);\\n            // symbol is not supported in the view, but allow writing to data\\n            if (tokenConfig.cTokenAddress == address(0)) continue;\\n\\n            uint reporterPrice = priceData.getPrice(reporter, tokenConfig.openOracleKey);\\n            uint anchorPrice = getAnchorInUsd(tokenConfig, usdcPrice);\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\n            bool withinAnchor = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\n\\n            if (withinAnchor || anchorBreaker) {\\n                // only update and emit event if value changes\\n                if (_prices[tokenConfig.openOracleKey] != reporterPrice) {\\n                    _prices[tokenConfig.openOracleKey] = reporterPrice;\\n                    emit PriceUpdated(tokenConfig.openOracleKey, reporterPrice);\\n                }\\n            } else {\\n                emit PriceGuarded(tokenConfig.openOracleKey, reporterPrice, anchorPrice);\\n            }\\n        }\\n    }\\n    /**\\n     * @notice Returns price denominated in USD, with 6 decimals\\n     * @dev If price was posted by reporter, return it. Otherwise, return anchor price converted through reporter ETH price.\\n     */\\n    function prices(string calldata symbol) external view returns (uint) {\\n        CTokenMetadata memory tokenConfig = getCTokenConfig(symbol);\\n\\n        if (tokenConfig.priceSource == PriceSource.REPORTER) return _prices[symbol];\\n        if (tokenConfig.priceSource == PriceSource.FIXED_USD) return tokenConfig.fixedReporterPrice;\\n        if (tokenConfig.priceSource == PriceSource.ANCHOR) {\\n            uint usdPerEth = _prices[\\\"ETH\\\"];\\n            require(usdPerEth > 0, \\\"eth price not set, cannot convert eth to dollars\\\");\\n\\n            uint ethPerToken = readAnchor(tokenConfig);\\n            return mul(usdPerEth, ethPerToken) / tokenConfig.baseUnit;\\n        }\\n    }\\n\\n    /**\\n     * @dev fetch price in eth from proxy and convert to usd price using anchor usdc price.\\n     * @dev Anchor price has 36 - underlying decimals, so scale back up to 36 decimals before dividing by by usdc price  (30 decimals), yielding 6 decimal usd price\\n     */\\n    function getAnchorInUsd(address cToken, uint ethPerUsdc) public view returns (uint) {\\n        CTokenMetadata memory tokenConfig = getCTokenConfig(cToken);\\n        return getAnchorInUsd(tokenConfig, ethPerUsdc);\\n    }\\n\\n    function getAnchorInUsd(CTokenMetadata memory tokenConfig, uint ethPerUsdc) internal view returns (uint) {\\n        if (tokenConfig.anchorSource == AnchorSource.FIXED_USD) {\\n            return tokenConfig.fixedAnchorPrice;\\n        }\\n\\n        uint ethPerToken = readAnchor(tokenConfig);\\n\\n        return mul(ethPerToken, tokenConfig.baseUnit) / ethPerUsdc;\\n    }\\n\\n    /**\\n     * @notice Implements the method of the PriceOracle interface of Compound v2 and returns returns the Eth price for an asset.\\n     * @dev converts from 1e6 decimals of Open Oracle to 1e(36 - underlyingDecimals) of PriceOracleProxy\\n     * @param cToken The cToken address for price retrieval\\n     * @return The price for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) public view returns (uint) {\\n        CTokenMetadata memory tokenConfig = getCTokenConfig(cToken);\\n        if (reporterBreaker == true) {\\n            return readAnchor(tokenConfig);\\n        }\\n\\n        if (tokenConfig.priceSource == PriceSource.FIXED_USD) {\\n            uint usdPerToken = tokenConfig.fixedReporterPrice;\\n            return mul(usdPerToken, 1e30) / tokenConfig.baseUnit;\\n        }\\n\\n        if (tokenConfig.priceSource == PriceSource.REPORTER) {\\n            uint usdPerToken = _prices[tokenConfig.openOracleKey];\\n            return mul(usdPerToken, 1e30) / tokenConfig.baseUnit;\\n        }\\n\\n        if (tokenConfig.priceSource == PriceSource.ANCHOR) {\\n            // convert anchor price to usd, via reporter eth price\\n            uint usdPerEth = _prices[\\\"ETH\\\"];\\n            require(usdPerEth != 0, \\\"no reporter price for usd/eth exists, cannot convert anchor price to usd terms\\\");\\n\\n            // factoring out extra 6 decimals from reporter eth price brings us back to decimals given by anchor\\n            uint ethPerToken = readAnchor(tokenConfig);\\n            return mul(usdPerEth, ethPerToken) / 1e6;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a listed cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18)\\n     */\\n    function readAnchor(address cToken) public view returns (uint) {\\n        return readAnchor(getCTokenConfig(cToken));\\n    }\\n\\n    function readAnchor(CTokenMetadata memory tokenConfig) internal view returns (uint) {\\n        if (tokenConfig.anchorSource == AnchorSource.FIXED_ETH) return tokenConfig.fixedAnchorPrice;\\n\\n        return anchor.assetPrices(tokenConfig.anchorOracleKey);\\n    }\\n\\n    /// @notice invalidate the reporter, and fall back to using anchor directly in all cases\\n    function invalidate(bytes memory message, bytes memory signature) public {\\n        (string memory decoded_message, ) = abi.decode(message, (string, address));\\n        require(keccak256(abi.encodePacked(decoded_message)) == keccak256(abi.encodePacked(\\\"rotate\\\")), \\\"invalidation message must be 'rotate'\\\");\\n        require(priceData.source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\n\\n        reporterBreaker = true;\\n        emit ReporterInvalidated(reporter);\\n    }\\n\\n    /// @notice invalidate the anchor, and fall back to using reporter without anchor\\n\\n    /// @dev determine if anchor is stale by checking when usdc was last updated\\n    /// @dev all anchor prices are converted through usdc price, so if it is stale they are all stale\\n    function cutAnchor() external {\\n        AnchorOracle.Anchor memory latestUsdcAnchor = anchor.anchors(cUsdcAnchorKey);\\n\\n        uint usdcAnchorBlockNumber = mul(latestUsdcAnchor.period, anchor.numBlocksPerPeriod());\\n        uint blocksSinceUpdate = block.number - usdcAnchorBlockNumber;\\n\\n        // one day in 15 second blocks without an update\\n        if (blocksSinceUpdate > blocksInADay) {\\n            anchorBreaker = true;\\n            emit AnchorCut(address(anchor));\\n        }\\n    }\\n\\n\\n    // @notice overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x9689a271a019257ae106d29d87fabc2d17cf329073eb4d55473bfde93968d7f6\",\"license\":\"GPL-3.0\"},\"contracts/AnchoredView/SymbolConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract SymbolConfiguration {\\n    /// special cased anchor oracle keys\\n    address public constant cUsdcAnchorKey = address(1);\\n    address public constant cUsdtAnchorKey = address(1);\\n    address public constant cDaiAnchorKey = address(2);\\n\\n    /// @notice standard amount for the Dollar\\n    uint public constant oneDollar = 1e6;\\n\\n    // Address of the oracle key (underlying) for cTokens non special keyed tokens\\n    address public immutable cRepAnchorKey;\\n    address public immutable cWbtcAnchorKey;\\n    address public immutable cBatAnchorKey;\\n    address public immutable cZrxAnchorKey;\\n\\n    // Frozen prices for SAI and eth, so no oracle key\\n    uint public constant saiAnchorPrice = 5285551943761727;\\n    uint public constant ethAnchorPrice = 1e18;\\n\\n    /// @notice The CToken contracts addresses\\n    struct CTokens {\\n        address cEthAddress;\\n        address cUsdcAddress;\\n        address cDaiAddress;\\n        address cRepAddress;\\n        address cWbtcAddress;\\n        address cBatAddress;\\n        address cZrxAddress;\\n        address cSaiAddress;\\n        address cUsdtAddress;\\n    }\\n\\n    enum PriceSource {ANCHOR, FIXED_USD, REPORTER}\\n    enum AnchorSource {ANCHOR, FIXED_USD, FIXED_ETH}\\n\\n    /// @notice Immutable configuration for a cToken\\n    struct CTokenMetadata {\\n        address cTokenAddress;\\n        address anchorOracleKey;\\n        string openOracleKey;\\n        uint baseUnit;\\n        PriceSource priceSource;\\n        AnchorSource anchorSource;\\n        uint fixedAnchorPrice;\\n        uint fixedReporterPrice;\\n    }\\n\\n    // The binary representation for token symbols, used for string comparison\\n    bytes32 constant symbolEth = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant symbolUsdc = keccak256(abi.encodePacked(\\\"USDC\\\"));\\n    bytes32 constant symbolDai = keccak256(abi.encodePacked(\\\"DAI\\\"));\\n    bytes32 constant symbolRep = keccak256(abi.encodePacked(\\\"REP\\\"));\\n    bytes32 constant symbolWbtc = keccak256(abi.encodePacked(\\\"BTC\\\"));\\n    bytes32 constant symbolBat = keccak256(abi.encodePacked(\\\"BAT\\\"));\\n    bytes32 constant symbolZrx = keccak256(abi.encodePacked(\\\"ZRX\\\"));\\n    bytes32 constant symbolSai = keccak256(abi.encodePacked(\\\"SAI\\\"));\\n    bytes32 constant symbolUsdt = keccak256(abi.encodePacked(\\\"USDT\\\"));\\n\\n    //  Address of the cToken contracts\\n    address public immutable cEthAddress;\\n    address public immutable cUsdcAddress;\\n    address public immutable cDaiAddress;\\n    address public immutable cRepAddress;\\n    address public immutable cWbtcAddress;\\n    address public immutable cBatAddress;\\n    address public immutable cZrxAddress;\\n    address public immutable cSaiAddress;\\n    address public immutable cUsdtAddress;\\n\\n    /// @param tokens_ The CTokens struct that contains addresses for CToken contracts\\n    constructor(CTokens memory tokens_) public {\\n        cEthAddress = tokens_.cEthAddress;\\n        cUsdcAddress = tokens_.cUsdcAddress;\\n        cDaiAddress = tokens_.cDaiAddress;\\n        cRepAddress = tokens_.cRepAddress;\\n        cWbtcAddress = tokens_.cWbtcAddress;\\n        cBatAddress = tokens_.cBatAddress;\\n        cZrxAddress = tokens_.cZrxAddress;\\n        cSaiAddress = tokens_.cSaiAddress;\\n        cUsdtAddress = tokens_.cUsdtAddress;\\n\\n        cRepAnchorKey = CErc20(tokens_.cRepAddress).underlying();\\n        cWbtcAnchorKey = CErc20(tokens_.cWbtcAddress).underlying();\\n        cBatAnchorKey = CErc20(tokens_.cBatAddress).underlying();\\n        cZrxAnchorKey = CErc20(tokens_.cZrxAddress).underlying();\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for a symbol\\n     * @param symbol The symbol to map to cTokenMetadata\\n     * @return The configuration metadata for the symbol\\n     */\\n    function getCTokenConfig(string memory symbol) public view returns (CTokenMetadata memory) {\\n        address cToken = getCTokenAddress(symbol);\\n        return getCTokenConfig(cToken);\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for an address\\n     * @param cToken The address to map to cTokenMetadata\\n     * @return The configuration metadata for the address\\n     */\\n    function getCTokenConfig(address cToken) public view returns(CTokenMetadata memory) {\\n        if (cToken == cEthAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ETH\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cEthAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 1e18\\n                        });\\n        }\\n\\n        if (cToken == cUsdcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDC\\\",\\n                        anchorOracleKey: cUsdcAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdcAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        if (cToken == cDaiAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"DAI\\\",\\n                        anchorOracleKey: cDaiAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cDaiAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cRepAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"REP\\\",\\n                        anchorOracleKey: cRepAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cRepAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cWbtcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BTC\\\",\\n                        anchorOracleKey: cWbtcAnchorKey,\\n                        baseUnit: 1e8,\\n                        cTokenAddress: cWbtcAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cBatAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BAT\\\",\\n                        anchorOracleKey: cBatAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cBatAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cZrxAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ZRX\\\",\\n                        anchorOracleKey: cZrxAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cZrxAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cSaiAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"SAI\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cSaiAddress,\\n                        priceSource: PriceSource.ANCHOR,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedAnchorPrice: saiAnchorPrice,\\n                        fixedReporterPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cUsdtAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDT\\\",\\n                        anchorOracleKey: cUsdtAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdtAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        return CTokenMetadata({\\n                    openOracleKey: \\\"UNCONFIGURED\\\",\\n                    anchorOracleKey: address(0),\\n                    baseUnit: 0,\\n                    cTokenAddress: address(0),\\n                    priceSource: PriceSource.FIXED_USD,\\n                    anchorSource: AnchorSource.FIXED_USD,\\n                    fixedReporterPrice: 0,\\n                    fixedAnchorPrice: 0\\n                    });\\n    }\\n\\n    /**\\n     * @notice Returns the cToken address for symbol\\n     * @param symbol The symbol to map to cToken address\\n     * @return The cToken address for the given symbol\\n     */\\n    function getCTokenAddress(string memory symbol) public view returns (address) {\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        if (symbolHash == symbolEth) return cEthAddress;\\n        if (symbolHash == symbolUsdc) return cUsdcAddress;\\n        if (symbolHash == symbolDai) return cDaiAddress;\\n        if (symbolHash == symbolRep) return cRepAddress;\\n        if (symbolHash == symbolWbtc) return cWbtcAddress;\\n        if (symbolHash == symbolBat) return cBatAddress;\\n        if (symbolHash == symbolZrx) return cZrxAddress;\\n        if (symbolHash == symbolSai) return cSaiAddress;\\n        if (symbolHash == symbolUsdt) return cUsdtAddress;\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x4aacd44b94fe812d2784f3995d6799e0c2b97c7649c650ef292bac323ca36758\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n\\n        return key;\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x9429fbfc82572ea5c7ec6d5a56d4670fc5154dc87c49695738ee8b302b94bdc0\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/AnchoredView/AnchoredView.sol:AnchoredView":{"abi":"[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"contract AnchorOracle\",\"name\":\"anchor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cEthAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cDaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cRepAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cBatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cZrxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cSaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdtAddress\",\"type\":\"address\"}],\"internalType\":\"struct SymbolConfiguration.CTokens\",\"name\":\"tokens_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"name\":\"AnchorCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchor\",\"outputs\":[{\"internalType\":\"contract AnchorOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBatAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBatAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cSaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethPerUsdc\",\"type\":\"uint256\"}],\"name\":\"getAnchorInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"readAnchor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saiAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"contract AnchorOracle\",\"name\":\"anchor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cEthAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cDaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cRepAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cBatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cZrxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cSaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdtAddress\",\"type\":\"address\"}],\"internalType\":\"struct SymbolConfiguration.CTokens\",\"name\":\"tokens_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchor\",\"type\":\"address\"}],\"name\":\"AnchorCut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"_prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchor\",\"outputs\":[{\"internalType\":\"contract AnchorOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"anchorBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBatAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBatAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cSaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cutAnchor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethPerUsdc\",\"type\":\"uint256\"}],\"name\":\"getAnchorInUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"readAnchor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterBreaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saiAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"details\":\"Use a single open oracle reporter and anchored to and falling back to the Compound v2 oracle system.The reporter must report at a minimum the USD/ETH price, so that anchor ETH/TOKEN prices can be converted to USD/TOKEN\",\"methods\":{\"constructor\":{\"params\":{\"anchorToleranceMantissa_\":\"The tolerance allowed between the anchor and median. A tolerance of 10e16 means a new median that is 10% off from the anchor will still be saved\",\"anchor_\":\"The PriceOracleProxy that will be used to verify reporter price, or serve prices not given by the reporter\",\"data_\":\"Address of the Oracle Data contract\",\"reporter_\":\"The reporter address whose price will be used if it matches the anchor\",\"tokens_\":\"The CTokens struct that contains addresses for CToken contracts\"}},\"cutAnchor()\":{\"details\":\"determine if anchor is stale by checking when usdc was last updatedall anchor prices are converted through usdc price, so if it is stale they are all stale\"},\"getAnchorInUsd(address,uint256)\":{\"details\":\"fetch price in eth from proxy and convert to usd price using anchor usdc price.Anchor price has 36 - underlying decimals, so scale back up to 36 decimals before dividing by by usdc price  (30 decimals), yielding 6 decimal usd price\"},\"getCTokenAddress(string)\":{\"params\":{\"symbol\":\"The symbol to map to cToken address\"},\"returns\":{\"_0\":\"The cToken address for the given symbol\"}},\"getCTokenConfig(address)\":{\"params\":{\"cToken\":\"The address to map to cTokenMetadata\"},\"returns\":{\"_0\":\"The configuration metadata for the address\"}},\"getCTokenConfig(string)\":{\"params\":{\"symbol\":\"The symbol to map to cTokenMetadata\"},\"returns\":{\"_0\":\"The configuration metadata for the symbol\"}},\"getUnderlyingPrice(address)\":{\"details\":\"converts from 1e6 decimals of Open Oracle to 1e(36 - underlyingDecimals) of PriceOracleProxy\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"The price for the given cToken address\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"prices(string)\":{\"details\":\"If price was posted by reporter, return it. Otherwise, return anchor price converted through reporter ETH price.\"},\"readAnchor(address)\":{\"params\":{\"cToken\":\"The cToken to get the underlying price of\"},\"returns\":{\"_0\":\"The underlying asset price mantissa (scaled by 1e18)\"}}},\"stateVariables\":{\"blocksInADay\":{\"details\":\"Average blocks per day, for checking anchor staleness (1 day / 15)\"},\"lowerBoundAnchorRatio\":{\"details\":\"The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"},\"upperBoundAnchorRatio\":{\"details\":\"The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"}}},\"userdoc\":{\"methods\":{\"_prices(string)\":{\"notice\":\"The mapping of anchored reporter prices by symbol\"},\"anchor()\":{\"notice\":\"The anchor oracle ( Compound Oracle V1 )\"},\"anchorBreaker()\":{\"notice\":\"Circuit breaker for using reporter price without anchor\"},\"cUsdcAnchorKey()\":{\"notice\":\"special cased anchor oracle keys\"},\"getCTokenAddress(string)\":{\"notice\":\"Returns the cToken address for symbol\"},\"getCTokenConfig(address)\":{\"notice\":\"Returns the CTokenMetadata for an address\"},\"getCTokenConfig(string)\":{\"notice\":\"Returns the CTokenMetadata for a symbol\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Implements the method of the PriceOracle interface of Compound v2 and returns returns the Eth price for an asset.\"},\"invalidate(bytes,bytes)\":{\"notice\":\"invalidate the reporter, and fall back to using anchor directly in all cases\"},\"oneDollar()\":{\"notice\":\"standard amount for the Dollar\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(string)\":{\"notice\":\"Returns price denominated in USD, with 6 decimals\"},\"readAnchor(address)\":{\"notice\":\"Get the underlying price of a listed cToken asset\"},\"reporter()\":{\"notice\":\"the Open Oracle Reporter price reporter\"},\"reporterBreaker()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"}},\"notice\":\"Price feed conforming to Price Oracle Proxy interface.\"}},\"settings\":{\"compilationTarget\":{\"contracts/AnchoredView/AnchoredView.sol\":\"AnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnchoredView/AnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SymbolConfiguration.sol\\\";\\nimport \\\"../OpenOraclePriceData.sol\\\";\\n\\ninterface AnchorOracle {\\n    function numBlocksPerPeriod() external view returns (uint); // approximately 1 hour: 60 seconds/minute * 60 minutes/hour * 1 block/15 seconds\\n\\n    function assetPrices(address asset) external view returns (uint);\\n\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    function anchors(address asset) external view returns (Anchor memory);\\n}\\n\\n\\n/**\\n * @notice Price feed conforming to Price Oracle Proxy interface.\\n * @dev Use a single open oracle reporter and anchored to and falling back to the Compound v2 oracle system.\\n * @dev The reporter must report at a minimum the USD/ETH price, so that anchor ETH/TOKEN prices can be converted to USD/TOKEN\\n * @author Compound Labs, Inc.\\n */\\ncontract AnchoredView is SymbolConfiguration {\\n    /// @notice The mapping of anchored reporter prices by symbol\\n    mapping(string => uint) public _prices;\\n\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\n    bool public reporterBreaker;\\n\\n    /// @notice Circuit breaker for using reporter price without anchor\\n    bool public anchorBreaker;\\n\\n    /// @notice the Open Oracle Reporter price reporter\\n    address public immutable reporter;\\n\\n    /// @notice The anchor oracle ( Compound Oracle V1 )\\n    AnchorOracle public immutable anchor;\\n\\n    /// @notice The Open Oracle Price Data contract\\n    OpenOraclePriceData public immutable priceData;\\n\\n    /// @dev The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint immutable upperBoundAnchorRatio;\\n\\n    /// @dev The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint immutable lowerBoundAnchorRatio;\\n\\n    /// @dev Average blocks per day, for checking anchor staleness (1 day / 15)\\n    uint constant blocksInADay = 5760;\\n\\n    /// @notice The event emitted when the median price is updated\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\n\\n    /// @notice The event emitted when reporter invalidates itself\\n    event ReporterInvalidated(address reporter);\\n\\n    /// @notice The event emitted when the anchor is cut for staleness\\n    event AnchorCut(address anchor);\\n\\n    /**\\n     * @param data_ Address of the Oracle Data contract\\n     * @param reporter_ The reporter address whose price will be used if it matches the anchor\\n     * @param anchor_ The PriceOracleProxy that will be used to verify reporter price, or serve prices not given by the reporter\\n     * @param anchorToleranceMantissa_ The tolerance allowed between the anchor and median. A tolerance of 10e16 means a new median that is 10% off from the anchor will still be saved\\n     * @param tokens_ The CTokens struct that contains addresses for CToken contracts\\n     */\\n    constructor(OpenOraclePriceData data_,\\n                address reporter_,\\n                AnchorOracle anchor_,\\n                uint anchorToleranceMantissa_,\\n                CTokens memory tokens_) SymbolConfiguration(tokens_) public {\\n        reporter = reporter_;\\n        anchor = anchor_;\\n        priceData = data_;\\n\\n        require(anchorToleranceMantissa_ < 100e16, \\\"Anchor Tolerance is too high\\\");\\n        upperBoundAnchorRatio = 100e16 + anchorToleranceMantissa_;\\n        lowerBoundAnchorRatio = 100e16 - anchorToleranceMantissa_;\\n    }\\n\\n    /**\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view\\n     * @param messages The messages to post to the oracle\\n     * @param signatures The signatures for the corresponding messages\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\n     */\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\n\\n        // Save the prices\\n        for (uint i = 0; i < messages.length; i++) {\\n            priceData.put(messages[i], signatures[i]);\\n        }\\n\\n        // load usdc for using in loop to convert anchor prices to dollars\\n        uint usdcPrice = readAnchor(cUsdcAddress);\\n\\n        // Try to update the view storage\\n        for (uint i = 0; i < symbols.length; i++) {\\n            CTokenMetadata memory tokenConfig = getCTokenConfig(symbols[i]);\\n            // symbol is not supported in the view, but allow writing to data\\n            if (tokenConfig.cTokenAddress == address(0)) continue;\\n\\n            uint reporterPrice = priceData.getPrice(reporter, tokenConfig.openOracleKey);\\n            uint anchorPrice = getAnchorInUsd(tokenConfig, usdcPrice);\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\n            bool withinAnchor = anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\n\\n            if (withinAnchor || anchorBreaker) {\\n                // only update and emit event if value changes\\n                if (_prices[tokenConfig.openOracleKey] != reporterPrice) {\\n                    _prices[tokenConfig.openOracleKey] = reporterPrice;\\n                    emit PriceUpdated(tokenConfig.openOracleKey, reporterPrice);\\n                }\\n            } else {\\n                emit PriceGuarded(tokenConfig.openOracleKey, reporterPrice, anchorPrice);\\n            }\\n        }\\n    }\\n    /**\\n     * @notice Returns price denominated in USD, with 6 decimals\\n     * @dev If price was posted by reporter, return it. Otherwise, return anchor price converted through reporter ETH price.\\n     */\\n    function prices(string calldata symbol) external view returns (uint) {\\n        CTokenMetadata memory tokenConfig = getCTokenConfig(symbol);\\n\\n        if (tokenConfig.priceSource == PriceSource.REPORTER) return _prices[symbol];\\n        if (tokenConfig.priceSource == PriceSource.FIXED_USD) return tokenConfig.fixedReporterPrice;\\n        if (tokenConfig.priceSource == PriceSource.ANCHOR) {\\n            uint usdPerEth = _prices[\\\"ETH\\\"];\\n            require(usdPerEth > 0, \\\"eth price not set, cannot convert eth to dollars\\\");\\n\\n            uint ethPerToken = readAnchor(tokenConfig);\\n            return mul(usdPerEth, ethPerToken) / tokenConfig.baseUnit;\\n        }\\n    }\\n\\n    /**\\n     * @dev fetch price in eth from proxy and convert to usd price using anchor usdc price.\\n     * @dev Anchor price has 36 - underlying decimals, so scale back up to 36 decimals before dividing by by usdc price  (30 decimals), yielding 6 decimal usd price\\n     */\\n    function getAnchorInUsd(address cToken, uint ethPerUsdc) public view returns (uint) {\\n        CTokenMetadata memory tokenConfig = getCTokenConfig(cToken);\\n        return getAnchorInUsd(tokenConfig, ethPerUsdc);\\n    }\\n\\n    function getAnchorInUsd(CTokenMetadata memory tokenConfig, uint ethPerUsdc) internal view returns (uint) {\\n        if (tokenConfig.anchorSource == AnchorSource.FIXED_USD) {\\n            return tokenConfig.fixedAnchorPrice;\\n        }\\n\\n        uint ethPerToken = readAnchor(tokenConfig);\\n\\n        return mul(ethPerToken, tokenConfig.baseUnit) / ethPerUsdc;\\n    }\\n\\n    /**\\n     * @notice Implements the method of the PriceOracle interface of Compound v2 and returns returns the Eth price for an asset.\\n     * @dev converts from 1e6 decimals of Open Oracle to 1e(36 - underlyingDecimals) of PriceOracleProxy\\n     * @param cToken The cToken address for price retrieval\\n     * @return The price for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) public view returns (uint) {\\n        CTokenMetadata memory tokenConfig = getCTokenConfig(cToken);\\n        if (reporterBreaker == true) {\\n            return readAnchor(tokenConfig);\\n        }\\n\\n        if (tokenConfig.priceSource == PriceSource.FIXED_USD) {\\n            uint usdPerToken = tokenConfig.fixedReporterPrice;\\n            return mul(usdPerToken, 1e30) / tokenConfig.baseUnit;\\n        }\\n\\n        if (tokenConfig.priceSource == PriceSource.REPORTER) {\\n            uint usdPerToken = _prices[tokenConfig.openOracleKey];\\n            return mul(usdPerToken, 1e30) / tokenConfig.baseUnit;\\n        }\\n\\n        if (tokenConfig.priceSource == PriceSource.ANCHOR) {\\n            // convert anchor price to usd, via reporter eth price\\n            uint usdPerEth = _prices[\\\"ETH\\\"];\\n            require(usdPerEth != 0, \\\"no reporter price for usd/eth exists, cannot convert anchor price to usd terms\\\");\\n\\n            // factoring out extra 6 decimals from reporter eth price brings us back to decimals given by anchor\\n            uint ethPerToken = readAnchor(tokenConfig);\\n            return mul(usdPerEth, ethPerToken) / 1e6;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a listed cToken asset\\n     * @param cToken The cToken to get the underlying price of\\n     * @return The underlying asset price mantissa (scaled by 1e18)\\n     */\\n    function readAnchor(address cToken) public view returns (uint) {\\n        return readAnchor(getCTokenConfig(cToken));\\n    }\\n\\n    function readAnchor(CTokenMetadata memory tokenConfig) internal view returns (uint) {\\n        if (tokenConfig.anchorSource == AnchorSource.FIXED_ETH) return tokenConfig.fixedAnchorPrice;\\n\\n        return anchor.assetPrices(tokenConfig.anchorOracleKey);\\n    }\\n\\n    /// @notice invalidate the reporter, and fall back to using anchor directly in all cases\\n    function invalidate(bytes memory message, bytes memory signature) public {\\n        (string memory decoded_message, ) = abi.decode(message, (string, address));\\n        require(keccak256(abi.encodePacked(decoded_message)) == keccak256(abi.encodePacked(\\\"rotate\\\")), \\\"invalidation message must be 'rotate'\\\");\\n        require(priceData.source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\n\\n        reporterBreaker = true;\\n        emit ReporterInvalidated(reporter);\\n    }\\n\\n    /// @notice invalidate the anchor, and fall back to using reporter without anchor\\n\\n    /// @dev determine if anchor is stale by checking when usdc was last updated\\n    /// @dev all anchor prices are converted through usdc price, so if it is stale they are all stale\\n    function cutAnchor() external {\\n        AnchorOracle.Anchor memory latestUsdcAnchor = anchor.anchors(cUsdcAnchorKey);\\n\\n        uint usdcAnchorBlockNumber = mul(latestUsdcAnchor.period, anchor.numBlocksPerPeriod());\\n        uint blocksSinceUpdate = block.number - usdcAnchorBlockNumber;\\n\\n        // one day in 15 second blocks without an update\\n        if (blocksSinceUpdate > blocksInADay) {\\n            anchorBreaker = true;\\n            emit AnchorCut(address(anchor));\\n        }\\n    }\\n\\n\\n    // @notice overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x9689a271a019257ae106d29d87fabc2d17cf329073eb4d55473bfde93968d7f6\",\"license\":\"GPL-3.0\"},\"contracts/AnchoredView/SymbolConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract SymbolConfiguration {\\n    /// special cased anchor oracle keys\\n    address public constant cUsdcAnchorKey = address(1);\\n    address public constant cUsdtAnchorKey = address(1);\\n    address public constant cDaiAnchorKey = address(2);\\n\\n    /// @notice standard amount for the Dollar\\n    uint public constant oneDollar = 1e6;\\n\\n    // Address of the oracle key (underlying) for cTokens non special keyed tokens\\n    address public immutable cRepAnchorKey;\\n    address public immutable cWbtcAnchorKey;\\n    address public immutable cBatAnchorKey;\\n    address public immutable cZrxAnchorKey;\\n\\n    // Frozen prices for SAI and eth, so no oracle key\\n    uint public constant saiAnchorPrice = 5285551943761727;\\n    uint public constant ethAnchorPrice = 1e18;\\n\\n    /// @notice The CToken contracts addresses\\n    struct CTokens {\\n        address cEthAddress;\\n        address cUsdcAddress;\\n        address cDaiAddress;\\n        address cRepAddress;\\n        address cWbtcAddress;\\n        address cBatAddress;\\n        address cZrxAddress;\\n        address cSaiAddress;\\n        address cUsdtAddress;\\n    }\\n\\n    enum PriceSource {ANCHOR, FIXED_USD, REPORTER}\\n    enum AnchorSource {ANCHOR, FIXED_USD, FIXED_ETH}\\n\\n    /// @notice Immutable configuration for a cToken\\n    struct CTokenMetadata {\\n        address cTokenAddress;\\n        address anchorOracleKey;\\n        string openOracleKey;\\n        uint baseUnit;\\n        PriceSource priceSource;\\n        AnchorSource anchorSource;\\n        uint fixedAnchorPrice;\\n        uint fixedReporterPrice;\\n    }\\n\\n    // The binary representation for token symbols, used for string comparison\\n    bytes32 constant symbolEth = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant symbolUsdc = keccak256(abi.encodePacked(\\\"USDC\\\"));\\n    bytes32 constant symbolDai = keccak256(abi.encodePacked(\\\"DAI\\\"));\\n    bytes32 constant symbolRep = keccak256(abi.encodePacked(\\\"REP\\\"));\\n    bytes32 constant symbolWbtc = keccak256(abi.encodePacked(\\\"BTC\\\"));\\n    bytes32 constant symbolBat = keccak256(abi.encodePacked(\\\"BAT\\\"));\\n    bytes32 constant symbolZrx = keccak256(abi.encodePacked(\\\"ZRX\\\"));\\n    bytes32 constant symbolSai = keccak256(abi.encodePacked(\\\"SAI\\\"));\\n    bytes32 constant symbolUsdt = keccak256(abi.encodePacked(\\\"USDT\\\"));\\n\\n    //  Address of the cToken contracts\\n    address public immutable cEthAddress;\\n    address public immutable cUsdcAddress;\\n    address public immutable cDaiAddress;\\n    address public immutable cRepAddress;\\n    address public immutable cWbtcAddress;\\n    address public immutable cBatAddress;\\n    address public immutable cZrxAddress;\\n    address public immutable cSaiAddress;\\n    address public immutable cUsdtAddress;\\n\\n    /// @param tokens_ The CTokens struct that contains addresses for CToken contracts\\n    constructor(CTokens memory tokens_) public {\\n        cEthAddress = tokens_.cEthAddress;\\n        cUsdcAddress = tokens_.cUsdcAddress;\\n        cDaiAddress = tokens_.cDaiAddress;\\n        cRepAddress = tokens_.cRepAddress;\\n        cWbtcAddress = tokens_.cWbtcAddress;\\n        cBatAddress = tokens_.cBatAddress;\\n        cZrxAddress = tokens_.cZrxAddress;\\n        cSaiAddress = tokens_.cSaiAddress;\\n        cUsdtAddress = tokens_.cUsdtAddress;\\n\\n        cRepAnchorKey = CErc20(tokens_.cRepAddress).underlying();\\n        cWbtcAnchorKey = CErc20(tokens_.cWbtcAddress).underlying();\\n        cBatAnchorKey = CErc20(tokens_.cBatAddress).underlying();\\n        cZrxAnchorKey = CErc20(tokens_.cZrxAddress).underlying();\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for a symbol\\n     * @param symbol The symbol to map to cTokenMetadata\\n     * @return The configuration metadata for the symbol\\n     */\\n    function getCTokenConfig(string memory symbol) public view returns (CTokenMetadata memory) {\\n        address cToken = getCTokenAddress(symbol);\\n        return getCTokenConfig(cToken);\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for an address\\n     * @param cToken The address to map to cTokenMetadata\\n     * @return The configuration metadata for the address\\n     */\\n    function getCTokenConfig(address cToken) public view returns(CTokenMetadata memory) {\\n        if (cToken == cEthAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ETH\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cEthAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 1e18\\n                        });\\n        }\\n\\n        if (cToken == cUsdcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDC\\\",\\n                        anchorOracleKey: cUsdcAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdcAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        if (cToken == cDaiAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"DAI\\\",\\n                        anchorOracleKey: cDaiAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cDaiAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cRepAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"REP\\\",\\n                        anchorOracleKey: cRepAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cRepAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cWbtcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BTC\\\",\\n                        anchorOracleKey: cWbtcAnchorKey,\\n                        baseUnit: 1e8,\\n                        cTokenAddress: cWbtcAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cBatAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BAT\\\",\\n                        anchorOracleKey: cBatAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cBatAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cZrxAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ZRX\\\",\\n                        anchorOracleKey: cZrxAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cZrxAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cSaiAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"SAI\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cSaiAddress,\\n                        priceSource: PriceSource.ANCHOR,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedAnchorPrice: saiAnchorPrice,\\n                        fixedReporterPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cUsdtAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDT\\\",\\n                        anchorOracleKey: cUsdtAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdtAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        return CTokenMetadata({\\n                    openOracleKey: \\\"UNCONFIGURED\\\",\\n                    anchorOracleKey: address(0),\\n                    baseUnit: 0,\\n                    cTokenAddress: address(0),\\n                    priceSource: PriceSource.FIXED_USD,\\n                    anchorSource: AnchorSource.FIXED_USD,\\n                    fixedReporterPrice: 0,\\n                    fixedAnchorPrice: 0\\n                    });\\n    }\\n\\n    /**\\n     * @notice Returns the cToken address for symbol\\n     * @param symbol The symbol to map to cToken address\\n     * @return The cToken address for the given symbol\\n     */\\n    function getCTokenAddress(string memory symbol) public view returns (address) {\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        if (symbolHash == symbolEth) return cEthAddress;\\n        if (symbolHash == symbolUsdc) return cUsdcAddress;\\n        if (symbolHash == symbolDai) return cDaiAddress;\\n        if (symbolHash == symbolRep) return cRepAddress;\\n        if (symbolHash == symbolWbtc) return cWbtcAddress;\\n        if (symbolHash == symbolBat) return cBatAddress;\\n        if (symbolHash == symbolZrx) return cZrxAddress;\\n        if (symbolHash == symbolSai) return cSaiAddress;\\n        if (symbolHash == symbolUsdt) return cUsdtAddress;\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x4aacd44b94fe812d2784f3995d6799e0c2b97c7649c650ef292bac323ca36758\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n\\n        return key;\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x9429fbfc82572ea5c7ec6d5a56d4670fc5154dc87c49695738ee8b302b94bdc0\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/AnchoredView/SymbolConfiguration.sol:CErc20":{"abi":"[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/AnchoredView/SymbolConfiguration.sol\":\"CErc20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnchoredView/SymbolConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract SymbolConfiguration {\\n    /// special cased anchor oracle keys\\n    address public constant cUsdcAnchorKey = address(1);\\n    address public constant cUsdtAnchorKey = address(1);\\n    address public constant cDaiAnchorKey = address(2);\\n\\n    /// @notice standard amount for the Dollar\\n    uint public constant oneDollar = 1e6;\\n\\n    // Address of the oracle key (underlying) for cTokens non special keyed tokens\\n    address public immutable cRepAnchorKey;\\n    address public immutable cWbtcAnchorKey;\\n    address public immutable cBatAnchorKey;\\n    address public immutable cZrxAnchorKey;\\n\\n    // Frozen prices for SAI and eth, so no oracle key\\n    uint public constant saiAnchorPrice = 5285551943761727;\\n    uint public constant ethAnchorPrice = 1e18;\\n\\n    /// @notice The CToken contracts addresses\\n    struct CTokens {\\n        address cEthAddress;\\n        address cUsdcAddress;\\n        address cDaiAddress;\\n        address cRepAddress;\\n        address cWbtcAddress;\\n        address cBatAddress;\\n        address cZrxAddress;\\n        address cSaiAddress;\\n        address cUsdtAddress;\\n    }\\n\\n    enum PriceSource {ANCHOR, FIXED_USD, REPORTER}\\n    enum AnchorSource {ANCHOR, FIXED_USD, FIXED_ETH}\\n\\n    /// @notice Immutable configuration for a cToken\\n    struct CTokenMetadata {\\n        address cTokenAddress;\\n        address anchorOracleKey;\\n        string openOracleKey;\\n        uint baseUnit;\\n        PriceSource priceSource;\\n        AnchorSource anchorSource;\\n        uint fixedAnchorPrice;\\n        uint fixedReporterPrice;\\n    }\\n\\n    // The binary representation for token symbols, used for string comparison\\n    bytes32 constant symbolEth = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant symbolUsdc = keccak256(abi.encodePacked(\\\"USDC\\\"));\\n    bytes32 constant symbolDai = keccak256(abi.encodePacked(\\\"DAI\\\"));\\n    bytes32 constant symbolRep = keccak256(abi.encodePacked(\\\"REP\\\"));\\n    bytes32 constant symbolWbtc = keccak256(abi.encodePacked(\\\"BTC\\\"));\\n    bytes32 constant symbolBat = keccak256(abi.encodePacked(\\\"BAT\\\"));\\n    bytes32 constant symbolZrx = keccak256(abi.encodePacked(\\\"ZRX\\\"));\\n    bytes32 constant symbolSai = keccak256(abi.encodePacked(\\\"SAI\\\"));\\n    bytes32 constant symbolUsdt = keccak256(abi.encodePacked(\\\"USDT\\\"));\\n\\n    //  Address of the cToken contracts\\n    address public immutable cEthAddress;\\n    address public immutable cUsdcAddress;\\n    address public immutable cDaiAddress;\\n    address public immutable cRepAddress;\\n    address public immutable cWbtcAddress;\\n    address public immutable cBatAddress;\\n    address public immutable cZrxAddress;\\n    address public immutable cSaiAddress;\\n    address public immutable cUsdtAddress;\\n\\n    /// @param tokens_ The CTokens struct that contains addresses for CToken contracts\\n    constructor(CTokens memory tokens_) public {\\n        cEthAddress = tokens_.cEthAddress;\\n        cUsdcAddress = tokens_.cUsdcAddress;\\n        cDaiAddress = tokens_.cDaiAddress;\\n        cRepAddress = tokens_.cRepAddress;\\n        cWbtcAddress = tokens_.cWbtcAddress;\\n        cBatAddress = tokens_.cBatAddress;\\n        cZrxAddress = tokens_.cZrxAddress;\\n        cSaiAddress = tokens_.cSaiAddress;\\n        cUsdtAddress = tokens_.cUsdtAddress;\\n\\n        cRepAnchorKey = CErc20(tokens_.cRepAddress).underlying();\\n        cWbtcAnchorKey = CErc20(tokens_.cWbtcAddress).underlying();\\n        cBatAnchorKey = CErc20(tokens_.cBatAddress).underlying();\\n        cZrxAnchorKey = CErc20(tokens_.cZrxAddress).underlying();\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for a symbol\\n     * @param symbol The symbol to map to cTokenMetadata\\n     * @return The configuration metadata for the symbol\\n     */\\n    function getCTokenConfig(string memory symbol) public view returns (CTokenMetadata memory) {\\n        address cToken = getCTokenAddress(symbol);\\n        return getCTokenConfig(cToken);\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for an address\\n     * @param cToken The address to map to cTokenMetadata\\n     * @return The configuration metadata for the address\\n     */\\n    function getCTokenConfig(address cToken) public view returns(CTokenMetadata memory) {\\n        if (cToken == cEthAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ETH\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cEthAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 1e18\\n                        });\\n        }\\n\\n        if (cToken == cUsdcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDC\\\",\\n                        anchorOracleKey: cUsdcAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdcAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        if (cToken == cDaiAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"DAI\\\",\\n                        anchorOracleKey: cDaiAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cDaiAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cRepAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"REP\\\",\\n                        anchorOracleKey: cRepAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cRepAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cWbtcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BTC\\\",\\n                        anchorOracleKey: cWbtcAnchorKey,\\n                        baseUnit: 1e8,\\n                        cTokenAddress: cWbtcAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cBatAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BAT\\\",\\n                        anchorOracleKey: cBatAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cBatAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cZrxAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ZRX\\\",\\n                        anchorOracleKey: cZrxAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cZrxAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cSaiAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"SAI\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cSaiAddress,\\n                        priceSource: PriceSource.ANCHOR,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedAnchorPrice: saiAnchorPrice,\\n                        fixedReporterPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cUsdtAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDT\\\",\\n                        anchorOracleKey: cUsdtAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdtAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        return CTokenMetadata({\\n                    openOracleKey: \\\"UNCONFIGURED\\\",\\n                    anchorOracleKey: address(0),\\n                    baseUnit: 0,\\n                    cTokenAddress: address(0),\\n                    priceSource: PriceSource.FIXED_USD,\\n                    anchorSource: AnchorSource.FIXED_USD,\\n                    fixedReporterPrice: 0,\\n                    fixedAnchorPrice: 0\\n                    });\\n    }\\n\\n    /**\\n     * @notice Returns the cToken address for symbol\\n     * @param symbol The symbol to map to cToken address\\n     * @return The cToken address for the given symbol\\n     */\\n    function getCTokenAddress(string memory symbol) public view returns (address) {\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        if (symbolHash == symbolEth) return cEthAddress;\\n        if (symbolHash == symbolUsdc) return cUsdcAddress;\\n        if (symbolHash == symbolDai) return cDaiAddress;\\n        if (symbolHash == symbolRep) return cRepAddress;\\n        if (symbolHash == symbolWbtc) return cWbtcAddress;\\n        if (symbolHash == symbolBat) return cBatAddress;\\n        if (symbolHash == symbolZrx) return cZrxAddress;\\n        if (symbolHash == symbolSai) return cSaiAddress;\\n        if (symbolHash == symbolUsdt) return cUsdtAddress;\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x4aacd44b94fe812d2784f3995d6799e0c2b97c7649c650ef292bac323ca36758\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/AnchoredView/SymbolConfiguration.sol:SymbolConfiguration":{"abi":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cEthAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cDaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cRepAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cBatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cZrxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cSaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdtAddress\",\"type\":\"address\"}],\"internalType\":\"struct SymbolConfiguration.CTokens\",\"name\":\"tokens_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cBatAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBatAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cSaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saiAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cEthAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cDaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cRepAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cWbtcAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cBatAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cZrxAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cSaiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cUsdtAddress\",\"type\":\"address\"}],\"internalType\":\"struct SymbolConfiguration.CTokens\",\"name\":\"tokens_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cBatAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cBatAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cDaiAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cRepAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cSaiAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cUsdtAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cWbtcAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cZrxAnchorKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getCTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"anchorOracleKey\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"openOracleKey\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum SymbolConfiguration.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"enum SymbolConfiguration.AnchorSource\",\"name\":\"anchorSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedAnchorPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fixedReporterPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct SymbolConfiguration.CTokenMetadata\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saiAnchorPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"tokens_\":\"The CTokens struct that contains addresses for CToken contracts\"}},\"getCTokenAddress(string)\":{\"params\":{\"symbol\":\"The symbol to map to cToken address\"},\"returns\":{\"_0\":\"The cToken address for the given symbol\"}},\"getCTokenConfig(address)\":{\"params\":{\"cToken\":\"The address to map to cTokenMetadata\"},\"returns\":{\"_0\":\"The configuration metadata for the address\"}},\"getCTokenConfig(string)\":{\"params\":{\"symbol\":\"The symbol to map to cTokenMetadata\"},\"returns\":{\"_0\":\"The configuration metadata for the symbol\"}}}},\"userdoc\":{\"methods\":{\"cUsdcAnchorKey()\":{\"notice\":\"special cased anchor oracle keys\"},\"getCTokenAddress(string)\":{\"notice\":\"Returns the cToken address for symbol\"},\"getCTokenConfig(address)\":{\"notice\":\"Returns the CTokenMetadata for an address\"},\"getCTokenConfig(string)\":{\"notice\":\"Returns the CTokenMetadata for a symbol\"},\"oneDollar()\":{\"notice\":\"standard amount for the Dollar\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/AnchoredView/SymbolConfiguration.sol\":\"SymbolConfiguration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AnchoredView/SymbolConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract SymbolConfiguration {\\n    /// special cased anchor oracle keys\\n    address public constant cUsdcAnchorKey = address(1);\\n    address public constant cUsdtAnchorKey = address(1);\\n    address public constant cDaiAnchorKey = address(2);\\n\\n    /// @notice standard amount for the Dollar\\n    uint public constant oneDollar = 1e6;\\n\\n    // Address of the oracle key (underlying) for cTokens non special keyed tokens\\n    address public immutable cRepAnchorKey;\\n    address public immutable cWbtcAnchorKey;\\n    address public immutable cBatAnchorKey;\\n    address public immutable cZrxAnchorKey;\\n\\n    // Frozen prices for SAI and eth, so no oracle key\\n    uint public constant saiAnchorPrice = 5285551943761727;\\n    uint public constant ethAnchorPrice = 1e18;\\n\\n    /// @notice The CToken contracts addresses\\n    struct CTokens {\\n        address cEthAddress;\\n        address cUsdcAddress;\\n        address cDaiAddress;\\n        address cRepAddress;\\n        address cWbtcAddress;\\n        address cBatAddress;\\n        address cZrxAddress;\\n        address cSaiAddress;\\n        address cUsdtAddress;\\n    }\\n\\n    enum PriceSource {ANCHOR, FIXED_USD, REPORTER}\\n    enum AnchorSource {ANCHOR, FIXED_USD, FIXED_ETH}\\n\\n    /// @notice Immutable configuration for a cToken\\n    struct CTokenMetadata {\\n        address cTokenAddress;\\n        address anchorOracleKey;\\n        string openOracleKey;\\n        uint baseUnit;\\n        PriceSource priceSource;\\n        AnchorSource anchorSource;\\n        uint fixedAnchorPrice;\\n        uint fixedReporterPrice;\\n    }\\n\\n    // The binary representation for token symbols, used for string comparison\\n    bytes32 constant symbolEth = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant symbolUsdc = keccak256(abi.encodePacked(\\\"USDC\\\"));\\n    bytes32 constant symbolDai = keccak256(abi.encodePacked(\\\"DAI\\\"));\\n    bytes32 constant symbolRep = keccak256(abi.encodePacked(\\\"REP\\\"));\\n    bytes32 constant symbolWbtc = keccak256(abi.encodePacked(\\\"BTC\\\"));\\n    bytes32 constant symbolBat = keccak256(abi.encodePacked(\\\"BAT\\\"));\\n    bytes32 constant symbolZrx = keccak256(abi.encodePacked(\\\"ZRX\\\"));\\n    bytes32 constant symbolSai = keccak256(abi.encodePacked(\\\"SAI\\\"));\\n    bytes32 constant symbolUsdt = keccak256(abi.encodePacked(\\\"USDT\\\"));\\n\\n    //  Address of the cToken contracts\\n    address public immutable cEthAddress;\\n    address public immutable cUsdcAddress;\\n    address public immutable cDaiAddress;\\n    address public immutable cRepAddress;\\n    address public immutable cWbtcAddress;\\n    address public immutable cBatAddress;\\n    address public immutable cZrxAddress;\\n    address public immutable cSaiAddress;\\n    address public immutable cUsdtAddress;\\n\\n    /// @param tokens_ The CTokens struct that contains addresses for CToken contracts\\n    constructor(CTokens memory tokens_) public {\\n        cEthAddress = tokens_.cEthAddress;\\n        cUsdcAddress = tokens_.cUsdcAddress;\\n        cDaiAddress = tokens_.cDaiAddress;\\n        cRepAddress = tokens_.cRepAddress;\\n        cWbtcAddress = tokens_.cWbtcAddress;\\n        cBatAddress = tokens_.cBatAddress;\\n        cZrxAddress = tokens_.cZrxAddress;\\n        cSaiAddress = tokens_.cSaiAddress;\\n        cUsdtAddress = tokens_.cUsdtAddress;\\n\\n        cRepAnchorKey = CErc20(tokens_.cRepAddress).underlying();\\n        cWbtcAnchorKey = CErc20(tokens_.cWbtcAddress).underlying();\\n        cBatAnchorKey = CErc20(tokens_.cBatAddress).underlying();\\n        cZrxAnchorKey = CErc20(tokens_.cZrxAddress).underlying();\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for a symbol\\n     * @param symbol The symbol to map to cTokenMetadata\\n     * @return The configuration metadata for the symbol\\n     */\\n    function getCTokenConfig(string memory symbol) public view returns (CTokenMetadata memory) {\\n        address cToken = getCTokenAddress(symbol);\\n        return getCTokenConfig(cToken);\\n    }\\n\\n    /**\\n     * @notice Returns the CTokenMetadata for an address\\n     * @param cToken The address to map to cTokenMetadata\\n     * @return The configuration metadata for the address\\n     */\\n    function getCTokenConfig(address cToken) public view returns(CTokenMetadata memory) {\\n        if (cToken == cEthAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ETH\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cEthAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 1e18\\n                        });\\n        }\\n\\n        if (cToken == cUsdcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDC\\\",\\n                        anchorOracleKey: cUsdcAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdcAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        if (cToken == cDaiAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"DAI\\\",\\n                        anchorOracleKey: cDaiAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cDaiAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cRepAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"REP\\\",\\n                        anchorOracleKey: cRepAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cRepAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cWbtcAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BTC\\\",\\n                        anchorOracleKey: cWbtcAnchorKey,\\n                        baseUnit: 1e8,\\n                        cTokenAddress: cWbtcAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cBatAddress) {\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"BAT\\\",\\n                        anchorOracleKey: cBatAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cBatAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cZrxAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"ZRX\\\",\\n                        anchorOracleKey: cZrxAnchorKey,\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cZrxAddress,\\n                        priceSource: PriceSource.REPORTER,\\n                        anchorSource: AnchorSource.ANCHOR,\\n                        fixedReporterPrice: 0,\\n                        fixedAnchorPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cSaiAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"SAI\\\",\\n                        anchorOracleKey: address(0),\\n                        baseUnit: 1e18,\\n                        cTokenAddress: cSaiAddress,\\n                        priceSource: PriceSource.ANCHOR,\\n                        anchorSource: AnchorSource.FIXED_ETH,\\n                        fixedAnchorPrice: saiAnchorPrice,\\n                        fixedReporterPrice: 0\\n                        });\\n        }\\n\\n        if (cToken == cUsdtAddress){\\n            return CTokenMetadata({\\n                        openOracleKey: \\\"USDT\\\",\\n                        anchorOracleKey: cUsdtAnchorKey,\\n                        baseUnit: 1e6,\\n                        cTokenAddress: cUsdtAddress,\\n                        priceSource: PriceSource.FIXED_USD,\\n                        anchorSource: AnchorSource.FIXED_USD,\\n                        fixedReporterPrice: oneDollar,\\n                        fixedAnchorPrice: oneDollar\\n                        });\\n        }\\n\\n        return CTokenMetadata({\\n                    openOracleKey: \\\"UNCONFIGURED\\\",\\n                    anchorOracleKey: address(0),\\n                    baseUnit: 0,\\n                    cTokenAddress: address(0),\\n                    priceSource: PriceSource.FIXED_USD,\\n                    anchorSource: AnchorSource.FIXED_USD,\\n                    fixedReporterPrice: 0,\\n                    fixedAnchorPrice: 0\\n                    });\\n    }\\n\\n    /**\\n     * @notice Returns the cToken address for symbol\\n     * @param symbol The symbol to map to cToken address\\n     * @return The cToken address for the given symbol\\n     */\\n    function getCTokenAddress(string memory symbol) public view returns (address) {\\n        bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n        if (symbolHash == symbolEth) return cEthAddress;\\n        if (symbolHash == symbolUsdc) return cUsdcAddress;\\n        if (symbolHash == symbolDai) return cDaiAddress;\\n        if (symbolHash == symbolRep) return cRepAddress;\\n        if (symbolHash == symbolWbtc) return cWbtcAddress;\\n        if (symbolHash == symbolBat) return cBatAddress;\\n        if (symbolHash == symbolZrx) return cZrxAddress;\\n        if (symbolHash == symbolSai) return cSaiAddress;\\n        if (symbolHash == symbolUsdt) return cUsdtAddress;\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x4aacd44b94fe812d2784f3995d6799e0c2b97c7649c650ef292bac323ca36758\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/DelFiPrice.sol:DelFiPrice":{"abi":"[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"anchor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"median\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"anchor\",\"type\":\"uint64\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"name\":\"medianPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"median\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"anchor_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"median\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"anchor\",\"type\":\"uint64\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"price\",\"type\":\"uint64\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"name\":\"medianPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"median\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"methods\":{\"constructor\":{\"params\":{\"anchorToleranceMantissa_\":\"The tolerance allowed between the anchor and median. A tolerance of 10e16 means a new median that is 10% off from the anchor will still be saved\",\"anchor_\":\"The reporter address whose prices checked against the median for safety\",\"data_\":\"Address of the Oracle Data contract\",\"sources_\":\"The reporter addresses whose prices will be used to calculate the median\"}},\"medianPrice(string,address[])\":{\"params\":{\"sources_\":\"The sources to use when calculating the median price\",\"symbol\":\"The symbol to calculate the median price of\"},\"returns\":{\"median\":\"The median price over the set of sources\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only sources count for prices\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\"}}},\"stateVariables\":{\"anchor\":{\"details\":\"The reporter address whose prices checked against the median for safety\"},\"lowerBoundAnchorRatio\":{\"details\":\"The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"},\"upperBoundAnchorRatio\":{\"details\":\"The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"}}},\"userdoc\":{\"methods\":{\"data()\":{\"notice\":\"The Oracle Data Contract backing this View\"},\"medianPrice(string,address[])\":{\"notice\":\"Calculates the median price over any set of sources\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Primary entry point to post and recalculate prices\"},\"prices(string)\":{\"notice\":\"The mapping of medianized prices per symbol\"},\"sources(uint256)\":{\"notice\":\"The static list of sources used by this View\"}},\"notice\":\"The DelFi Price Feed View\"}},\"settings\":{\"compilationTarget\":{\"contracts/DelFiPrice.sol\":\"DelFiPrice\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DelFiPrice.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./OpenOraclePriceData.sol\\\";\\nimport \\\"./OpenOracleView.sol\\\";\\n\\n/**\\n * @notice The DelFi Price Feed View\\n * @author Compound Labs, Inc.\\n */\\ncontract DelFiPrice is OpenOracleView {\\n    /// @notice The event emitted when the median price is updated\\n    event PriceUpdated(string symbol, uint64 price);\\n\\n    /// @notice The event emitted when new prices are posted but the median price is not updated due to the anchor\\n    event PriceGuarded(string symbol, uint64 median, uint64 anchor);\\n\\n    /// @dev The reporter address whose prices checked against the median for safety\\n    address anchor;\\n\\n    /// @dev The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint256 upperBoundAnchorRatio;\\n\\n    /// @dev The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint256 lowerBoundAnchorRatio;\\n\\n    /// @notice The mapping of medianized prices per symbol\\n    mapping(string => uint64) public prices;\\n\\n    /**\\n     * @param data_ Address of the Oracle Data contract\\n     * @param sources_ The reporter addresses whose prices will be used to calculate the median\\n     * @param anchor_ The reporter address whose prices checked against the median for safety\\n     * @param anchorToleranceMantissa_ The tolerance allowed between the anchor and median. A tolerance of 10e16 means a new median that is 10% off from the anchor will still be saved\\n     */\\n    constructor(OpenOraclePriceData data_, address[] memory sources_, address anchor_, uint anchorToleranceMantissa_) public OpenOracleView(data_, sources_) {\\n        anchor = anchor_;\\n        require(anchorToleranceMantissa_ < 100e16, \\\"Anchor Tolerance is too high\\\");\\n        upperBoundAnchorRatio = 100e16 + anchorToleranceMantissa_;\\n        lowerBoundAnchorRatio = 100e16 - anchorToleranceMantissa_;\\n    }\\n\\n    /**\\n     * @notice Primary entry point to post and recalculate prices\\n     * @dev We let anyone pay to post anything, but only sources count for prices\\n     * @param messages The messages to post to the oracle\\n     * @param signatures The signatures for the corresponding messages\\n     */\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\n\\n        // Save the prices\\n        for (uint i = 0; i < messages.length; i++) {\\n            OpenOraclePriceData(address(data)).put(messages[i], signatures[i]);\\n        }\\n\\n        // Try to update the median\\n        for (uint i = 0; i < symbols.length; i++) {\\n            string memory symbol = symbols[i];\\n            uint64 medianPrice = medianPrice(symbol, sources);\\n            uint64 anchorPrice = OpenOraclePriceData(address(data)).getPrice(anchor, symbol);\\n            if (anchorPrice == 0) {\\n                emit PriceGuarded(symbol, medianPrice, anchorPrice);\\n            } else {\\n                uint256 anchorRatioMantissa = uint256(medianPrice) * 100e16 / anchorPrice;\\n                // Only update the view's price if the median of the sources is within a bound, and it is a new median\\n                if (anchorRatioMantissa <= upperBoundAnchorRatio && anchorRatioMantissa >= lowerBoundAnchorRatio) {\\n                    // only update and emit event if the median price is new, otherwise do nothing\\n                    if (prices[symbol] != medianPrice) {\\n                        prices[symbol] = medianPrice;\\n                        emit PriceUpdated(symbol, medianPrice);\\n                    }\\n                } else {\\n                    emit PriceGuarded(symbol, medianPrice, anchorPrice);\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the median price over any set of sources\\n     * @param symbol The symbol to calculate the median price of\\n     * @param sources_ The sources to use when calculating the median price\\n     * @return median The median price over the set of sources\\n     */\\n    function medianPrice(string memory symbol, address[] memory sources_) public view returns (uint64 median) {\\n        require(sources_.length > 0, \\\"sources list must not be empty\\\");\\n\\n        uint N = sources_.length;\\n        uint64[] memory postedPrices = new uint64[](N);\\n        for (uint i = 0; i < N; i++) {\\n            postedPrices[i] = OpenOraclePriceData(address(data)).getPrice(sources_[i], symbol);\\n        }\\n\\n        uint64[] memory sortedPrices = sort(postedPrices);\\n        // if N is even, get the left and right medians and average them\\n        if (N % 2 == 0) {\\n            uint64 left = sortedPrices[(N / 2) - 1];\\n            uint64 right = sortedPrices[N / 2];\\n            uint128 sum = uint128(left) + uint128(right);\\n            return uint64(sum / 2);\\n        } else {\\n            // if N is odd, just return the median\\n            return sortedPrices[N / 2];\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper to sort an array of uints\\n     * @param array Array of integers to sort\\n     * @return The sorted array of integers\\n     */\\n    function sort(uint64[] memory array) private pure returns (uint64[] memory) {\\n        uint N = array.length;\\n        for (uint i = 0; i < N; i++) {\\n            for (uint j = i + 1; j < N; j++) {\\n                if (array[i] > array[j]) {\\n                    uint64 tmp = array[i];\\n                    array[i] = array[j];\\n                    array[j] = tmp;\\n                }\\n            }\\n        }\\n        return array;\\n    }\\n}\",\"keccak256\":\"0xe43935da285ed78a2c29c5a7153ac0b949cc0bc4f93e3eef869de8950549e093\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n\\n        return key;\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x9429fbfc82572ea5c7ec6d5a56d4670fc5154dc87c49695738ee8b302b94bdc0\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle View Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleView {\\n    /**\\n     * @notice The Oracle Data Contract backing this View\\n     */\\n    OpenOracleData public data;\\n\\n    /**\\n     * @notice The static list of sources used by this View\\n     * @dev Note that while it is possible to create a view with dynamic sources,\\n     *  that would not conform to the Open Oracle Standard specification.\\n     */\\n    address[] public sources;\\n\\n    /**\\n     * @notice Construct a view given the oracle backing address and the list of sources\\n     * @dev According to the protocol, Views must be immutable to be considered conforming.\\n     * @param data_ The address of the oracle data contract which is backing the view\\n     * @param sources_ The list of source addresses to include in the aggregate value\\n     */\\n    constructor(OpenOracleData data_, address[] memory sources_) public {\\n        require(sources_.length > 0, \\\"Must initialize with sources\\\");\\n        data = data_;\\n        sources = sources_;\\n    }\\n}\\n\",\"keccak256\":\"0xabf6bd7ac36f993e5dfbd9da2c904232027ee833c5a981594b81bd476cc26a3e\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/OpenOracleData.sol:OpenOracleData":{"abi":"[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b506102bb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063482a619314610030575b600080fd5b61004361003e3660046101c1565b610059565b6040516100509190610253565b60405180910390f35b600080600080848060200190518101906100739190610184565b925092509250600086805190602001206040516020016100939190610222565b604051602081830303815290604052805190602001209050600181838686604051600081526020016040526040516100ce9493929190610267565b6020604051602081039080840390855afa1580156100f0573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b600082601f830112610116578081fd5b813567ffffffffffffffff8082111561012d578283fd5b604051601f8301601f19168101602001828111828210171561014d578485fd5b60405282815292508284830160200186101561016857600080fd5b8260208601602083013760006020848301015250505092915050565b600080600060608486031215610198578283fd5b8351925060208401519150604084015160ff811681146101b6578182fd5b809150509250925092565b600080604083850312156101d3578182fd5b823567ffffffffffffffff808211156101ea578384fd5b6101f686838701610106565b9350602085013591508082111561020b578283fd5b5061021885828601610106565b9150509250929050565b7f19457468657265756d205369676e6564204d6573736167653a0a3332000000008152601c810191909152603c0190565b6001600160a01b0391909116815260200190565b93845260ff929092166020840152604083015260608201526080019056fea2646970667358221220f5c49d71013c8929c591849b08a306feb62c610d2790c1e5193c8c84711f66e764736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"methods\":{\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"title\":\"The Open Oracle Data Base Contract\"},\"userdoc\":{\"methods\":{\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOracleData.sol\":\"OpenOracleData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/OpenOraclePriceData.sol:OpenOraclePriceData":{"abi":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"priorTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"put\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b50610b75806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806338636e9a14610051578063482a61931461018457806376977a3a146102c9578063fc2525ab14610364575b600080fd5b61010f6004803603604081101561006757600080fd5b810190602081018135600160201b81111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111600160201b831117156100b457600080fd5b919390929091602081019035600160201b8111156100d157600080fd5b8201836020820111156100e357600080fd5b803590602001918460018302840111600160201b8311171561010457600080fd5b509092509050610409565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610149578181015183820152602001610131565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102ad6004803603604081101561019a57600080fd5b810190602081018135600160201b8111156101b457600080fd5b8201836020820111156101c657600080fd5b803590602001918460018302840111600160201b831117156101e757600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561023957600080fd5b82018360208201111561024b57600080fd5b803590602001918460018302840111600160201b8311171561026c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610988945050505050565b604080516001600160a01b039092168252519081900360200190f35b610347600480360360408110156102df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561030957600080fd5b82018360208201111561031b57600080fd5b803590602001918460018302840111600160201b8311171561033c57600080fd5b509092509050610a75565b6040805167ffffffffffffffff9092168252519081900360200190f35b6103e26004803603604081101561037a57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156103a457600080fd5b8201836020820111156103b657600080fd5b803590602001918460018302840111600160201b831117156103d757600080fd5b509092509050610acf565b6040805167ffffffffffffffff938416815291909216602082015281519081900390910190f35b6060600061048086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525061098892505050565b905060606000606060008989608081101561049a57600080fd5b810190602081018135600160201b8111156104b457600080fd5b8201836020820111156104c657600080fd5b803590602001918460018302840111600160201b831117156104e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929567ffffffffffffffff853516959094909350604081019250602001359050600160201b81111561054b57600080fd5b82018360208201111561055d57600080fd5b803590602001918460018302840111600160201b8311171561057e57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516570726963657360d01b60208083019190915282516006818403018152602683019093528251928101929092208a519a9e50989c50939a50933567ffffffffffffffff16985095968b96506046909201945084935050908401908083835b602083106106335780518252601f199092019160209182019101610614565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120146106c0576040805162461bcd60e51b815260206004820152601d60248201527f4b696e64206f662064617461206d757374206265202770726963657327000000604482015290519081900360640190fd5b6001600160a01b038516600090815260208181526040808320905185519192869282918401908083835b602083106107095780518252601f1990920191602091820191016106ea565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805490935067ffffffffffffffff908116908716119150508015610765575042610e10018467ffffffffffffffff16105b801561077957506001600160a01b03861615155b1561092c5760405180604001604052808567ffffffffffffffff1681526020018367ffffffffffffffff16815250600080886001600160a01b03166001600160a01b03168152602001908152602001600020846040518082805190602001908083835b602083106107fb5780518252601f1990920191602091820191016107dc565b51815160209384036101000a6000190180199092169116179052920194855250604080519485900382018520865181549784015167ffffffffffffffff1990981667ffffffffffffffff918216176fffffffffffffffff00000000000000001916600160401b9882169890980297909717905589861685830152948716948401949094525050606080825285519082015284516001600160a01b038916927f4d3f5aa96531b83f5389343ecd20cd8ac1fba33b64634c1b547a4d85d31540d39287928992889291829160808301919087019080838360005b838110156108eb5781810151838201526020016108d3565b50505050905090810190601f1680156109185780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a2610979565b80546040805167ffffffffffffffff928316815291861660208301524282820152517f7d218dba44a461fb2d7b5fe792128439313d3c48c86d4c3e4981a8eaca831a769181900360600190a15b50909998505050505050505050565b6000806000808480602001905160608110156109a357600080fd5b5080516020808301516040938401518a518b84012085517f19457468657265756d205369676e6564204d6573736167653a0a33320000000081860152603c8082019290925286518082039092018252605c81018088528251928601929092206000909252607c810180885282905260ff8316609c82015260bc810186905260dc8101849052955194985091965094509260019260fc8083019392601f198301929081900390910190855afa158015610a5f573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b6001600160a01b03831660009081526020819052604080822090518490849080838380828437919091019485525050604051928390036020019092205467ffffffffffffffff600160401b90910416925050509392505050565b6000806000806000876001600160a01b03166001600160a01b03168152602001908152602001600020858560405180838380828437919091019485525050604051928390036020019092205467ffffffffffffffff8082169650600160401b90910416935050505093509391505056fea26469706673582212206eab995f58cf0b4d439108b2698b4920613abc56500b30c4b28a05a38401380564736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"priorTimestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"messageTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"NotWritten\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"put\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"methods\":{\"get(address,string)\":{\"params\":{\"key\":\"The selector for the value to return\",\"source\":\"The verifiable author of the data\"},\"returns\":{\"_0\":\"The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\"}},\"getPrice(address,string)\":{\"params\":{\"key\":\"The selector for the value to return\",\"source\":\"The verifiable author of the data\"},\"returns\":{\"_0\":\"The price value (defaults to 0)\"}},\"put(bytes,bytes)\":{\"params\":{\"message\":\"The payload containing the timestamp, and (key, value) pairs\",\"signature\":\"The cryptographic signature of the message payload, authorizing the source to write\"},\"returns\":{\"_0\":\"The keys that were written\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}},\"stateVariables\":{\"data\":{\"details\":\"The most recent authenticated data from all sources.  This is private because dynamic mapping keys preclude auto-generated getters.\"}},\"title\":\"The Open Oracle Price Data Contract\"},\"userdoc\":{\"methods\":{\"get(address,string)\":{\"notice\":\"Read a single key from an authenticated source\"},\"getPrice(address,string)\":{\"notice\":\"Read only the value for a single key from an authenticated source\"},\"put(bytes,bytes)\":{\"notice\":\"Write a bunch of signed datum to the authenticated storage mapping\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"}},\"notice\":\"Values stored in this contract should represent a USD price with 6 decimals precision\"}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOraclePriceData.sol\":\"OpenOraclePriceData\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n\\n        return key;\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x9429fbfc82572ea5c7ec6d5a56d4670fc5154dc87c49695738ee8b302b94bdc0\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/OpenOracleView.sol:OpenOracleView":{"abi":"[{\"inputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b506040516102ca3803806102ca8339818101604052604081101561003357600080fd5b81516020830180516040519294929383019291908464010000000082111561005a57600080fd5b90830190602082018581111561006f57600080fd5b825186602082028301116401000000008211171561008c57600080fd5b82525081516020918201928201910280838360005b838110156100b95781810151838201526020016100a1565b50505050905001604052505050600081511161011c576040805162461bcd60e51b815260206004820152601c60248201527f4d75737420696e697469616c697a65207769746820736f757263657300000000604482015290519081900360640190fd5b600080546001600160a01b0319166001600160a01b038416179055805161014a906001906020840190610152565b5050506101de565b8280548282559060005260206000209081019282156101a7579160200282015b828111156101a757825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610172565b506101b39291506101b7565b5090565b6101db91905b808211156101b35780546001600160a01b03191681556001016101bd565b90565b60de806101ec6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806373d4a13a146037578063a3663d37146059575b600080fd5b603d6073565b604080516001600160a01b039092168252519081900360200190f35b603d60048036036020811015606d57600080fd5b50356082565b6000546001600160a01b031681565b60018181548110608e57fe5b6000918252602090912001546001600160a01b031690508156fea2646970667358221220cea5df34e8d9212b76693619879e0c3ad9f10b42482fbacbed1546008c80bbe764736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"data_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"sources_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"data\",\"outputs\":[{\"internalType\":\"contract OpenOracleData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Compound Labs, Inc.\",\"methods\":{\"constructor\":{\"details\":\"According to the protocol, Views must be immutable to be considered conforming.\",\"params\":{\"data_\":\"The address of the oracle data contract which is backing the view\",\"sources_\":\"The list of source addresses to include in the aggregate value\"}}},\"stateVariables\":{\"sources\":{\"details\":\"Note that while it is possible to create a view with dynamic sources,  that would not conform to the Open Oracle Standard specification.\"}},\"title\":\"The Open Oracle View Base Contract\"},\"userdoc\":{\"methods\":{\"constructor\":\"Construct a view given the oracle backing address and the list of sources\",\"data()\":{\"notice\":\"The Oracle Data Contract backing this View\"},\"sources(uint256)\":{\"notice\":\"The static list of sources used by this View\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/OpenOracleView.sol\":\"OpenOracleView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOracleView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle View Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleView {\\n    /**\\n     * @notice The Oracle Data Contract backing this View\\n     */\\n    OpenOracleData public data;\\n\\n    /**\\n     * @notice The static list of sources used by this View\\n     * @dev Note that while it is possible to create a view with dynamic sources,\\n     *  that would not conform to the Open Oracle Standard specification.\\n     */\\n    address[] public sources;\\n\\n    /**\\n     * @notice Construct a view given the oracle backing address and the list of sources\\n     * @dev According to the protocol, Views must be immutable to be considered conforming.\\n     * @param data_ The address of the oracle data contract which is backing the view\\n     * @param sources_ The list of source addresses to include in the aggregate value\\n     */\\n    constructor(OpenOracleData data_, address[] memory sources_) public {\\n        require(sources_.length > 0, \\\"Must initialize with sources\\\");\\n        data = data_;\\n        sources = sources_;\\n    }\\n}\\n\",\"keccak256\":\"0xabf6bd7ac36f993e5dfbd9da2c904232027ee833c5a981594b81bd476cc26a3e\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/Uniswap/UniswapAnchoredView.sol:UniswapAnchoredView":{"abi":"[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nowCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nowCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"constructor\":{\"params\":{\"anchorPeriod_\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\",\"anchorToleranceMantissa_\":\"The percentage tolerance that the reporter may deviate from the uniswap anchor\",\"reporter_\":\"The reporter whose prices are to be used\"}},\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"The price for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in USD, with 6 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}}},\"userdoc\":{\"methods\":{\"anchorPeriod()\":{\"notice\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\"},\"constructor\":\"Construct a uniswap anchored view for a set of token configurations\",\"ethBaseUnit()\":{\"notice\":\"the number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"a common scaling factor to maintain precision\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"lowerBoundAnchorRatio()\":{\"notice\":\"The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"},\"newObservations(address)\":{\"notice\":\"The new observation for each uniswap market\"},\"oldObservations(address)\":{\"notice\":\"The old observation for each uniswap market\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"the Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"},\"upperBoundAnchorRatio()\":{\"notice\":\"The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapAnchoredView.sol\":\"UniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n\\n        return key;\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x9429fbfc82572ea5c7ec6d5a56d4670fc5154dc87c49695738ee8b302b94bdc0\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../OpenOraclePriceData.sol\\\";\\nimport \\\"./UniswapConfig.sol\\\";\\nimport \\\"./UniswapLib.sol\\\";\\n\\nstruct Observation {\\n    uint timestamp;\\n    uint acc;\\n}\\n\\ncontract UniswapAnchoredView is UniswapConfig {\\n    using FixedPoint for *;\\n\\n    /// @notice The Open Oracle Price Data contract\\n    OpenOraclePriceData public immutable priceData;\\n\\n    /// @notice the number of wei in 1 ETH\\n    uint public constant ethBaseUnit = 1e18;\\n\\n    /// @notice a common scaling factor to maintain precision\\n    uint public constant expScale = 1e18;\\n\\n    /// @notice the Open Oracle Reporter\\n    address public immutable reporter;\\n\\n    /// @notice The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint public immutable upperBoundAnchorRatio;\\n\\n    /// @notice The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint public immutable lowerBoundAnchorRatio;\\n\\n    /// @notice The minimum amount of time required for the old uniswap price accumulator to be replaced\\n    uint public immutable anchorPeriod;\\n\\n    /// @notice Official prices by symbol hash\\n    mapping(bytes32 => uint) public prices;\\n\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\n    bool public reporterInvalidated;\\n\\n    /// @notice The old observation for each uniswap market\\n    mapping(address => Observation) public oldObservations;\\n    /// @notice The new observation for each uniswap market\\n    mapping(address => Observation) public newObservations;\\n\\n    /// @notice The event emitted when the stored price is updated\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\n\\n    /// @notice The event emitted when reporter invalidates itself\\n    event ReporterInvalidated(address reporter);\\n\\n    /// @notice The event emitted when the uniswap window changes\\n    event UniswapWindowUpdate(address indexed uniswapMarket, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\n\\n    /// @notice The event emitted when anchor price is updated\\n    event AnchorPriceUpdate(address indexed uniswapMarket, uint anchorPrice, uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp);\\n\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\n\\n    /**\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\n     * @param reporter_ The reporter whose prices are to be used\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\n     */\\n    constructor(OpenOraclePriceData priceData_,\\n                address reporter_,\\n                uint anchorToleranceMantissa_,\\n                uint anchorPeriod_,\\n                TokenConfig[] memory configs) UniswapConfig(configs) public {\\n        priceData = priceData_;\\n        reporter = reporter_;\\n        anchorPeriod = anchorPeriod_;\\n\\n        require(anchorToleranceMantissa_ < 100e16, \\\"anchor tolerance is too high\\\");\\n        upperBoundAnchorRatio = 100e16 + anchorToleranceMantissa_;\\n        lowerBoundAnchorRatio = 100e16 - anchorToleranceMantissa_;\\n\\n        for (uint i = 0; i < configs.length; i++) {\\n            TokenConfig memory config = configs[i];\\n            address uniswapMarket = config.uniswapMarket;\\n            if (config.priceSource == PriceSource.REPORTER) {\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\n                uint cumulativePrice = currentCumulativePrice(config);\\n                oldObservations[uniswapMarket].timestamp = block.timestamp;\\n                newObservations[uniswapMarket].timestamp = block.timestamp;\\n                oldObservations[uniswapMarket].acc = cumulativePrice;\\n                newObservations[uniswapMarket].acc = cumulativePrice;\\n            } else {\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the official price for a symbol\\n     * @param symbol The symbol to fetch the price of\\n     * @return Price denominated in USD, with 6 decimals\\n     */\\n    function price(string memory symbol) public view returns (uint) {\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\n        return priceInternal(config);\\n    }\\n\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash];\\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\\n        if (config.priceSource == PriceSource.FIXED_ETH) {\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert to dollars\\\");\\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return The price for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) public view returns (uint) {\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\\n    }\\n\\n    /**\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\n     * @param messages The messages to post to the oracle\\n     * @param signatures The signatures for the corresponding messages\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\n     */\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\n\\n        // Save the prices\\n        for (uint i = 0; i < messages.length; i++) {\\n            priceData.put(messages[i], signatures[i]);\\n        }\\n\\n        uint ethPrice = fetchEthPrice();\\n\\n        // Try to update the view storage\\n        for (uint i = 0; i < symbols.length; i++) {\\n            TokenConfig memory config = getTokenConfigBySymbol(symbols[i]);\\n            string memory symbol = symbols[i];\\n            bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n\\n            uint reporterPrice = priceData.getPrice(reporter, symbol);\\n            uint anchorPrice;\\n            if (symbolHash == ethHash) {\\n                anchorPrice = ethPrice;\\n            } else {\\n                anchorPrice = fetchAnchorPrice(config, ethPrice);\\n            }\\n\\n            if (reporterInvalidated == true) {\\n                prices[symbolHash] = anchorPrice;\\n                emit PriceUpdated(symbol, anchorPrice);\\n            } else if (isWithinAnchor(reporterPrice, anchorPrice)) {\\n                prices[symbolHash] = reporterPrice;\\n                emit PriceUpdated(symbol, reporterPrice);\\n            } else {\\n                emit PriceGuarded(symbol, reporterPrice, anchorPrice);\\n            }\\n        }\\n    }\\n\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\n        if (reporterPrice > 0) {\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\n     */\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\n        if (config.isUniswapReversed) {\\n            return cumulativePrice1;\\n        } else {\\n            return cumulativePrice0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the current eth/usd price from unsiwap, with 6 decimals of precision.\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\n     */\\n    function fetchEthPrice() internal returns (uint) {\\n        return fetchAnchorPrice(getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\n     */\\n    function fetchAnchorPrice(TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\n\\n        // This should be impossible, but better safe than sorry\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\n\\n        // Calculate uniswap time-weighted average price\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\n        uint rawUniswapPriceMantissa = mul(priceAverage.decode112with18(), conversionFactor);\\n        uint anchorPrice;\\n\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\n        if (config.isUniswapReversed) {\\n            // rawUniswapPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\\n            anchorPrice = rawUniswapPriceMantissa / config.baseUnit;\\n        } else {\\n            anchorPrice = mul(rawUniswapPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\n        }\\n\\n        emit AnchorPriceUpdate(config.uniswapMarket, anchorPrice, nowCumulativePrice, oldCumulativePrice, oldTimestamp);\\n\\n        return anchorPrice;\\n    }\\n\\n    /**\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\n     *  Update new and old observations of lagging window if period elapsed.\\n     */\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\n        address uniswapMarket = config.uniswapMarket;\\n        uint cumulativePrice = currentCumulativePrice(config);\\n\\n        Observation memory newObservation = newObservations[uniswapMarket];\\n\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\n        if (timeElapsed >= anchorPeriod) {\\n            oldObservations[uniswapMarket].timestamp = newObservation.timestamp;\\n            oldObservations[uniswapMarket].acc = newObservation.acc;\\n\\n            newObservations[uniswapMarket].timestamp = block.timestamp;\\n            newObservations[uniswapMarket].acc = cumulativePrice;\\n            emit UniswapWindowUpdate(uniswapMarket, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\n        }\\n        return (cumulativePrice, oldObservations[uniswapMarket].acc, oldObservations[uniswapMarket].timestamp);\\n    }\\n\\n    /**\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     */\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\n        (string memory decoded_message, ) = abi.decode(message, (string, address));\\n        require(keccak256(abi.encodePacked(decoded_message)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\n        reporterInvalidated = true;\\n        emit ReporterInvalidated(reporter);\\n    }\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /// @dev Overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x4e3a1d06c48b55cb1e1071be3f09793e6107dbdca9eed8271d388364cdd53812\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    enum PriceSource {FIXED_ETH, FIXED_USD, REPORTER}\\n    struct TokenConfig {\\n        address cToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    uint public constant maxTokens = 30;\\n    uint public immutable numTokens;\\n\\n    address internal immutable cToken00;\\n    address internal immutable cToken01;\\n    address internal immutable cToken02;\\n    address internal immutable cToken03;\\n    address internal immutable cToken04;\\n    address internal immutable cToken05;\\n    address internal immutable cToken06;\\n    address internal immutable cToken07;\\n    address internal immutable cToken08;\\n    address internal immutable cToken09;\\n    address internal immutable cToken10;\\n    address internal immutable cToken11;\\n    address internal immutable cToken12;\\n    address internal immutable cToken13;\\n    address internal immutable cToken14;\\n    address internal immutable cToken15;\\n    address internal immutable cToken16;\\n    address internal immutable cToken17;\\n    address internal immutable cToken18;\\n    address internal immutable cToken19;\\n    address internal immutable cToken20;\\n    address internal immutable cToken21;\\n    address internal immutable cToken22;\\n    address internal immutable cToken23;\\n    address internal immutable cToken24;\\n    address internal immutable cToken25;\\n    address internal immutable cToken26;\\n    address internal immutable cToken27;\\n    address internal immutable cToken28;\\n    address internal immutable cToken29;\\n\\n    address internal immutable underlying00;\\n    address internal immutable underlying01;\\n    address internal immutable underlying02;\\n    address internal immutable underlying03;\\n    address internal immutable underlying04;\\n    address internal immutable underlying05;\\n    address internal immutable underlying06;\\n    address internal immutable underlying07;\\n    address internal immutable underlying08;\\n    address internal immutable underlying09;\\n    address internal immutable underlying10;\\n    address internal immutable underlying11;\\n    address internal immutable underlying12;\\n    address internal immutable underlying13;\\n    address internal immutable underlying14;\\n    address internal immutable underlying15;\\n    address internal immutable underlying16;\\n    address internal immutable underlying17;\\n    address internal immutable underlying18;\\n    address internal immutable underlying19;\\n    address internal immutable underlying20;\\n    address internal immutable underlying21;\\n    address internal immutable underlying22;\\n    address internal immutable underlying23;\\n    address internal immutable underlying24;\\n    address internal immutable underlying25;\\n    address internal immutable underlying26;\\n    address internal immutable underlying27;\\n    address internal immutable underlying28;\\n    address internal immutable underlying29;\\n\\n    bytes32 internal immutable symbolHash00;\\n    bytes32 internal immutable symbolHash01;\\n    bytes32 internal immutable symbolHash02;\\n    bytes32 internal immutable symbolHash03;\\n    bytes32 internal immutable symbolHash04;\\n    bytes32 internal immutable symbolHash05;\\n    bytes32 internal immutable symbolHash06;\\n    bytes32 internal immutable symbolHash07;\\n    bytes32 internal immutable symbolHash08;\\n    bytes32 internal immutable symbolHash09;\\n    bytes32 internal immutable symbolHash10;\\n    bytes32 internal immutable symbolHash11;\\n    bytes32 internal immutable symbolHash12;\\n    bytes32 internal immutable symbolHash13;\\n    bytes32 internal immutable symbolHash14;\\n    bytes32 internal immutable symbolHash15;\\n    bytes32 internal immutable symbolHash16;\\n    bytes32 internal immutable symbolHash17;\\n    bytes32 internal immutable symbolHash18;\\n    bytes32 internal immutable symbolHash19;\\n    bytes32 internal immutable symbolHash20;\\n    bytes32 internal immutable symbolHash21;\\n    bytes32 internal immutable symbolHash22;\\n    bytes32 internal immutable symbolHash23;\\n    bytes32 internal immutable symbolHash24;\\n    bytes32 internal immutable symbolHash25;\\n    bytes32 internal immutable symbolHash26;\\n    bytes32 internal immutable symbolHash27;\\n    bytes32 internal immutable symbolHash28;\\n    bytes32 internal immutable symbolHash29;\\n\\n    uint256 internal immutable baseUnit00;\\n    uint256 internal immutable baseUnit01;\\n    uint256 internal immutable baseUnit02;\\n    uint256 internal immutable baseUnit03;\\n    uint256 internal immutable baseUnit04;\\n    uint256 internal immutable baseUnit05;\\n    uint256 internal immutable baseUnit06;\\n    uint256 internal immutable baseUnit07;\\n    uint256 internal immutable baseUnit08;\\n    uint256 internal immutable baseUnit09;\\n    uint256 internal immutable baseUnit10;\\n    uint256 internal immutable baseUnit11;\\n    uint256 internal immutable baseUnit12;\\n    uint256 internal immutable baseUnit13;\\n    uint256 internal immutable baseUnit14;\\n    uint256 internal immutable baseUnit15;\\n    uint256 internal immutable baseUnit16;\\n    uint256 internal immutable baseUnit17;\\n    uint256 internal immutable baseUnit18;\\n    uint256 internal immutable baseUnit19;\\n    uint256 internal immutable baseUnit20;\\n    uint256 internal immutable baseUnit21;\\n    uint256 internal immutable baseUnit22;\\n    uint256 internal immutable baseUnit23;\\n    uint256 internal immutable baseUnit24;\\n    uint256 internal immutable baseUnit25;\\n    uint256 internal immutable baseUnit26;\\n    uint256 internal immutable baseUnit27;\\n    uint256 internal immutable baseUnit28;\\n    uint256 internal immutable baseUnit29;\\n\\n    PriceSource internal immutable priceSource00;\\n    PriceSource internal immutable priceSource01;\\n    PriceSource internal immutable priceSource02;\\n    PriceSource internal immutable priceSource03;\\n    PriceSource internal immutable priceSource04;\\n    PriceSource internal immutable priceSource05;\\n    PriceSource internal immutable priceSource06;\\n    PriceSource internal immutable priceSource07;\\n    PriceSource internal immutable priceSource08;\\n    PriceSource internal immutable priceSource09;\\n    PriceSource internal immutable priceSource10;\\n    PriceSource internal immutable priceSource11;\\n    PriceSource internal immutable priceSource12;\\n    PriceSource internal immutable priceSource13;\\n    PriceSource internal immutable priceSource14;\\n    PriceSource internal immutable priceSource15;\\n    PriceSource internal immutable priceSource16;\\n    PriceSource internal immutable priceSource17;\\n    PriceSource internal immutable priceSource18;\\n    PriceSource internal immutable priceSource19;\\n    PriceSource internal immutable priceSource20;\\n    PriceSource internal immutable priceSource21;\\n    PriceSource internal immutable priceSource22;\\n    PriceSource internal immutable priceSource23;\\n    PriceSource internal immutable priceSource24;\\n    PriceSource internal immutable priceSource25;\\n    PriceSource internal immutable priceSource26;\\n    PriceSource internal immutable priceSource27;\\n    PriceSource internal immutable priceSource28;\\n    PriceSource internal immutable priceSource29;\\n\\n    uint256 internal immutable fixedPrice00;\\n    uint256 internal immutable fixedPrice01;\\n    uint256 internal immutable fixedPrice02;\\n    uint256 internal immutable fixedPrice03;\\n    uint256 internal immutable fixedPrice04;\\n    uint256 internal immutable fixedPrice05;\\n    uint256 internal immutable fixedPrice06;\\n    uint256 internal immutable fixedPrice07;\\n    uint256 internal immutable fixedPrice08;\\n    uint256 internal immutable fixedPrice09;\\n    uint256 internal immutable fixedPrice10;\\n    uint256 internal immutable fixedPrice11;\\n    uint256 internal immutable fixedPrice12;\\n    uint256 internal immutable fixedPrice13;\\n    uint256 internal immutable fixedPrice14;\\n    uint256 internal immutable fixedPrice15;\\n    uint256 internal immutable fixedPrice16;\\n    uint256 internal immutable fixedPrice17;\\n    uint256 internal immutable fixedPrice18;\\n    uint256 internal immutable fixedPrice19;\\n    uint256 internal immutable fixedPrice20;\\n    uint256 internal immutable fixedPrice21;\\n    uint256 internal immutable fixedPrice22;\\n    uint256 internal immutable fixedPrice23;\\n    uint256 internal immutable fixedPrice24;\\n    uint256 internal immutable fixedPrice25;\\n    uint256 internal immutable fixedPrice26;\\n    uint256 internal immutable fixedPrice27;\\n    uint256 internal immutable fixedPrice28;\\n    uint256 internal immutable fixedPrice29;\\n\\n    address internal immutable uniswapMarket00;\\n    address internal immutable uniswapMarket01;\\n    address internal immutable uniswapMarket02;\\n    address internal immutable uniswapMarket03;\\n    address internal immutable uniswapMarket04;\\n    address internal immutable uniswapMarket05;\\n    address internal immutable uniswapMarket06;\\n    address internal immutable uniswapMarket07;\\n    address internal immutable uniswapMarket08;\\n    address internal immutable uniswapMarket09;\\n    address internal immutable uniswapMarket10;\\n    address internal immutable uniswapMarket11;\\n    address internal immutable uniswapMarket12;\\n    address internal immutable uniswapMarket13;\\n    address internal immutable uniswapMarket14;\\n    address internal immutable uniswapMarket15;\\n    address internal immutable uniswapMarket16;\\n    address internal immutable uniswapMarket17;\\n    address internal immutable uniswapMarket18;\\n    address internal immutable uniswapMarket19;\\n    address internal immutable uniswapMarket20;\\n    address internal immutable uniswapMarket21;\\n    address internal immutable uniswapMarket22;\\n    address internal immutable uniswapMarket23;\\n    address internal immutable uniswapMarket24;\\n    address internal immutable uniswapMarket25;\\n    address internal immutable uniswapMarket26;\\n    address internal immutable uniswapMarket27;\\n    address internal immutable uniswapMarket28;\\n    address internal immutable uniswapMarket29;\\n\\n    bool internal immutable isUniswapReversed00;\\n    bool internal immutable isUniswapReversed01;\\n    bool internal immutable isUniswapReversed02;\\n    bool internal immutable isUniswapReversed03;\\n    bool internal immutable isUniswapReversed04;\\n    bool internal immutable isUniswapReversed05;\\n    bool internal immutable isUniswapReversed06;\\n    bool internal immutable isUniswapReversed07;\\n    bool internal immutable isUniswapReversed08;\\n    bool internal immutable isUniswapReversed09;\\n    bool internal immutable isUniswapReversed10;\\n    bool internal immutable isUniswapReversed11;\\n    bool internal immutable isUniswapReversed12;\\n    bool internal immutable isUniswapReversed13;\\n    bool internal immutable isUniswapReversed14;\\n    bool internal immutable isUniswapReversed15;\\n    bool internal immutable isUniswapReversed16;\\n    bool internal immutable isUniswapReversed17;\\n    bool internal immutable isUniswapReversed18;\\n    bool internal immutable isUniswapReversed19;\\n    bool internal immutable isUniswapReversed20;\\n    bool internal immutable isUniswapReversed21;\\n    bool internal immutable isUniswapReversed22;\\n    bool internal immutable isUniswapReversed23;\\n    bool internal immutable isUniswapReversed24;\\n    bool internal immutable isUniswapReversed25;\\n    bool internal immutable isUniswapReversed26;\\n    bool internal immutable isUniswapReversed27;\\n    bool internal immutable isUniswapReversed28;\\n    bool internal immutable isUniswapReversed29;\\n\\n    constructor(TokenConfig[] memory configs) public {\\n        require(configs.length <= maxTokens, \\\"too many configs\\\");\\n        numTokens = configs.length;\\n\\n        cToken00 = get(configs, 0).cToken;\\n        cToken01 = get(configs, 1).cToken;\\n        cToken02 = get(configs, 2).cToken;\\n        cToken03 = get(configs, 3).cToken;\\n        cToken04 = get(configs, 4).cToken;\\n        cToken05 = get(configs, 5).cToken;\\n        cToken06 = get(configs, 6).cToken;\\n        cToken07 = get(configs, 7).cToken;\\n        cToken08 = get(configs, 8).cToken;\\n        cToken09 = get(configs, 9).cToken;\\n        cToken10 = get(configs, 10).cToken;\\n        cToken11 = get(configs, 11).cToken;\\n        cToken12 = get(configs, 12).cToken;\\n        cToken13 = get(configs, 13).cToken;\\n        cToken14 = get(configs, 14).cToken;\\n        cToken15 = get(configs, 15).cToken;\\n        cToken16 = get(configs, 16).cToken;\\n        cToken17 = get(configs, 17).cToken;\\n        cToken18 = get(configs, 18).cToken;\\n        cToken19 = get(configs, 19).cToken;\\n        cToken20 = get(configs, 20).cToken;\\n        cToken21 = get(configs, 21).cToken;\\n        cToken22 = get(configs, 22).cToken;\\n        cToken23 = get(configs, 23).cToken;\\n        cToken24 = get(configs, 24).cToken;\\n        cToken25 = get(configs, 25).cToken;\\n        cToken26 = get(configs, 26).cToken;\\n        cToken27 = get(configs, 27).cToken;\\n        cToken28 = get(configs, 28).cToken;\\n        cToken29 = get(configs, 29).cToken;\\n\\n        underlying00 = get(configs, 0).underlying;\\n        underlying01 = get(configs, 1).underlying;\\n        underlying02 = get(configs, 2).underlying;\\n        underlying03 = get(configs, 3).underlying;\\n        underlying04 = get(configs, 4).underlying;\\n        underlying05 = get(configs, 5).underlying;\\n        underlying06 = get(configs, 6).underlying;\\n        underlying07 = get(configs, 7).underlying;\\n        underlying08 = get(configs, 8).underlying;\\n        underlying09 = get(configs, 9).underlying;\\n        underlying10 = get(configs, 10).underlying;\\n        underlying11 = get(configs, 11).underlying;\\n        underlying12 = get(configs, 12).underlying;\\n        underlying13 = get(configs, 13).underlying;\\n        underlying14 = get(configs, 14).underlying;\\n        underlying15 = get(configs, 15).underlying;\\n        underlying16 = get(configs, 16).underlying;\\n        underlying17 = get(configs, 17).underlying;\\n        underlying18 = get(configs, 18).underlying;\\n        underlying19 = get(configs, 19).underlying;\\n        underlying20 = get(configs, 20).underlying;\\n        underlying21 = get(configs, 21).underlying;\\n        underlying22 = get(configs, 22).underlying;\\n        underlying23 = get(configs, 23).underlying;\\n        underlying24 = get(configs, 24).underlying;\\n        underlying25 = get(configs, 25).underlying;\\n        underlying26 = get(configs, 26).underlying;\\n        underlying27 = get(configs, 27).underlying;\\n        underlying28 = get(configs, 28).underlying;\\n        underlying29 = get(configs, 29).underlying;\\n\\n        symbolHash00 = get(configs, 0).symbolHash;\\n        symbolHash01 = get(configs, 1).symbolHash;\\n        symbolHash02 = get(configs, 2).symbolHash;\\n        symbolHash03 = get(configs, 3).symbolHash;\\n        symbolHash04 = get(configs, 4).symbolHash;\\n        symbolHash05 = get(configs, 5).symbolHash;\\n        symbolHash06 = get(configs, 6).symbolHash;\\n        symbolHash07 = get(configs, 7).symbolHash;\\n        symbolHash08 = get(configs, 8).symbolHash;\\n        symbolHash09 = get(configs, 9).symbolHash;\\n        symbolHash10 = get(configs, 10).symbolHash;\\n        symbolHash11 = get(configs, 11).symbolHash;\\n        symbolHash12 = get(configs, 12).symbolHash;\\n        symbolHash13 = get(configs, 13).symbolHash;\\n        symbolHash14 = get(configs, 14).symbolHash;\\n        symbolHash15 = get(configs, 15).symbolHash;\\n        symbolHash16 = get(configs, 16).symbolHash;\\n        symbolHash17 = get(configs, 17).symbolHash;\\n        symbolHash18 = get(configs, 18).symbolHash;\\n        symbolHash19 = get(configs, 19).symbolHash;\\n        symbolHash20 = get(configs, 20).symbolHash;\\n        symbolHash21 = get(configs, 21).symbolHash;\\n        symbolHash22 = get(configs, 22).symbolHash;\\n        symbolHash23 = get(configs, 23).symbolHash;\\n        symbolHash24 = get(configs, 24).symbolHash;\\n        symbolHash25 = get(configs, 25).symbolHash;\\n        symbolHash26 = get(configs, 26).symbolHash;\\n        symbolHash27 = get(configs, 27).symbolHash;\\n        symbolHash28 = get(configs, 28).symbolHash;\\n        symbolHash29 = get(configs, 29).symbolHash;\\n\\n        baseUnit00 = get(configs, 0).baseUnit;\\n        baseUnit01 = get(configs, 1).baseUnit;\\n        baseUnit02 = get(configs, 2).baseUnit;\\n        baseUnit03 = get(configs, 3).baseUnit;\\n        baseUnit04 = get(configs, 4).baseUnit;\\n        baseUnit05 = get(configs, 5).baseUnit;\\n        baseUnit06 = get(configs, 6).baseUnit;\\n        baseUnit07 = get(configs, 7).baseUnit;\\n        baseUnit08 = get(configs, 8).baseUnit;\\n        baseUnit09 = get(configs, 9).baseUnit;\\n        baseUnit10 = get(configs, 10).baseUnit;\\n        baseUnit11 = get(configs, 11).baseUnit;\\n        baseUnit12 = get(configs, 12).baseUnit;\\n        baseUnit13 = get(configs, 13).baseUnit;\\n        baseUnit14 = get(configs, 14).baseUnit;\\n        baseUnit15 = get(configs, 15).baseUnit;\\n        baseUnit16 = get(configs, 16).baseUnit;\\n        baseUnit17 = get(configs, 17).baseUnit;\\n        baseUnit18 = get(configs, 18).baseUnit;\\n        baseUnit19 = get(configs, 19).baseUnit;\\n        baseUnit20 = get(configs, 20).baseUnit;\\n        baseUnit21 = get(configs, 21).baseUnit;\\n        baseUnit22 = get(configs, 22).baseUnit;\\n        baseUnit23 = get(configs, 23).baseUnit;\\n        baseUnit24 = get(configs, 24).baseUnit;\\n        baseUnit25 = get(configs, 25).baseUnit;\\n        baseUnit26 = get(configs, 26).baseUnit;\\n        baseUnit27 = get(configs, 27).baseUnit;\\n        baseUnit28 = get(configs, 28).baseUnit;\\n        baseUnit29 = get(configs, 29).baseUnit;\\n\\n        priceSource00 = get(configs, 0).priceSource;\\n        priceSource01 = get(configs, 1).priceSource;\\n        priceSource02 = get(configs, 2).priceSource;\\n        priceSource03 = get(configs, 3).priceSource;\\n        priceSource04 = get(configs, 4).priceSource;\\n        priceSource05 = get(configs, 5).priceSource;\\n        priceSource06 = get(configs, 6).priceSource;\\n        priceSource07 = get(configs, 7).priceSource;\\n        priceSource08 = get(configs, 8).priceSource;\\n        priceSource09 = get(configs, 9).priceSource;\\n        priceSource10 = get(configs, 10).priceSource;\\n        priceSource11 = get(configs, 11).priceSource;\\n        priceSource12 = get(configs, 12).priceSource;\\n        priceSource13 = get(configs, 13).priceSource;\\n        priceSource14 = get(configs, 14).priceSource;\\n        priceSource15 = get(configs, 15).priceSource;\\n        priceSource16 = get(configs, 16).priceSource;\\n        priceSource17 = get(configs, 17).priceSource;\\n        priceSource18 = get(configs, 18).priceSource;\\n        priceSource19 = get(configs, 19).priceSource;\\n        priceSource20 = get(configs, 20).priceSource;\\n        priceSource21 = get(configs, 21).priceSource;\\n        priceSource22 = get(configs, 22).priceSource;\\n        priceSource23 = get(configs, 23).priceSource;\\n        priceSource24 = get(configs, 24).priceSource;\\n        priceSource25 = get(configs, 25).priceSource;\\n        priceSource26 = get(configs, 26).priceSource;\\n        priceSource27 = get(configs, 27).priceSource;\\n        priceSource28 = get(configs, 28).priceSource;\\n        priceSource29 = get(configs, 29).priceSource;\\n\\n        fixedPrice00 = get(configs, 0).fixedPrice;\\n        fixedPrice01 = get(configs, 1).fixedPrice;\\n        fixedPrice02 = get(configs, 2).fixedPrice;\\n        fixedPrice03 = get(configs, 3).fixedPrice;\\n        fixedPrice04 = get(configs, 4).fixedPrice;\\n        fixedPrice05 = get(configs, 5).fixedPrice;\\n        fixedPrice06 = get(configs, 6).fixedPrice;\\n        fixedPrice07 = get(configs, 7).fixedPrice;\\n        fixedPrice08 = get(configs, 8).fixedPrice;\\n        fixedPrice09 = get(configs, 9).fixedPrice;\\n        fixedPrice10 = get(configs, 10).fixedPrice;\\n        fixedPrice11 = get(configs, 11).fixedPrice;\\n        fixedPrice12 = get(configs, 12).fixedPrice;\\n        fixedPrice13 = get(configs, 13).fixedPrice;\\n        fixedPrice14 = get(configs, 14).fixedPrice;\\n        fixedPrice15 = get(configs, 15).fixedPrice;\\n        fixedPrice16 = get(configs, 16).fixedPrice;\\n        fixedPrice17 = get(configs, 17).fixedPrice;\\n        fixedPrice18 = get(configs, 18).fixedPrice;\\n        fixedPrice19 = get(configs, 19).fixedPrice;\\n        fixedPrice20 = get(configs, 20).fixedPrice;\\n        fixedPrice21 = get(configs, 21).fixedPrice;\\n        fixedPrice22 = get(configs, 22).fixedPrice;\\n        fixedPrice23 = get(configs, 23).fixedPrice;\\n        fixedPrice24 = get(configs, 24).fixedPrice;\\n        fixedPrice25 = get(configs, 25).fixedPrice;\\n        fixedPrice26 = get(configs, 26).fixedPrice;\\n        fixedPrice27 = get(configs, 27).fixedPrice;\\n        fixedPrice28 = get(configs, 28).fixedPrice;\\n        fixedPrice29 = get(configs, 29).fixedPrice;\\n\\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\\n        uniswapMarket20 = get(configs, 20).uniswapMarket;\\n        uniswapMarket21 = get(configs, 21).uniswapMarket;\\n        uniswapMarket22 = get(configs, 22).uniswapMarket;\\n        uniswapMarket23 = get(configs, 23).uniswapMarket;\\n        uniswapMarket24 = get(configs, 24).uniswapMarket;\\n        uniswapMarket25 = get(configs, 25).uniswapMarket;\\n        uniswapMarket26 = get(configs, 26).uniswapMarket;\\n        uniswapMarket27 = get(configs, 27).uniswapMarket;\\n        uniswapMarket28 = get(configs, 28).uniswapMarket;\\n        uniswapMarket29 = get(configs, 29).uniswapMarket;\\n\\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\\n        isUniswapReversed20 = get(configs, 20).isUniswapReversed;\\n        isUniswapReversed21 = get(configs, 21).isUniswapReversed;\\n        isUniswapReversed22 = get(configs, 22).isUniswapReversed;\\n        isUniswapReversed23 = get(configs, 23).isUniswapReversed;\\n        isUniswapReversed24 = get(configs, 24).isUniswapReversed;\\n        isUniswapReversed25 = get(configs, 25).isUniswapReversed;\\n        isUniswapReversed26 = get(configs, 26).isUniswapReversed;\\n        isUniswapReversed27 = get(configs, 27).isUniswapReversed;\\n        isUniswapReversed28 = get(configs, 28).isUniswapReversed;\\n        isUniswapReversed29 = get(configs, 29).isUniswapReversed;\\n    }\\n\\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\\n        if (i < configs.length)\\n            return configs[i];\\n        return TokenConfig({\\n            cToken: address(0),\\n            underlying: address(0),\\n            symbolHash: bytes32(0),\\n            baseUnit: uint256(0),\\n            priceSource: PriceSource(0),\\n            fixedPrice: uint256(0),\\n            uniswapMarket: address(0),\\n            isUniswapReversed: false\\n        });\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        if (cToken == cToken00) return 0;\\n        if (cToken == cToken01) return 1;\\n        if (cToken == cToken02) return 2;\\n        if (cToken == cToken03) return 3;\\n        if (cToken == cToken04) return 4;\\n        if (cToken == cToken05) return 5;\\n        if (cToken == cToken06) return 6;\\n        if (cToken == cToken07) return 7;\\n        if (cToken == cToken08) return 8;\\n        if (cToken == cToken09) return 9;\\n        if (cToken == cToken10) return 10;\\n        if (cToken == cToken11) return 11;\\n        if (cToken == cToken12) return 12;\\n        if (cToken == cToken13) return 13;\\n        if (cToken == cToken14) return 14;\\n        if (cToken == cToken15) return 15;\\n        if (cToken == cToken16) return 16;\\n        if (cToken == cToken17) return 17;\\n        if (cToken == cToken18) return 18;\\n        if (cToken == cToken19) return 19;\\n        if (cToken == cToken20) return 20;\\n        if (cToken == cToken21) return 21;\\n        if (cToken == cToken22) return 22;\\n        if (cToken == cToken23) return 23;\\n        if (cToken == cToken24) return 24;\\n        if (cToken == cToken25) return 25;\\n        if (cToken == cToken26) return 26;\\n        if (cToken == cToken27) return 27;\\n        if (cToken == cToken28) return 28;\\n        if (cToken == cToken29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        if (underlying == underlying00) return 0;\\n        if (underlying == underlying01) return 1;\\n        if (underlying == underlying02) return 2;\\n        if (underlying == underlying03) return 3;\\n        if (underlying == underlying04) return 4;\\n        if (underlying == underlying05) return 5;\\n        if (underlying == underlying06) return 6;\\n        if (underlying == underlying07) return 7;\\n        if (underlying == underlying08) return 8;\\n        if (underlying == underlying09) return 9;\\n        if (underlying == underlying10) return 10;\\n        if (underlying == underlying11) return 11;\\n        if (underlying == underlying12) return 12;\\n        if (underlying == underlying13) return 13;\\n        if (underlying == underlying14) return 14;\\n        if (underlying == underlying15) return 15;\\n        if (underlying == underlying16) return 16;\\n        if (underlying == underlying17) return 17;\\n        if (underlying == underlying18) return 18;\\n        if (underlying == underlying19) return 19;\\n        if (underlying == underlying20) return 20;\\n        if (underlying == underlying21) return 21;\\n        if (underlying == underlying22) return 22;\\n        if (underlying == underlying23) return 23;\\n        if (underlying == underlying24) return 24;\\n        if (underlying == underlying25) return 25;\\n        if (underlying == underlying26) return 26;\\n        if (underlying == underlying27) return 27;\\n        if (underlying == underlying28) return 28;\\n        if (underlying == underlying29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        if (symbolHash == symbolHash00) return 0;\\n        if (symbolHash == symbolHash01) return 1;\\n        if (symbolHash == symbolHash02) return 2;\\n        if (symbolHash == symbolHash03) return 3;\\n        if (symbolHash == symbolHash04) return 4;\\n        if (symbolHash == symbolHash05) return 5;\\n        if (symbolHash == symbolHash06) return 6;\\n        if (symbolHash == symbolHash07) return 7;\\n        if (symbolHash == symbolHash08) return 8;\\n        if (symbolHash == symbolHash09) return 9;\\n        if (symbolHash == symbolHash10) return 10;\\n        if (symbolHash == symbolHash11) return 11;\\n        if (symbolHash == symbolHash12) return 12;\\n        if (symbolHash == symbolHash13) return 13;\\n        if (symbolHash == symbolHash14) return 14;\\n        if (symbolHash == symbolHash15) return 15;\\n        if (symbolHash == symbolHash16) return 16;\\n        if (symbolHash == symbolHash17) return 17;\\n        if (symbolHash == symbolHash18) return 18;\\n        if (symbolHash == symbolHash19) return 19;\\n        if (symbolHash == symbolHash20) return 20;\\n        if (symbolHash == symbolHash21) return 21;\\n        if (symbolHash == symbolHash22) return 22;\\n        if (symbolHash == symbolHash23) return 23;\\n        if (symbolHash == symbolHash24) return 24;\\n        if (symbolHash == symbolHash25) return 25;\\n        if (symbolHash == symbolHash26) return 26;\\n        if (symbolHash == symbolHash27) return 27;\\n        if (symbolHash == symbolHash28) return 28;\\n        if (symbolHash == symbolHash29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n\\n        if (i == 0) return TokenConfig({cToken: cToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, isUniswapReversed: isUniswapReversed00});\\n        if (i == 1) return TokenConfig({cToken: cToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, isUniswapReversed: isUniswapReversed01});\\n        if (i == 2) return TokenConfig({cToken: cToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, isUniswapReversed: isUniswapReversed02});\\n        if (i == 3) return TokenConfig({cToken: cToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, isUniswapReversed: isUniswapReversed03});\\n        if (i == 4) return TokenConfig({cToken: cToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, isUniswapReversed: isUniswapReversed04});\\n        if (i == 5) return TokenConfig({cToken: cToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, isUniswapReversed: isUniswapReversed05});\\n        if (i == 6) return TokenConfig({cToken: cToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, isUniswapReversed: isUniswapReversed06});\\n        if (i == 7) return TokenConfig({cToken: cToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, isUniswapReversed: isUniswapReversed07});\\n        if (i == 8) return TokenConfig({cToken: cToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, isUniswapReversed: isUniswapReversed08});\\n        if (i == 9) return TokenConfig({cToken: cToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, isUniswapReversed: isUniswapReversed09});\\n\\n        if (i == 10) return TokenConfig({cToken: cToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, isUniswapReversed: isUniswapReversed10});\\n        if (i == 11) return TokenConfig({cToken: cToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, isUniswapReversed: isUniswapReversed11});\\n        if (i == 12) return TokenConfig({cToken: cToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, isUniswapReversed: isUniswapReversed12});\\n        if (i == 13) return TokenConfig({cToken: cToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, isUniswapReversed: isUniswapReversed13});\\n        if (i == 14) return TokenConfig({cToken: cToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, isUniswapReversed: isUniswapReversed14});\\n        if (i == 15) return TokenConfig({cToken: cToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, isUniswapReversed: isUniswapReversed15});\\n        if (i == 16) return TokenConfig({cToken: cToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, isUniswapReversed: isUniswapReversed16});\\n        if (i == 17) return TokenConfig({cToken: cToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, isUniswapReversed: isUniswapReversed17});\\n        if (i == 18) return TokenConfig({cToken: cToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, isUniswapReversed: isUniswapReversed18});\\n        if (i == 19) return TokenConfig({cToken: cToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, isUniswapReversed: isUniswapReversed19});\\n\\n        if (i == 20) return TokenConfig({cToken: cToken20, underlying: underlying20, symbolHash: symbolHash20, baseUnit: baseUnit20, priceSource: priceSource20, fixedPrice: fixedPrice20, uniswapMarket: uniswapMarket20, isUniswapReversed: isUniswapReversed20});\\n        if (i == 21) return TokenConfig({cToken: cToken21, underlying: underlying21, symbolHash: symbolHash21, baseUnit: baseUnit21, priceSource: priceSource21, fixedPrice: fixedPrice21, uniswapMarket: uniswapMarket21, isUniswapReversed: isUniswapReversed21});\\n        if (i == 22) return TokenConfig({cToken: cToken22, underlying: underlying22, symbolHash: symbolHash22, baseUnit: baseUnit22, priceSource: priceSource22, fixedPrice: fixedPrice22, uniswapMarket: uniswapMarket22, isUniswapReversed: isUniswapReversed22});\\n        if (i == 23) return TokenConfig({cToken: cToken23, underlying: underlying23, symbolHash: symbolHash23, baseUnit: baseUnit23, priceSource: priceSource23, fixedPrice: fixedPrice23, uniswapMarket: uniswapMarket23, isUniswapReversed: isUniswapReversed23});\\n        if (i == 24) return TokenConfig({cToken: cToken24, underlying: underlying24, symbolHash: symbolHash24, baseUnit: baseUnit24, priceSource: priceSource24, fixedPrice: fixedPrice24, uniswapMarket: uniswapMarket24, isUniswapReversed: isUniswapReversed24});\\n        if (i == 25) return TokenConfig({cToken: cToken25, underlying: underlying25, symbolHash: symbolHash25, baseUnit: baseUnit25, priceSource: priceSource25, fixedPrice: fixedPrice25, uniswapMarket: uniswapMarket25, isUniswapReversed: isUniswapReversed25});\\n        if (i == 26) return TokenConfig({cToken: cToken26, underlying: underlying26, symbolHash: symbolHash26, baseUnit: baseUnit26, priceSource: priceSource26, fixedPrice: fixedPrice26, uniswapMarket: uniswapMarket26, isUniswapReversed: isUniswapReversed26});\\n        if (i == 27) return TokenConfig({cToken: cToken27, underlying: underlying27, symbolHash: symbolHash27, baseUnit: baseUnit27, priceSource: priceSource27, fixedPrice: fixedPrice27, uniswapMarket: uniswapMarket27, isUniswapReversed: isUniswapReversed27});\\n        if (i == 28) return TokenConfig({cToken: cToken28, underlying: underlying28, symbolHash: symbolHash28, baseUnit: baseUnit28, priceSource: priceSource28, fixedPrice: fixedPrice28, uniswapMarket: uniswapMarket28, isUniswapReversed: isUniswapReversed28});\\n        if (i == 29) return TokenConfig({cToken: cToken29, underlying: underlying29, symbolHash: symbolHash29, baseUnit: baseUnit29, priceSource: priceSource29, fixedPrice: fixedPrice29, uniswapMarket: uniswapMarket29, isUniswapReversed: isUniswapReversed29});\\n    }\\n\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\",\"keccak256\":\"0x5805b1637a0bdeb482b469313e7000c8655a501f3456753e9ea7515634f15afc\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534816;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4031dd655d8e82c7fbf327e936292929a624af1f11565807b6c5704c410a3852\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/Uniswap/UniswapConfig.sol:CErc20":{"abi":"[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"CErc20\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    enum PriceSource {FIXED_ETH, FIXED_USD, REPORTER}\\n    struct TokenConfig {\\n        address cToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    uint public constant maxTokens = 30;\\n    uint public immutable numTokens;\\n\\n    address internal immutable cToken00;\\n    address internal immutable cToken01;\\n    address internal immutable cToken02;\\n    address internal immutable cToken03;\\n    address internal immutable cToken04;\\n    address internal immutable cToken05;\\n    address internal immutable cToken06;\\n    address internal immutable cToken07;\\n    address internal immutable cToken08;\\n    address internal immutable cToken09;\\n    address internal immutable cToken10;\\n    address internal immutable cToken11;\\n    address internal immutable cToken12;\\n    address internal immutable cToken13;\\n    address internal immutable cToken14;\\n    address internal immutable cToken15;\\n    address internal immutable cToken16;\\n    address internal immutable cToken17;\\n    address internal immutable cToken18;\\n    address internal immutable cToken19;\\n    address internal immutable cToken20;\\n    address internal immutable cToken21;\\n    address internal immutable cToken22;\\n    address internal immutable cToken23;\\n    address internal immutable cToken24;\\n    address internal immutable cToken25;\\n    address internal immutable cToken26;\\n    address internal immutable cToken27;\\n    address internal immutable cToken28;\\n    address internal immutable cToken29;\\n\\n    address internal immutable underlying00;\\n    address internal immutable underlying01;\\n    address internal immutable underlying02;\\n    address internal immutable underlying03;\\n    address internal immutable underlying04;\\n    address internal immutable underlying05;\\n    address internal immutable underlying06;\\n    address internal immutable underlying07;\\n    address internal immutable underlying08;\\n    address internal immutable underlying09;\\n    address internal immutable underlying10;\\n    address internal immutable underlying11;\\n    address internal immutable underlying12;\\n    address internal immutable underlying13;\\n    address internal immutable underlying14;\\n    address internal immutable underlying15;\\n    address internal immutable underlying16;\\n    address internal immutable underlying17;\\n    address internal immutable underlying18;\\n    address internal immutable underlying19;\\n    address internal immutable underlying20;\\n    address internal immutable underlying21;\\n    address internal immutable underlying22;\\n    address internal immutable underlying23;\\n    address internal immutable underlying24;\\n    address internal immutable underlying25;\\n    address internal immutable underlying26;\\n    address internal immutable underlying27;\\n    address internal immutable underlying28;\\n    address internal immutable underlying29;\\n\\n    bytes32 internal immutable symbolHash00;\\n    bytes32 internal immutable symbolHash01;\\n    bytes32 internal immutable symbolHash02;\\n    bytes32 internal immutable symbolHash03;\\n    bytes32 internal immutable symbolHash04;\\n    bytes32 internal immutable symbolHash05;\\n    bytes32 internal immutable symbolHash06;\\n    bytes32 internal immutable symbolHash07;\\n    bytes32 internal immutable symbolHash08;\\n    bytes32 internal immutable symbolHash09;\\n    bytes32 internal immutable symbolHash10;\\n    bytes32 internal immutable symbolHash11;\\n    bytes32 internal immutable symbolHash12;\\n    bytes32 internal immutable symbolHash13;\\n    bytes32 internal immutable symbolHash14;\\n    bytes32 internal immutable symbolHash15;\\n    bytes32 internal immutable symbolHash16;\\n    bytes32 internal immutable symbolHash17;\\n    bytes32 internal immutable symbolHash18;\\n    bytes32 internal immutable symbolHash19;\\n    bytes32 internal immutable symbolHash20;\\n    bytes32 internal immutable symbolHash21;\\n    bytes32 internal immutable symbolHash22;\\n    bytes32 internal immutable symbolHash23;\\n    bytes32 internal immutable symbolHash24;\\n    bytes32 internal immutable symbolHash25;\\n    bytes32 internal immutable symbolHash26;\\n    bytes32 internal immutable symbolHash27;\\n    bytes32 internal immutable symbolHash28;\\n    bytes32 internal immutable symbolHash29;\\n\\n    uint256 internal immutable baseUnit00;\\n    uint256 internal immutable baseUnit01;\\n    uint256 internal immutable baseUnit02;\\n    uint256 internal immutable baseUnit03;\\n    uint256 internal immutable baseUnit04;\\n    uint256 internal immutable baseUnit05;\\n    uint256 internal immutable baseUnit06;\\n    uint256 internal immutable baseUnit07;\\n    uint256 internal immutable baseUnit08;\\n    uint256 internal immutable baseUnit09;\\n    uint256 internal immutable baseUnit10;\\n    uint256 internal immutable baseUnit11;\\n    uint256 internal immutable baseUnit12;\\n    uint256 internal immutable baseUnit13;\\n    uint256 internal immutable baseUnit14;\\n    uint256 internal immutable baseUnit15;\\n    uint256 internal immutable baseUnit16;\\n    uint256 internal immutable baseUnit17;\\n    uint256 internal immutable baseUnit18;\\n    uint256 internal immutable baseUnit19;\\n    uint256 internal immutable baseUnit20;\\n    uint256 internal immutable baseUnit21;\\n    uint256 internal immutable baseUnit22;\\n    uint256 internal immutable baseUnit23;\\n    uint256 internal immutable baseUnit24;\\n    uint256 internal immutable baseUnit25;\\n    uint256 internal immutable baseUnit26;\\n    uint256 internal immutable baseUnit27;\\n    uint256 internal immutable baseUnit28;\\n    uint256 internal immutable baseUnit29;\\n\\n    PriceSource internal immutable priceSource00;\\n    PriceSource internal immutable priceSource01;\\n    PriceSource internal immutable priceSource02;\\n    PriceSource internal immutable priceSource03;\\n    PriceSource internal immutable priceSource04;\\n    PriceSource internal immutable priceSource05;\\n    PriceSource internal immutable priceSource06;\\n    PriceSource internal immutable priceSource07;\\n    PriceSource internal immutable priceSource08;\\n    PriceSource internal immutable priceSource09;\\n    PriceSource internal immutable priceSource10;\\n    PriceSource internal immutable priceSource11;\\n    PriceSource internal immutable priceSource12;\\n    PriceSource internal immutable priceSource13;\\n    PriceSource internal immutable priceSource14;\\n    PriceSource internal immutable priceSource15;\\n    PriceSource internal immutable priceSource16;\\n    PriceSource internal immutable priceSource17;\\n    PriceSource internal immutable priceSource18;\\n    PriceSource internal immutable priceSource19;\\n    PriceSource internal immutable priceSource20;\\n    PriceSource internal immutable priceSource21;\\n    PriceSource internal immutable priceSource22;\\n    PriceSource internal immutable priceSource23;\\n    PriceSource internal immutable priceSource24;\\n    PriceSource internal immutable priceSource25;\\n    PriceSource internal immutable priceSource26;\\n    PriceSource internal immutable priceSource27;\\n    PriceSource internal immutable priceSource28;\\n    PriceSource internal immutable priceSource29;\\n\\n    uint256 internal immutable fixedPrice00;\\n    uint256 internal immutable fixedPrice01;\\n    uint256 internal immutable fixedPrice02;\\n    uint256 internal immutable fixedPrice03;\\n    uint256 internal immutable fixedPrice04;\\n    uint256 internal immutable fixedPrice05;\\n    uint256 internal immutable fixedPrice06;\\n    uint256 internal immutable fixedPrice07;\\n    uint256 internal immutable fixedPrice08;\\n    uint256 internal immutable fixedPrice09;\\n    uint256 internal immutable fixedPrice10;\\n    uint256 internal immutable fixedPrice11;\\n    uint256 internal immutable fixedPrice12;\\n    uint256 internal immutable fixedPrice13;\\n    uint256 internal immutable fixedPrice14;\\n    uint256 internal immutable fixedPrice15;\\n    uint256 internal immutable fixedPrice16;\\n    uint256 internal immutable fixedPrice17;\\n    uint256 internal immutable fixedPrice18;\\n    uint256 internal immutable fixedPrice19;\\n    uint256 internal immutable fixedPrice20;\\n    uint256 internal immutable fixedPrice21;\\n    uint256 internal immutable fixedPrice22;\\n    uint256 internal immutable fixedPrice23;\\n    uint256 internal immutable fixedPrice24;\\n    uint256 internal immutable fixedPrice25;\\n    uint256 internal immutable fixedPrice26;\\n    uint256 internal immutable fixedPrice27;\\n    uint256 internal immutable fixedPrice28;\\n    uint256 internal immutable fixedPrice29;\\n\\n    address internal immutable uniswapMarket00;\\n    address internal immutable uniswapMarket01;\\n    address internal immutable uniswapMarket02;\\n    address internal immutable uniswapMarket03;\\n    address internal immutable uniswapMarket04;\\n    address internal immutable uniswapMarket05;\\n    address internal immutable uniswapMarket06;\\n    address internal immutable uniswapMarket07;\\n    address internal immutable uniswapMarket08;\\n    address internal immutable uniswapMarket09;\\n    address internal immutable uniswapMarket10;\\n    address internal immutable uniswapMarket11;\\n    address internal immutable uniswapMarket12;\\n    address internal immutable uniswapMarket13;\\n    address internal immutable uniswapMarket14;\\n    address internal immutable uniswapMarket15;\\n    address internal immutable uniswapMarket16;\\n    address internal immutable uniswapMarket17;\\n    address internal immutable uniswapMarket18;\\n    address internal immutable uniswapMarket19;\\n    address internal immutable uniswapMarket20;\\n    address internal immutable uniswapMarket21;\\n    address internal immutable uniswapMarket22;\\n    address internal immutable uniswapMarket23;\\n    address internal immutable uniswapMarket24;\\n    address internal immutable uniswapMarket25;\\n    address internal immutable uniswapMarket26;\\n    address internal immutable uniswapMarket27;\\n    address internal immutable uniswapMarket28;\\n    address internal immutable uniswapMarket29;\\n\\n    bool internal immutable isUniswapReversed00;\\n    bool internal immutable isUniswapReversed01;\\n    bool internal immutable isUniswapReversed02;\\n    bool internal immutable isUniswapReversed03;\\n    bool internal immutable isUniswapReversed04;\\n    bool internal immutable isUniswapReversed05;\\n    bool internal immutable isUniswapReversed06;\\n    bool internal immutable isUniswapReversed07;\\n    bool internal immutable isUniswapReversed08;\\n    bool internal immutable isUniswapReversed09;\\n    bool internal immutable isUniswapReversed10;\\n    bool internal immutable isUniswapReversed11;\\n    bool internal immutable isUniswapReversed12;\\n    bool internal immutable isUniswapReversed13;\\n    bool internal immutable isUniswapReversed14;\\n    bool internal immutable isUniswapReversed15;\\n    bool internal immutable isUniswapReversed16;\\n    bool internal immutable isUniswapReversed17;\\n    bool internal immutable isUniswapReversed18;\\n    bool internal immutable isUniswapReversed19;\\n    bool internal immutable isUniswapReversed20;\\n    bool internal immutable isUniswapReversed21;\\n    bool internal immutable isUniswapReversed22;\\n    bool internal immutable isUniswapReversed23;\\n    bool internal immutable isUniswapReversed24;\\n    bool internal immutable isUniswapReversed25;\\n    bool internal immutable isUniswapReversed26;\\n    bool internal immutable isUniswapReversed27;\\n    bool internal immutable isUniswapReversed28;\\n    bool internal immutable isUniswapReversed29;\\n\\n    constructor(TokenConfig[] memory configs) public {\\n        require(configs.length <= maxTokens, \\\"too many configs\\\");\\n        numTokens = configs.length;\\n\\n        cToken00 = get(configs, 0).cToken;\\n        cToken01 = get(configs, 1).cToken;\\n        cToken02 = get(configs, 2).cToken;\\n        cToken03 = get(configs, 3).cToken;\\n        cToken04 = get(configs, 4).cToken;\\n        cToken05 = get(configs, 5).cToken;\\n        cToken06 = get(configs, 6).cToken;\\n        cToken07 = get(configs, 7).cToken;\\n        cToken08 = get(configs, 8).cToken;\\n        cToken09 = get(configs, 9).cToken;\\n        cToken10 = get(configs, 10).cToken;\\n        cToken11 = get(configs, 11).cToken;\\n        cToken12 = get(configs, 12).cToken;\\n        cToken13 = get(configs, 13).cToken;\\n        cToken14 = get(configs, 14).cToken;\\n        cToken15 = get(configs, 15).cToken;\\n        cToken16 = get(configs, 16).cToken;\\n        cToken17 = get(configs, 17).cToken;\\n        cToken18 = get(configs, 18).cToken;\\n        cToken19 = get(configs, 19).cToken;\\n        cToken20 = get(configs, 20).cToken;\\n        cToken21 = get(configs, 21).cToken;\\n        cToken22 = get(configs, 22).cToken;\\n        cToken23 = get(configs, 23).cToken;\\n        cToken24 = get(configs, 24).cToken;\\n        cToken25 = get(configs, 25).cToken;\\n        cToken26 = get(configs, 26).cToken;\\n        cToken27 = get(configs, 27).cToken;\\n        cToken28 = get(configs, 28).cToken;\\n        cToken29 = get(configs, 29).cToken;\\n\\n        underlying00 = get(configs, 0).underlying;\\n        underlying01 = get(configs, 1).underlying;\\n        underlying02 = get(configs, 2).underlying;\\n        underlying03 = get(configs, 3).underlying;\\n        underlying04 = get(configs, 4).underlying;\\n        underlying05 = get(configs, 5).underlying;\\n        underlying06 = get(configs, 6).underlying;\\n        underlying07 = get(configs, 7).underlying;\\n        underlying08 = get(configs, 8).underlying;\\n        underlying09 = get(configs, 9).underlying;\\n        underlying10 = get(configs, 10).underlying;\\n        underlying11 = get(configs, 11).underlying;\\n        underlying12 = get(configs, 12).underlying;\\n        underlying13 = get(configs, 13).underlying;\\n        underlying14 = get(configs, 14).underlying;\\n        underlying15 = get(configs, 15).underlying;\\n        underlying16 = get(configs, 16).underlying;\\n        underlying17 = get(configs, 17).underlying;\\n        underlying18 = get(configs, 18).underlying;\\n        underlying19 = get(configs, 19).underlying;\\n        underlying20 = get(configs, 20).underlying;\\n        underlying21 = get(configs, 21).underlying;\\n        underlying22 = get(configs, 22).underlying;\\n        underlying23 = get(configs, 23).underlying;\\n        underlying24 = get(configs, 24).underlying;\\n        underlying25 = get(configs, 25).underlying;\\n        underlying26 = get(configs, 26).underlying;\\n        underlying27 = get(configs, 27).underlying;\\n        underlying28 = get(configs, 28).underlying;\\n        underlying29 = get(configs, 29).underlying;\\n\\n        symbolHash00 = get(configs, 0).symbolHash;\\n        symbolHash01 = get(configs, 1).symbolHash;\\n        symbolHash02 = get(configs, 2).symbolHash;\\n        symbolHash03 = get(configs, 3).symbolHash;\\n        symbolHash04 = get(configs, 4).symbolHash;\\n        symbolHash05 = get(configs, 5).symbolHash;\\n        symbolHash06 = get(configs, 6).symbolHash;\\n        symbolHash07 = get(configs, 7).symbolHash;\\n        symbolHash08 = get(configs, 8).symbolHash;\\n        symbolHash09 = get(configs, 9).symbolHash;\\n        symbolHash10 = get(configs, 10).symbolHash;\\n        symbolHash11 = get(configs, 11).symbolHash;\\n        symbolHash12 = get(configs, 12).symbolHash;\\n        symbolHash13 = get(configs, 13).symbolHash;\\n        symbolHash14 = get(configs, 14).symbolHash;\\n        symbolHash15 = get(configs, 15).symbolHash;\\n        symbolHash16 = get(configs, 16).symbolHash;\\n        symbolHash17 = get(configs, 17).symbolHash;\\n        symbolHash18 = get(configs, 18).symbolHash;\\n        symbolHash19 = get(configs, 19).symbolHash;\\n        symbolHash20 = get(configs, 20).symbolHash;\\n        symbolHash21 = get(configs, 21).symbolHash;\\n        symbolHash22 = get(configs, 22).symbolHash;\\n        symbolHash23 = get(configs, 23).symbolHash;\\n        symbolHash24 = get(configs, 24).symbolHash;\\n        symbolHash25 = get(configs, 25).symbolHash;\\n        symbolHash26 = get(configs, 26).symbolHash;\\n        symbolHash27 = get(configs, 27).symbolHash;\\n        symbolHash28 = get(configs, 28).symbolHash;\\n        symbolHash29 = get(configs, 29).symbolHash;\\n\\n        baseUnit00 = get(configs, 0).baseUnit;\\n        baseUnit01 = get(configs, 1).baseUnit;\\n        baseUnit02 = get(configs, 2).baseUnit;\\n        baseUnit03 = get(configs, 3).baseUnit;\\n        baseUnit04 = get(configs, 4).baseUnit;\\n        baseUnit05 = get(configs, 5).baseUnit;\\n        baseUnit06 = get(configs, 6).baseUnit;\\n        baseUnit07 = get(configs, 7).baseUnit;\\n        baseUnit08 = get(configs, 8).baseUnit;\\n        baseUnit09 = get(configs, 9).baseUnit;\\n        baseUnit10 = get(configs, 10).baseUnit;\\n        baseUnit11 = get(configs, 11).baseUnit;\\n        baseUnit12 = get(configs, 12).baseUnit;\\n        baseUnit13 = get(configs, 13).baseUnit;\\n        baseUnit14 = get(configs, 14).baseUnit;\\n        baseUnit15 = get(configs, 15).baseUnit;\\n        baseUnit16 = get(configs, 16).baseUnit;\\n        baseUnit17 = get(configs, 17).baseUnit;\\n        baseUnit18 = get(configs, 18).baseUnit;\\n        baseUnit19 = get(configs, 19).baseUnit;\\n        baseUnit20 = get(configs, 20).baseUnit;\\n        baseUnit21 = get(configs, 21).baseUnit;\\n        baseUnit22 = get(configs, 22).baseUnit;\\n        baseUnit23 = get(configs, 23).baseUnit;\\n        baseUnit24 = get(configs, 24).baseUnit;\\n        baseUnit25 = get(configs, 25).baseUnit;\\n        baseUnit26 = get(configs, 26).baseUnit;\\n        baseUnit27 = get(configs, 27).baseUnit;\\n        baseUnit28 = get(configs, 28).baseUnit;\\n        baseUnit29 = get(configs, 29).baseUnit;\\n\\n        priceSource00 = get(configs, 0).priceSource;\\n        priceSource01 = get(configs, 1).priceSource;\\n        priceSource02 = get(configs, 2).priceSource;\\n        priceSource03 = get(configs, 3).priceSource;\\n        priceSource04 = get(configs, 4).priceSource;\\n        priceSource05 = get(configs, 5).priceSource;\\n        priceSource06 = get(configs, 6).priceSource;\\n        priceSource07 = get(configs, 7).priceSource;\\n        priceSource08 = get(configs, 8).priceSource;\\n        priceSource09 = get(configs, 9).priceSource;\\n        priceSource10 = get(configs, 10).priceSource;\\n        priceSource11 = get(configs, 11).priceSource;\\n        priceSource12 = get(configs, 12).priceSource;\\n        priceSource13 = get(configs, 13).priceSource;\\n        priceSource14 = get(configs, 14).priceSource;\\n        priceSource15 = get(configs, 15).priceSource;\\n        priceSource16 = get(configs, 16).priceSource;\\n        priceSource17 = get(configs, 17).priceSource;\\n        priceSource18 = get(configs, 18).priceSource;\\n        priceSource19 = get(configs, 19).priceSource;\\n        priceSource20 = get(configs, 20).priceSource;\\n        priceSource21 = get(configs, 21).priceSource;\\n        priceSource22 = get(configs, 22).priceSource;\\n        priceSource23 = get(configs, 23).priceSource;\\n        priceSource24 = get(configs, 24).priceSource;\\n        priceSource25 = get(configs, 25).priceSource;\\n        priceSource26 = get(configs, 26).priceSource;\\n        priceSource27 = get(configs, 27).priceSource;\\n        priceSource28 = get(configs, 28).priceSource;\\n        priceSource29 = get(configs, 29).priceSource;\\n\\n        fixedPrice00 = get(configs, 0).fixedPrice;\\n        fixedPrice01 = get(configs, 1).fixedPrice;\\n        fixedPrice02 = get(configs, 2).fixedPrice;\\n        fixedPrice03 = get(configs, 3).fixedPrice;\\n        fixedPrice04 = get(configs, 4).fixedPrice;\\n        fixedPrice05 = get(configs, 5).fixedPrice;\\n        fixedPrice06 = get(configs, 6).fixedPrice;\\n        fixedPrice07 = get(configs, 7).fixedPrice;\\n        fixedPrice08 = get(configs, 8).fixedPrice;\\n        fixedPrice09 = get(configs, 9).fixedPrice;\\n        fixedPrice10 = get(configs, 10).fixedPrice;\\n        fixedPrice11 = get(configs, 11).fixedPrice;\\n        fixedPrice12 = get(configs, 12).fixedPrice;\\n        fixedPrice13 = get(configs, 13).fixedPrice;\\n        fixedPrice14 = get(configs, 14).fixedPrice;\\n        fixedPrice15 = get(configs, 15).fixedPrice;\\n        fixedPrice16 = get(configs, 16).fixedPrice;\\n        fixedPrice17 = get(configs, 17).fixedPrice;\\n        fixedPrice18 = get(configs, 18).fixedPrice;\\n        fixedPrice19 = get(configs, 19).fixedPrice;\\n        fixedPrice20 = get(configs, 20).fixedPrice;\\n        fixedPrice21 = get(configs, 21).fixedPrice;\\n        fixedPrice22 = get(configs, 22).fixedPrice;\\n        fixedPrice23 = get(configs, 23).fixedPrice;\\n        fixedPrice24 = get(configs, 24).fixedPrice;\\n        fixedPrice25 = get(configs, 25).fixedPrice;\\n        fixedPrice26 = get(configs, 26).fixedPrice;\\n        fixedPrice27 = get(configs, 27).fixedPrice;\\n        fixedPrice28 = get(configs, 28).fixedPrice;\\n        fixedPrice29 = get(configs, 29).fixedPrice;\\n\\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\\n        uniswapMarket20 = get(configs, 20).uniswapMarket;\\n        uniswapMarket21 = get(configs, 21).uniswapMarket;\\n        uniswapMarket22 = get(configs, 22).uniswapMarket;\\n        uniswapMarket23 = get(configs, 23).uniswapMarket;\\n        uniswapMarket24 = get(configs, 24).uniswapMarket;\\n        uniswapMarket25 = get(configs, 25).uniswapMarket;\\n        uniswapMarket26 = get(configs, 26).uniswapMarket;\\n        uniswapMarket27 = get(configs, 27).uniswapMarket;\\n        uniswapMarket28 = get(configs, 28).uniswapMarket;\\n        uniswapMarket29 = get(configs, 29).uniswapMarket;\\n\\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\\n        isUniswapReversed20 = get(configs, 20).isUniswapReversed;\\n        isUniswapReversed21 = get(configs, 21).isUniswapReversed;\\n        isUniswapReversed22 = get(configs, 22).isUniswapReversed;\\n        isUniswapReversed23 = get(configs, 23).isUniswapReversed;\\n        isUniswapReversed24 = get(configs, 24).isUniswapReversed;\\n        isUniswapReversed25 = get(configs, 25).isUniswapReversed;\\n        isUniswapReversed26 = get(configs, 26).isUniswapReversed;\\n        isUniswapReversed27 = get(configs, 27).isUniswapReversed;\\n        isUniswapReversed28 = get(configs, 28).isUniswapReversed;\\n        isUniswapReversed29 = get(configs, 29).isUniswapReversed;\\n    }\\n\\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\\n        if (i < configs.length)\\n            return configs[i];\\n        return TokenConfig({\\n            cToken: address(0),\\n            underlying: address(0),\\n            symbolHash: bytes32(0),\\n            baseUnit: uint256(0),\\n            priceSource: PriceSource(0),\\n            fixedPrice: uint256(0),\\n            uniswapMarket: address(0),\\n            isUniswapReversed: false\\n        });\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        if (cToken == cToken00) return 0;\\n        if (cToken == cToken01) return 1;\\n        if (cToken == cToken02) return 2;\\n        if (cToken == cToken03) return 3;\\n        if (cToken == cToken04) return 4;\\n        if (cToken == cToken05) return 5;\\n        if (cToken == cToken06) return 6;\\n        if (cToken == cToken07) return 7;\\n        if (cToken == cToken08) return 8;\\n        if (cToken == cToken09) return 9;\\n        if (cToken == cToken10) return 10;\\n        if (cToken == cToken11) return 11;\\n        if (cToken == cToken12) return 12;\\n        if (cToken == cToken13) return 13;\\n        if (cToken == cToken14) return 14;\\n        if (cToken == cToken15) return 15;\\n        if (cToken == cToken16) return 16;\\n        if (cToken == cToken17) return 17;\\n        if (cToken == cToken18) return 18;\\n        if (cToken == cToken19) return 19;\\n        if (cToken == cToken20) return 20;\\n        if (cToken == cToken21) return 21;\\n        if (cToken == cToken22) return 22;\\n        if (cToken == cToken23) return 23;\\n        if (cToken == cToken24) return 24;\\n        if (cToken == cToken25) return 25;\\n        if (cToken == cToken26) return 26;\\n        if (cToken == cToken27) return 27;\\n        if (cToken == cToken28) return 28;\\n        if (cToken == cToken29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        if (underlying == underlying00) return 0;\\n        if (underlying == underlying01) return 1;\\n        if (underlying == underlying02) return 2;\\n        if (underlying == underlying03) return 3;\\n        if (underlying == underlying04) return 4;\\n        if (underlying == underlying05) return 5;\\n        if (underlying == underlying06) return 6;\\n        if (underlying == underlying07) return 7;\\n        if (underlying == underlying08) return 8;\\n        if (underlying == underlying09) return 9;\\n        if (underlying == underlying10) return 10;\\n        if (underlying == underlying11) return 11;\\n        if (underlying == underlying12) return 12;\\n        if (underlying == underlying13) return 13;\\n        if (underlying == underlying14) return 14;\\n        if (underlying == underlying15) return 15;\\n        if (underlying == underlying16) return 16;\\n        if (underlying == underlying17) return 17;\\n        if (underlying == underlying18) return 18;\\n        if (underlying == underlying19) return 19;\\n        if (underlying == underlying20) return 20;\\n        if (underlying == underlying21) return 21;\\n        if (underlying == underlying22) return 22;\\n        if (underlying == underlying23) return 23;\\n        if (underlying == underlying24) return 24;\\n        if (underlying == underlying25) return 25;\\n        if (underlying == underlying26) return 26;\\n        if (underlying == underlying27) return 27;\\n        if (underlying == underlying28) return 28;\\n        if (underlying == underlying29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        if (symbolHash == symbolHash00) return 0;\\n        if (symbolHash == symbolHash01) return 1;\\n        if (symbolHash == symbolHash02) return 2;\\n        if (symbolHash == symbolHash03) return 3;\\n        if (symbolHash == symbolHash04) return 4;\\n        if (symbolHash == symbolHash05) return 5;\\n        if (symbolHash == symbolHash06) return 6;\\n        if (symbolHash == symbolHash07) return 7;\\n        if (symbolHash == symbolHash08) return 8;\\n        if (symbolHash == symbolHash09) return 9;\\n        if (symbolHash == symbolHash10) return 10;\\n        if (symbolHash == symbolHash11) return 11;\\n        if (symbolHash == symbolHash12) return 12;\\n        if (symbolHash == symbolHash13) return 13;\\n        if (symbolHash == symbolHash14) return 14;\\n        if (symbolHash == symbolHash15) return 15;\\n        if (symbolHash == symbolHash16) return 16;\\n        if (symbolHash == symbolHash17) return 17;\\n        if (symbolHash == symbolHash18) return 18;\\n        if (symbolHash == symbolHash19) return 19;\\n        if (symbolHash == symbolHash20) return 20;\\n        if (symbolHash == symbolHash21) return 21;\\n        if (symbolHash == symbolHash22) return 22;\\n        if (symbolHash == symbolHash23) return 23;\\n        if (symbolHash == symbolHash24) return 24;\\n        if (symbolHash == symbolHash25) return 25;\\n        if (symbolHash == symbolHash26) return 26;\\n        if (symbolHash == symbolHash27) return 27;\\n        if (symbolHash == symbolHash28) return 28;\\n        if (symbolHash == symbolHash29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n\\n        if (i == 0) return TokenConfig({cToken: cToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, isUniswapReversed: isUniswapReversed00});\\n        if (i == 1) return TokenConfig({cToken: cToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, isUniswapReversed: isUniswapReversed01});\\n        if (i == 2) return TokenConfig({cToken: cToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, isUniswapReversed: isUniswapReversed02});\\n        if (i == 3) return TokenConfig({cToken: cToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, isUniswapReversed: isUniswapReversed03});\\n        if (i == 4) return TokenConfig({cToken: cToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, isUniswapReversed: isUniswapReversed04});\\n        if (i == 5) return TokenConfig({cToken: cToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, isUniswapReversed: isUniswapReversed05});\\n        if (i == 6) return TokenConfig({cToken: cToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, isUniswapReversed: isUniswapReversed06});\\n        if (i == 7) return TokenConfig({cToken: cToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, isUniswapReversed: isUniswapReversed07});\\n        if (i == 8) return TokenConfig({cToken: cToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, isUniswapReversed: isUniswapReversed08});\\n        if (i == 9) return TokenConfig({cToken: cToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, isUniswapReversed: isUniswapReversed09});\\n\\n        if (i == 10) return TokenConfig({cToken: cToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, isUniswapReversed: isUniswapReversed10});\\n        if (i == 11) return TokenConfig({cToken: cToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, isUniswapReversed: isUniswapReversed11});\\n        if (i == 12) return TokenConfig({cToken: cToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, isUniswapReversed: isUniswapReversed12});\\n        if (i == 13) return TokenConfig({cToken: cToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, isUniswapReversed: isUniswapReversed13});\\n        if (i == 14) return TokenConfig({cToken: cToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, isUniswapReversed: isUniswapReversed14});\\n        if (i == 15) return TokenConfig({cToken: cToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, isUniswapReversed: isUniswapReversed15});\\n        if (i == 16) return TokenConfig({cToken: cToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, isUniswapReversed: isUniswapReversed16});\\n        if (i == 17) return TokenConfig({cToken: cToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, isUniswapReversed: isUniswapReversed17});\\n        if (i == 18) return TokenConfig({cToken: cToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, isUniswapReversed: isUniswapReversed18});\\n        if (i == 19) return TokenConfig({cToken: cToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, isUniswapReversed: isUniswapReversed19});\\n\\n        if (i == 20) return TokenConfig({cToken: cToken20, underlying: underlying20, symbolHash: symbolHash20, baseUnit: baseUnit20, priceSource: priceSource20, fixedPrice: fixedPrice20, uniswapMarket: uniswapMarket20, isUniswapReversed: isUniswapReversed20});\\n        if (i == 21) return TokenConfig({cToken: cToken21, underlying: underlying21, symbolHash: symbolHash21, baseUnit: baseUnit21, priceSource: priceSource21, fixedPrice: fixedPrice21, uniswapMarket: uniswapMarket21, isUniswapReversed: isUniswapReversed21});\\n        if (i == 22) return TokenConfig({cToken: cToken22, underlying: underlying22, symbolHash: symbolHash22, baseUnit: baseUnit22, priceSource: priceSource22, fixedPrice: fixedPrice22, uniswapMarket: uniswapMarket22, isUniswapReversed: isUniswapReversed22});\\n        if (i == 23) return TokenConfig({cToken: cToken23, underlying: underlying23, symbolHash: symbolHash23, baseUnit: baseUnit23, priceSource: priceSource23, fixedPrice: fixedPrice23, uniswapMarket: uniswapMarket23, isUniswapReversed: isUniswapReversed23});\\n        if (i == 24) return TokenConfig({cToken: cToken24, underlying: underlying24, symbolHash: symbolHash24, baseUnit: baseUnit24, priceSource: priceSource24, fixedPrice: fixedPrice24, uniswapMarket: uniswapMarket24, isUniswapReversed: isUniswapReversed24});\\n        if (i == 25) return TokenConfig({cToken: cToken25, underlying: underlying25, symbolHash: symbolHash25, baseUnit: baseUnit25, priceSource: priceSource25, fixedPrice: fixedPrice25, uniswapMarket: uniswapMarket25, isUniswapReversed: isUniswapReversed25});\\n        if (i == 26) return TokenConfig({cToken: cToken26, underlying: underlying26, symbolHash: symbolHash26, baseUnit: baseUnit26, priceSource: priceSource26, fixedPrice: fixedPrice26, uniswapMarket: uniswapMarket26, isUniswapReversed: isUniswapReversed26});\\n        if (i == 27) return TokenConfig({cToken: cToken27, underlying: underlying27, symbolHash: symbolHash27, baseUnit: baseUnit27, priceSource: priceSource27, fixedPrice: fixedPrice27, uniswapMarket: uniswapMarket27, isUniswapReversed: isUniswapReversed27});\\n        if (i == 28) return TokenConfig({cToken: cToken28, underlying: underlying28, symbolHash: symbolHash28, baseUnit: baseUnit28, priceSource: priceSource28, fixedPrice: fixedPrice28, uniswapMarket: uniswapMarket28, isUniswapReversed: isUniswapReversed28});\\n        if (i == 29) return TokenConfig({cToken: cToken29, underlying: underlying29, symbolHash: symbolHash29, baseUnit: baseUnit29, priceSource: priceSource29, fixedPrice: fixedPrice29, uniswapMarket: uniswapMarket29, isUniswapReversed: isUniswapReversed29});\\n    }\\n\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\",\"keccak256\":\"0x5805b1637a0bdeb482b469313e7000c8655a501f3456753e9ea7515634f15afc\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/Uniswap/UniswapConfig.sol:UniswapConfig":{"abi":"[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapConfig.sol\":\"UniswapConfig\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    enum PriceSource {FIXED_ETH, FIXED_USD, REPORTER}\\n    struct TokenConfig {\\n        address cToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    uint public constant maxTokens = 30;\\n    uint public immutable numTokens;\\n\\n    address internal immutable cToken00;\\n    address internal immutable cToken01;\\n    address internal immutable cToken02;\\n    address internal immutable cToken03;\\n    address internal immutable cToken04;\\n    address internal immutable cToken05;\\n    address internal immutable cToken06;\\n    address internal immutable cToken07;\\n    address internal immutable cToken08;\\n    address internal immutable cToken09;\\n    address internal immutable cToken10;\\n    address internal immutable cToken11;\\n    address internal immutable cToken12;\\n    address internal immutable cToken13;\\n    address internal immutable cToken14;\\n    address internal immutable cToken15;\\n    address internal immutable cToken16;\\n    address internal immutable cToken17;\\n    address internal immutable cToken18;\\n    address internal immutable cToken19;\\n    address internal immutable cToken20;\\n    address internal immutable cToken21;\\n    address internal immutable cToken22;\\n    address internal immutable cToken23;\\n    address internal immutable cToken24;\\n    address internal immutable cToken25;\\n    address internal immutable cToken26;\\n    address internal immutable cToken27;\\n    address internal immutable cToken28;\\n    address internal immutable cToken29;\\n\\n    address internal immutable underlying00;\\n    address internal immutable underlying01;\\n    address internal immutable underlying02;\\n    address internal immutable underlying03;\\n    address internal immutable underlying04;\\n    address internal immutable underlying05;\\n    address internal immutable underlying06;\\n    address internal immutable underlying07;\\n    address internal immutable underlying08;\\n    address internal immutable underlying09;\\n    address internal immutable underlying10;\\n    address internal immutable underlying11;\\n    address internal immutable underlying12;\\n    address internal immutable underlying13;\\n    address internal immutable underlying14;\\n    address internal immutable underlying15;\\n    address internal immutable underlying16;\\n    address internal immutable underlying17;\\n    address internal immutable underlying18;\\n    address internal immutable underlying19;\\n    address internal immutable underlying20;\\n    address internal immutable underlying21;\\n    address internal immutable underlying22;\\n    address internal immutable underlying23;\\n    address internal immutable underlying24;\\n    address internal immutable underlying25;\\n    address internal immutable underlying26;\\n    address internal immutable underlying27;\\n    address internal immutable underlying28;\\n    address internal immutable underlying29;\\n\\n    bytes32 internal immutable symbolHash00;\\n    bytes32 internal immutable symbolHash01;\\n    bytes32 internal immutable symbolHash02;\\n    bytes32 internal immutable symbolHash03;\\n    bytes32 internal immutable symbolHash04;\\n    bytes32 internal immutable symbolHash05;\\n    bytes32 internal immutable symbolHash06;\\n    bytes32 internal immutable symbolHash07;\\n    bytes32 internal immutable symbolHash08;\\n    bytes32 internal immutable symbolHash09;\\n    bytes32 internal immutable symbolHash10;\\n    bytes32 internal immutable symbolHash11;\\n    bytes32 internal immutable symbolHash12;\\n    bytes32 internal immutable symbolHash13;\\n    bytes32 internal immutable symbolHash14;\\n    bytes32 internal immutable symbolHash15;\\n    bytes32 internal immutable symbolHash16;\\n    bytes32 internal immutable symbolHash17;\\n    bytes32 internal immutable symbolHash18;\\n    bytes32 internal immutable symbolHash19;\\n    bytes32 internal immutable symbolHash20;\\n    bytes32 internal immutable symbolHash21;\\n    bytes32 internal immutable symbolHash22;\\n    bytes32 internal immutable symbolHash23;\\n    bytes32 internal immutable symbolHash24;\\n    bytes32 internal immutable symbolHash25;\\n    bytes32 internal immutable symbolHash26;\\n    bytes32 internal immutable symbolHash27;\\n    bytes32 internal immutable symbolHash28;\\n    bytes32 internal immutable symbolHash29;\\n\\n    uint256 internal immutable baseUnit00;\\n    uint256 internal immutable baseUnit01;\\n    uint256 internal immutable baseUnit02;\\n    uint256 internal immutable baseUnit03;\\n    uint256 internal immutable baseUnit04;\\n    uint256 internal immutable baseUnit05;\\n    uint256 internal immutable baseUnit06;\\n    uint256 internal immutable baseUnit07;\\n    uint256 internal immutable baseUnit08;\\n    uint256 internal immutable baseUnit09;\\n    uint256 internal immutable baseUnit10;\\n    uint256 internal immutable baseUnit11;\\n    uint256 internal immutable baseUnit12;\\n    uint256 internal immutable baseUnit13;\\n    uint256 internal immutable baseUnit14;\\n    uint256 internal immutable baseUnit15;\\n    uint256 internal immutable baseUnit16;\\n    uint256 internal immutable baseUnit17;\\n    uint256 internal immutable baseUnit18;\\n    uint256 internal immutable baseUnit19;\\n    uint256 internal immutable baseUnit20;\\n    uint256 internal immutable baseUnit21;\\n    uint256 internal immutable baseUnit22;\\n    uint256 internal immutable baseUnit23;\\n    uint256 internal immutable baseUnit24;\\n    uint256 internal immutable baseUnit25;\\n    uint256 internal immutable baseUnit26;\\n    uint256 internal immutable baseUnit27;\\n    uint256 internal immutable baseUnit28;\\n    uint256 internal immutable baseUnit29;\\n\\n    PriceSource internal immutable priceSource00;\\n    PriceSource internal immutable priceSource01;\\n    PriceSource internal immutable priceSource02;\\n    PriceSource internal immutable priceSource03;\\n    PriceSource internal immutable priceSource04;\\n    PriceSource internal immutable priceSource05;\\n    PriceSource internal immutable priceSource06;\\n    PriceSource internal immutable priceSource07;\\n    PriceSource internal immutable priceSource08;\\n    PriceSource internal immutable priceSource09;\\n    PriceSource internal immutable priceSource10;\\n    PriceSource internal immutable priceSource11;\\n    PriceSource internal immutable priceSource12;\\n    PriceSource internal immutable priceSource13;\\n    PriceSource internal immutable priceSource14;\\n    PriceSource internal immutable priceSource15;\\n    PriceSource internal immutable priceSource16;\\n    PriceSource internal immutable priceSource17;\\n    PriceSource internal immutable priceSource18;\\n    PriceSource internal immutable priceSource19;\\n    PriceSource internal immutable priceSource20;\\n    PriceSource internal immutable priceSource21;\\n    PriceSource internal immutable priceSource22;\\n    PriceSource internal immutable priceSource23;\\n    PriceSource internal immutable priceSource24;\\n    PriceSource internal immutable priceSource25;\\n    PriceSource internal immutable priceSource26;\\n    PriceSource internal immutable priceSource27;\\n    PriceSource internal immutable priceSource28;\\n    PriceSource internal immutable priceSource29;\\n\\n    uint256 internal immutable fixedPrice00;\\n    uint256 internal immutable fixedPrice01;\\n    uint256 internal immutable fixedPrice02;\\n    uint256 internal immutable fixedPrice03;\\n    uint256 internal immutable fixedPrice04;\\n    uint256 internal immutable fixedPrice05;\\n    uint256 internal immutable fixedPrice06;\\n    uint256 internal immutable fixedPrice07;\\n    uint256 internal immutable fixedPrice08;\\n    uint256 internal immutable fixedPrice09;\\n    uint256 internal immutable fixedPrice10;\\n    uint256 internal immutable fixedPrice11;\\n    uint256 internal immutable fixedPrice12;\\n    uint256 internal immutable fixedPrice13;\\n    uint256 internal immutable fixedPrice14;\\n    uint256 internal immutable fixedPrice15;\\n    uint256 internal immutable fixedPrice16;\\n    uint256 internal immutable fixedPrice17;\\n    uint256 internal immutable fixedPrice18;\\n    uint256 internal immutable fixedPrice19;\\n    uint256 internal immutable fixedPrice20;\\n    uint256 internal immutable fixedPrice21;\\n    uint256 internal immutable fixedPrice22;\\n    uint256 internal immutable fixedPrice23;\\n    uint256 internal immutable fixedPrice24;\\n    uint256 internal immutable fixedPrice25;\\n    uint256 internal immutable fixedPrice26;\\n    uint256 internal immutable fixedPrice27;\\n    uint256 internal immutable fixedPrice28;\\n    uint256 internal immutable fixedPrice29;\\n\\n    address internal immutable uniswapMarket00;\\n    address internal immutable uniswapMarket01;\\n    address internal immutable uniswapMarket02;\\n    address internal immutable uniswapMarket03;\\n    address internal immutable uniswapMarket04;\\n    address internal immutable uniswapMarket05;\\n    address internal immutable uniswapMarket06;\\n    address internal immutable uniswapMarket07;\\n    address internal immutable uniswapMarket08;\\n    address internal immutable uniswapMarket09;\\n    address internal immutable uniswapMarket10;\\n    address internal immutable uniswapMarket11;\\n    address internal immutable uniswapMarket12;\\n    address internal immutable uniswapMarket13;\\n    address internal immutable uniswapMarket14;\\n    address internal immutable uniswapMarket15;\\n    address internal immutable uniswapMarket16;\\n    address internal immutable uniswapMarket17;\\n    address internal immutable uniswapMarket18;\\n    address internal immutable uniswapMarket19;\\n    address internal immutable uniswapMarket20;\\n    address internal immutable uniswapMarket21;\\n    address internal immutable uniswapMarket22;\\n    address internal immutable uniswapMarket23;\\n    address internal immutable uniswapMarket24;\\n    address internal immutable uniswapMarket25;\\n    address internal immutable uniswapMarket26;\\n    address internal immutable uniswapMarket27;\\n    address internal immutable uniswapMarket28;\\n    address internal immutable uniswapMarket29;\\n\\n    bool internal immutable isUniswapReversed00;\\n    bool internal immutable isUniswapReversed01;\\n    bool internal immutable isUniswapReversed02;\\n    bool internal immutable isUniswapReversed03;\\n    bool internal immutable isUniswapReversed04;\\n    bool internal immutable isUniswapReversed05;\\n    bool internal immutable isUniswapReversed06;\\n    bool internal immutable isUniswapReversed07;\\n    bool internal immutable isUniswapReversed08;\\n    bool internal immutable isUniswapReversed09;\\n    bool internal immutable isUniswapReversed10;\\n    bool internal immutable isUniswapReversed11;\\n    bool internal immutable isUniswapReversed12;\\n    bool internal immutable isUniswapReversed13;\\n    bool internal immutable isUniswapReversed14;\\n    bool internal immutable isUniswapReversed15;\\n    bool internal immutable isUniswapReversed16;\\n    bool internal immutable isUniswapReversed17;\\n    bool internal immutable isUniswapReversed18;\\n    bool internal immutable isUniswapReversed19;\\n    bool internal immutable isUniswapReversed20;\\n    bool internal immutable isUniswapReversed21;\\n    bool internal immutable isUniswapReversed22;\\n    bool internal immutable isUniswapReversed23;\\n    bool internal immutable isUniswapReversed24;\\n    bool internal immutable isUniswapReversed25;\\n    bool internal immutable isUniswapReversed26;\\n    bool internal immutable isUniswapReversed27;\\n    bool internal immutable isUniswapReversed28;\\n    bool internal immutable isUniswapReversed29;\\n\\n    constructor(TokenConfig[] memory configs) public {\\n        require(configs.length <= maxTokens, \\\"too many configs\\\");\\n        numTokens = configs.length;\\n\\n        cToken00 = get(configs, 0).cToken;\\n        cToken01 = get(configs, 1).cToken;\\n        cToken02 = get(configs, 2).cToken;\\n        cToken03 = get(configs, 3).cToken;\\n        cToken04 = get(configs, 4).cToken;\\n        cToken05 = get(configs, 5).cToken;\\n        cToken06 = get(configs, 6).cToken;\\n        cToken07 = get(configs, 7).cToken;\\n        cToken08 = get(configs, 8).cToken;\\n        cToken09 = get(configs, 9).cToken;\\n        cToken10 = get(configs, 10).cToken;\\n        cToken11 = get(configs, 11).cToken;\\n        cToken12 = get(configs, 12).cToken;\\n        cToken13 = get(configs, 13).cToken;\\n        cToken14 = get(configs, 14).cToken;\\n        cToken15 = get(configs, 15).cToken;\\n        cToken16 = get(configs, 16).cToken;\\n        cToken17 = get(configs, 17).cToken;\\n        cToken18 = get(configs, 18).cToken;\\n        cToken19 = get(configs, 19).cToken;\\n        cToken20 = get(configs, 20).cToken;\\n        cToken21 = get(configs, 21).cToken;\\n        cToken22 = get(configs, 22).cToken;\\n        cToken23 = get(configs, 23).cToken;\\n        cToken24 = get(configs, 24).cToken;\\n        cToken25 = get(configs, 25).cToken;\\n        cToken26 = get(configs, 26).cToken;\\n        cToken27 = get(configs, 27).cToken;\\n        cToken28 = get(configs, 28).cToken;\\n        cToken29 = get(configs, 29).cToken;\\n\\n        underlying00 = get(configs, 0).underlying;\\n        underlying01 = get(configs, 1).underlying;\\n        underlying02 = get(configs, 2).underlying;\\n        underlying03 = get(configs, 3).underlying;\\n        underlying04 = get(configs, 4).underlying;\\n        underlying05 = get(configs, 5).underlying;\\n        underlying06 = get(configs, 6).underlying;\\n        underlying07 = get(configs, 7).underlying;\\n        underlying08 = get(configs, 8).underlying;\\n        underlying09 = get(configs, 9).underlying;\\n        underlying10 = get(configs, 10).underlying;\\n        underlying11 = get(configs, 11).underlying;\\n        underlying12 = get(configs, 12).underlying;\\n        underlying13 = get(configs, 13).underlying;\\n        underlying14 = get(configs, 14).underlying;\\n        underlying15 = get(configs, 15).underlying;\\n        underlying16 = get(configs, 16).underlying;\\n        underlying17 = get(configs, 17).underlying;\\n        underlying18 = get(configs, 18).underlying;\\n        underlying19 = get(configs, 19).underlying;\\n        underlying20 = get(configs, 20).underlying;\\n        underlying21 = get(configs, 21).underlying;\\n        underlying22 = get(configs, 22).underlying;\\n        underlying23 = get(configs, 23).underlying;\\n        underlying24 = get(configs, 24).underlying;\\n        underlying25 = get(configs, 25).underlying;\\n        underlying26 = get(configs, 26).underlying;\\n        underlying27 = get(configs, 27).underlying;\\n        underlying28 = get(configs, 28).underlying;\\n        underlying29 = get(configs, 29).underlying;\\n\\n        symbolHash00 = get(configs, 0).symbolHash;\\n        symbolHash01 = get(configs, 1).symbolHash;\\n        symbolHash02 = get(configs, 2).symbolHash;\\n        symbolHash03 = get(configs, 3).symbolHash;\\n        symbolHash04 = get(configs, 4).symbolHash;\\n        symbolHash05 = get(configs, 5).symbolHash;\\n        symbolHash06 = get(configs, 6).symbolHash;\\n        symbolHash07 = get(configs, 7).symbolHash;\\n        symbolHash08 = get(configs, 8).symbolHash;\\n        symbolHash09 = get(configs, 9).symbolHash;\\n        symbolHash10 = get(configs, 10).symbolHash;\\n        symbolHash11 = get(configs, 11).symbolHash;\\n        symbolHash12 = get(configs, 12).symbolHash;\\n        symbolHash13 = get(configs, 13).symbolHash;\\n        symbolHash14 = get(configs, 14).symbolHash;\\n        symbolHash15 = get(configs, 15).symbolHash;\\n        symbolHash16 = get(configs, 16).symbolHash;\\n        symbolHash17 = get(configs, 17).symbolHash;\\n        symbolHash18 = get(configs, 18).symbolHash;\\n        symbolHash19 = get(configs, 19).symbolHash;\\n        symbolHash20 = get(configs, 20).symbolHash;\\n        symbolHash21 = get(configs, 21).symbolHash;\\n        symbolHash22 = get(configs, 22).symbolHash;\\n        symbolHash23 = get(configs, 23).symbolHash;\\n        symbolHash24 = get(configs, 24).symbolHash;\\n        symbolHash25 = get(configs, 25).symbolHash;\\n        symbolHash26 = get(configs, 26).symbolHash;\\n        symbolHash27 = get(configs, 27).symbolHash;\\n        symbolHash28 = get(configs, 28).symbolHash;\\n        symbolHash29 = get(configs, 29).symbolHash;\\n\\n        baseUnit00 = get(configs, 0).baseUnit;\\n        baseUnit01 = get(configs, 1).baseUnit;\\n        baseUnit02 = get(configs, 2).baseUnit;\\n        baseUnit03 = get(configs, 3).baseUnit;\\n        baseUnit04 = get(configs, 4).baseUnit;\\n        baseUnit05 = get(configs, 5).baseUnit;\\n        baseUnit06 = get(configs, 6).baseUnit;\\n        baseUnit07 = get(configs, 7).baseUnit;\\n        baseUnit08 = get(configs, 8).baseUnit;\\n        baseUnit09 = get(configs, 9).baseUnit;\\n        baseUnit10 = get(configs, 10).baseUnit;\\n        baseUnit11 = get(configs, 11).baseUnit;\\n        baseUnit12 = get(configs, 12).baseUnit;\\n        baseUnit13 = get(configs, 13).baseUnit;\\n        baseUnit14 = get(configs, 14).baseUnit;\\n        baseUnit15 = get(configs, 15).baseUnit;\\n        baseUnit16 = get(configs, 16).baseUnit;\\n        baseUnit17 = get(configs, 17).baseUnit;\\n        baseUnit18 = get(configs, 18).baseUnit;\\n        baseUnit19 = get(configs, 19).baseUnit;\\n        baseUnit20 = get(configs, 20).baseUnit;\\n        baseUnit21 = get(configs, 21).baseUnit;\\n        baseUnit22 = get(configs, 22).baseUnit;\\n        baseUnit23 = get(configs, 23).baseUnit;\\n        baseUnit24 = get(configs, 24).baseUnit;\\n        baseUnit25 = get(configs, 25).baseUnit;\\n        baseUnit26 = get(configs, 26).baseUnit;\\n        baseUnit27 = get(configs, 27).baseUnit;\\n        baseUnit28 = get(configs, 28).baseUnit;\\n        baseUnit29 = get(configs, 29).baseUnit;\\n\\n        priceSource00 = get(configs, 0).priceSource;\\n        priceSource01 = get(configs, 1).priceSource;\\n        priceSource02 = get(configs, 2).priceSource;\\n        priceSource03 = get(configs, 3).priceSource;\\n        priceSource04 = get(configs, 4).priceSource;\\n        priceSource05 = get(configs, 5).priceSource;\\n        priceSource06 = get(configs, 6).priceSource;\\n        priceSource07 = get(configs, 7).priceSource;\\n        priceSource08 = get(configs, 8).priceSource;\\n        priceSource09 = get(configs, 9).priceSource;\\n        priceSource10 = get(configs, 10).priceSource;\\n        priceSource11 = get(configs, 11).priceSource;\\n        priceSource12 = get(configs, 12).priceSource;\\n        priceSource13 = get(configs, 13).priceSource;\\n        priceSource14 = get(configs, 14).priceSource;\\n        priceSource15 = get(configs, 15).priceSource;\\n        priceSource16 = get(configs, 16).priceSource;\\n        priceSource17 = get(configs, 17).priceSource;\\n        priceSource18 = get(configs, 18).priceSource;\\n        priceSource19 = get(configs, 19).priceSource;\\n        priceSource20 = get(configs, 20).priceSource;\\n        priceSource21 = get(configs, 21).priceSource;\\n        priceSource22 = get(configs, 22).priceSource;\\n        priceSource23 = get(configs, 23).priceSource;\\n        priceSource24 = get(configs, 24).priceSource;\\n        priceSource25 = get(configs, 25).priceSource;\\n        priceSource26 = get(configs, 26).priceSource;\\n        priceSource27 = get(configs, 27).priceSource;\\n        priceSource28 = get(configs, 28).priceSource;\\n        priceSource29 = get(configs, 29).priceSource;\\n\\n        fixedPrice00 = get(configs, 0).fixedPrice;\\n        fixedPrice01 = get(configs, 1).fixedPrice;\\n        fixedPrice02 = get(configs, 2).fixedPrice;\\n        fixedPrice03 = get(configs, 3).fixedPrice;\\n        fixedPrice04 = get(configs, 4).fixedPrice;\\n        fixedPrice05 = get(configs, 5).fixedPrice;\\n        fixedPrice06 = get(configs, 6).fixedPrice;\\n        fixedPrice07 = get(configs, 7).fixedPrice;\\n        fixedPrice08 = get(configs, 8).fixedPrice;\\n        fixedPrice09 = get(configs, 9).fixedPrice;\\n        fixedPrice10 = get(configs, 10).fixedPrice;\\n        fixedPrice11 = get(configs, 11).fixedPrice;\\n        fixedPrice12 = get(configs, 12).fixedPrice;\\n        fixedPrice13 = get(configs, 13).fixedPrice;\\n        fixedPrice14 = get(configs, 14).fixedPrice;\\n        fixedPrice15 = get(configs, 15).fixedPrice;\\n        fixedPrice16 = get(configs, 16).fixedPrice;\\n        fixedPrice17 = get(configs, 17).fixedPrice;\\n        fixedPrice18 = get(configs, 18).fixedPrice;\\n        fixedPrice19 = get(configs, 19).fixedPrice;\\n        fixedPrice20 = get(configs, 20).fixedPrice;\\n        fixedPrice21 = get(configs, 21).fixedPrice;\\n        fixedPrice22 = get(configs, 22).fixedPrice;\\n        fixedPrice23 = get(configs, 23).fixedPrice;\\n        fixedPrice24 = get(configs, 24).fixedPrice;\\n        fixedPrice25 = get(configs, 25).fixedPrice;\\n        fixedPrice26 = get(configs, 26).fixedPrice;\\n        fixedPrice27 = get(configs, 27).fixedPrice;\\n        fixedPrice28 = get(configs, 28).fixedPrice;\\n        fixedPrice29 = get(configs, 29).fixedPrice;\\n\\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\\n        uniswapMarket20 = get(configs, 20).uniswapMarket;\\n        uniswapMarket21 = get(configs, 21).uniswapMarket;\\n        uniswapMarket22 = get(configs, 22).uniswapMarket;\\n        uniswapMarket23 = get(configs, 23).uniswapMarket;\\n        uniswapMarket24 = get(configs, 24).uniswapMarket;\\n        uniswapMarket25 = get(configs, 25).uniswapMarket;\\n        uniswapMarket26 = get(configs, 26).uniswapMarket;\\n        uniswapMarket27 = get(configs, 27).uniswapMarket;\\n        uniswapMarket28 = get(configs, 28).uniswapMarket;\\n        uniswapMarket29 = get(configs, 29).uniswapMarket;\\n\\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\\n        isUniswapReversed20 = get(configs, 20).isUniswapReversed;\\n        isUniswapReversed21 = get(configs, 21).isUniswapReversed;\\n        isUniswapReversed22 = get(configs, 22).isUniswapReversed;\\n        isUniswapReversed23 = get(configs, 23).isUniswapReversed;\\n        isUniswapReversed24 = get(configs, 24).isUniswapReversed;\\n        isUniswapReversed25 = get(configs, 25).isUniswapReversed;\\n        isUniswapReversed26 = get(configs, 26).isUniswapReversed;\\n        isUniswapReversed27 = get(configs, 27).isUniswapReversed;\\n        isUniswapReversed28 = get(configs, 28).isUniswapReversed;\\n        isUniswapReversed29 = get(configs, 29).isUniswapReversed;\\n    }\\n\\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\\n        if (i < configs.length)\\n            return configs[i];\\n        return TokenConfig({\\n            cToken: address(0),\\n            underlying: address(0),\\n            symbolHash: bytes32(0),\\n            baseUnit: uint256(0),\\n            priceSource: PriceSource(0),\\n            fixedPrice: uint256(0),\\n            uniswapMarket: address(0),\\n            isUniswapReversed: false\\n        });\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        if (cToken == cToken00) return 0;\\n        if (cToken == cToken01) return 1;\\n        if (cToken == cToken02) return 2;\\n        if (cToken == cToken03) return 3;\\n        if (cToken == cToken04) return 4;\\n        if (cToken == cToken05) return 5;\\n        if (cToken == cToken06) return 6;\\n        if (cToken == cToken07) return 7;\\n        if (cToken == cToken08) return 8;\\n        if (cToken == cToken09) return 9;\\n        if (cToken == cToken10) return 10;\\n        if (cToken == cToken11) return 11;\\n        if (cToken == cToken12) return 12;\\n        if (cToken == cToken13) return 13;\\n        if (cToken == cToken14) return 14;\\n        if (cToken == cToken15) return 15;\\n        if (cToken == cToken16) return 16;\\n        if (cToken == cToken17) return 17;\\n        if (cToken == cToken18) return 18;\\n        if (cToken == cToken19) return 19;\\n        if (cToken == cToken20) return 20;\\n        if (cToken == cToken21) return 21;\\n        if (cToken == cToken22) return 22;\\n        if (cToken == cToken23) return 23;\\n        if (cToken == cToken24) return 24;\\n        if (cToken == cToken25) return 25;\\n        if (cToken == cToken26) return 26;\\n        if (cToken == cToken27) return 27;\\n        if (cToken == cToken28) return 28;\\n        if (cToken == cToken29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        if (underlying == underlying00) return 0;\\n        if (underlying == underlying01) return 1;\\n        if (underlying == underlying02) return 2;\\n        if (underlying == underlying03) return 3;\\n        if (underlying == underlying04) return 4;\\n        if (underlying == underlying05) return 5;\\n        if (underlying == underlying06) return 6;\\n        if (underlying == underlying07) return 7;\\n        if (underlying == underlying08) return 8;\\n        if (underlying == underlying09) return 9;\\n        if (underlying == underlying10) return 10;\\n        if (underlying == underlying11) return 11;\\n        if (underlying == underlying12) return 12;\\n        if (underlying == underlying13) return 13;\\n        if (underlying == underlying14) return 14;\\n        if (underlying == underlying15) return 15;\\n        if (underlying == underlying16) return 16;\\n        if (underlying == underlying17) return 17;\\n        if (underlying == underlying18) return 18;\\n        if (underlying == underlying19) return 19;\\n        if (underlying == underlying20) return 20;\\n        if (underlying == underlying21) return 21;\\n        if (underlying == underlying22) return 22;\\n        if (underlying == underlying23) return 23;\\n        if (underlying == underlying24) return 24;\\n        if (underlying == underlying25) return 25;\\n        if (underlying == underlying26) return 26;\\n        if (underlying == underlying27) return 27;\\n        if (underlying == underlying28) return 28;\\n        if (underlying == underlying29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        if (symbolHash == symbolHash00) return 0;\\n        if (symbolHash == symbolHash01) return 1;\\n        if (symbolHash == symbolHash02) return 2;\\n        if (symbolHash == symbolHash03) return 3;\\n        if (symbolHash == symbolHash04) return 4;\\n        if (symbolHash == symbolHash05) return 5;\\n        if (symbolHash == symbolHash06) return 6;\\n        if (symbolHash == symbolHash07) return 7;\\n        if (symbolHash == symbolHash08) return 8;\\n        if (symbolHash == symbolHash09) return 9;\\n        if (symbolHash == symbolHash10) return 10;\\n        if (symbolHash == symbolHash11) return 11;\\n        if (symbolHash == symbolHash12) return 12;\\n        if (symbolHash == symbolHash13) return 13;\\n        if (symbolHash == symbolHash14) return 14;\\n        if (symbolHash == symbolHash15) return 15;\\n        if (symbolHash == symbolHash16) return 16;\\n        if (symbolHash == symbolHash17) return 17;\\n        if (symbolHash == symbolHash18) return 18;\\n        if (symbolHash == symbolHash19) return 19;\\n        if (symbolHash == symbolHash20) return 20;\\n        if (symbolHash == symbolHash21) return 21;\\n        if (symbolHash == symbolHash22) return 22;\\n        if (symbolHash == symbolHash23) return 23;\\n        if (symbolHash == symbolHash24) return 24;\\n        if (symbolHash == symbolHash25) return 25;\\n        if (symbolHash == symbolHash26) return 26;\\n        if (symbolHash == symbolHash27) return 27;\\n        if (symbolHash == symbolHash28) return 28;\\n        if (symbolHash == symbolHash29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n\\n        if (i == 0) return TokenConfig({cToken: cToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, isUniswapReversed: isUniswapReversed00});\\n        if (i == 1) return TokenConfig({cToken: cToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, isUniswapReversed: isUniswapReversed01});\\n        if (i == 2) return TokenConfig({cToken: cToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, isUniswapReversed: isUniswapReversed02});\\n        if (i == 3) return TokenConfig({cToken: cToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, isUniswapReversed: isUniswapReversed03});\\n        if (i == 4) return TokenConfig({cToken: cToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, isUniswapReversed: isUniswapReversed04});\\n        if (i == 5) return TokenConfig({cToken: cToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, isUniswapReversed: isUniswapReversed05});\\n        if (i == 6) return TokenConfig({cToken: cToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, isUniswapReversed: isUniswapReversed06});\\n        if (i == 7) return TokenConfig({cToken: cToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, isUniswapReversed: isUniswapReversed07});\\n        if (i == 8) return TokenConfig({cToken: cToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, isUniswapReversed: isUniswapReversed08});\\n        if (i == 9) return TokenConfig({cToken: cToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, isUniswapReversed: isUniswapReversed09});\\n\\n        if (i == 10) return TokenConfig({cToken: cToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, isUniswapReversed: isUniswapReversed10});\\n        if (i == 11) return TokenConfig({cToken: cToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, isUniswapReversed: isUniswapReversed11});\\n        if (i == 12) return TokenConfig({cToken: cToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, isUniswapReversed: isUniswapReversed12});\\n        if (i == 13) return TokenConfig({cToken: cToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, isUniswapReversed: isUniswapReversed13});\\n        if (i == 14) return TokenConfig({cToken: cToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, isUniswapReversed: isUniswapReversed14});\\n        if (i == 15) return TokenConfig({cToken: cToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, isUniswapReversed: isUniswapReversed15});\\n        if (i == 16) return TokenConfig({cToken: cToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, isUniswapReversed: isUniswapReversed16});\\n        if (i == 17) return TokenConfig({cToken: cToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, isUniswapReversed: isUniswapReversed17});\\n        if (i == 18) return TokenConfig({cToken: cToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, isUniswapReversed: isUniswapReversed18});\\n        if (i == 19) return TokenConfig({cToken: cToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, isUniswapReversed: isUniswapReversed19});\\n\\n        if (i == 20) return TokenConfig({cToken: cToken20, underlying: underlying20, symbolHash: symbolHash20, baseUnit: baseUnit20, priceSource: priceSource20, fixedPrice: fixedPrice20, uniswapMarket: uniswapMarket20, isUniswapReversed: isUniswapReversed20});\\n        if (i == 21) return TokenConfig({cToken: cToken21, underlying: underlying21, symbolHash: symbolHash21, baseUnit: baseUnit21, priceSource: priceSource21, fixedPrice: fixedPrice21, uniswapMarket: uniswapMarket21, isUniswapReversed: isUniswapReversed21});\\n        if (i == 22) return TokenConfig({cToken: cToken22, underlying: underlying22, symbolHash: symbolHash22, baseUnit: baseUnit22, priceSource: priceSource22, fixedPrice: fixedPrice22, uniswapMarket: uniswapMarket22, isUniswapReversed: isUniswapReversed22});\\n        if (i == 23) return TokenConfig({cToken: cToken23, underlying: underlying23, symbolHash: symbolHash23, baseUnit: baseUnit23, priceSource: priceSource23, fixedPrice: fixedPrice23, uniswapMarket: uniswapMarket23, isUniswapReversed: isUniswapReversed23});\\n        if (i == 24) return TokenConfig({cToken: cToken24, underlying: underlying24, symbolHash: symbolHash24, baseUnit: baseUnit24, priceSource: priceSource24, fixedPrice: fixedPrice24, uniswapMarket: uniswapMarket24, isUniswapReversed: isUniswapReversed24});\\n        if (i == 25) return TokenConfig({cToken: cToken25, underlying: underlying25, symbolHash: symbolHash25, baseUnit: baseUnit25, priceSource: priceSource25, fixedPrice: fixedPrice25, uniswapMarket: uniswapMarket25, isUniswapReversed: isUniswapReversed25});\\n        if (i == 26) return TokenConfig({cToken: cToken26, underlying: underlying26, symbolHash: symbolHash26, baseUnit: baseUnit26, priceSource: priceSource26, fixedPrice: fixedPrice26, uniswapMarket: uniswapMarket26, isUniswapReversed: isUniswapReversed26});\\n        if (i == 27) return TokenConfig({cToken: cToken27, underlying: underlying27, symbolHash: symbolHash27, baseUnit: baseUnit27, priceSource: priceSource27, fixedPrice: fixedPrice27, uniswapMarket: uniswapMarket27, isUniswapReversed: isUniswapReversed27});\\n        if (i == 28) return TokenConfig({cToken: cToken28, underlying: underlying28, symbolHash: symbolHash28, baseUnit: baseUnit28, priceSource: priceSource28, fixedPrice: fixedPrice28, uniswapMarket: uniswapMarket28, isUniswapReversed: isUniswapReversed28});\\n        if (i == 29) return TokenConfig({cToken: cToken29, underlying: underlying29, symbolHash: symbolHash29, baseUnit: baseUnit29, priceSource: priceSource29, fixedPrice: fixedPrice29, uniswapMarket: uniswapMarket29, isUniswapReversed: isUniswapReversed29});\\n    }\\n\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\",\"keccak256\":\"0x5805b1637a0bdeb482b469313e7000c8655a501f3456753e9ea7515634f15afc\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/Uniswap/UniswapLib.sol:FixedPoint":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220415877ee9b02f5562e7a72de123f3ddea616f32d1586ebf43b76f1ee0086aaa864736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"FixedPoint\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534816;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4031dd655d8e82c7fbf327e936292929a624af1f11565807b6c5704c410a3852\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/Uniswap/UniswapLib.sol:IUniswapV2Pair":{"abi":"[{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"IUniswapV2Pair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534816;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4031dd655d8e82c7fbf327e936292929a624af1f11565807b6c5704c410a3852\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"contracts/Uniswap/UniswapLib.sol:UniswapV2OracleLibrary":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e8aa586217fd26038ade89bbb9adaed8301745e790e40db19851d16c6541fd7264736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Uniswap/UniswapLib.sol\":\"UniswapV2OracleLibrary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534816;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4031dd655d8e82c7fbf327e936292929a624af1f11565807b6c5704c410a3852\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"tests/contracts/MockUniswapAnchoredView.sol:MockUniswapAnchoredView":{"abi":"[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nowCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"priceData_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reporter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"anchorToleranceMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"anchorPeriod_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig[]\",\"name\":\"configs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchorPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nowCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCumulativePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"}],\"name\":\"AnchorPriceUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reporter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"anchor\",\"type\":\"uint256\"}],\"name\":\"PriceGuarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reporter\",\"type\":\"address\"}],\"name\":\"ReporterInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UniswapWindowUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"anchorPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"anchorPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethBaseUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getTokenConfigByCToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"getTokenConfigBySymbol\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"}],\"name\":\"getTokenConfigBySymbolHash\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getTokenConfigByUnderlying\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"symbolHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"baseUnit\",\"type\":\"uint256\"},{\"internalType\":\"enum UniswapConfig.PriceSource\",\"name\":\"priceSource\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fixedPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"uniswapMarket\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isUniswapReversed\",\"type\":\"bool\"}],\"internalType\":\"struct UniswapConfig.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"invalidateReporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"newObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oldObservations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acc\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"messages\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"symbols\",\"type\":\"string[]\"}],\"name\":\"postPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceData\",\"outputs\":[{\"internalType\":\"contract OpenOraclePriceData\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reporterInvalidated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAnchorPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"source\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBoundAnchorRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getUnderlyingPrice(address)\":{\"details\":\"Implements the PriceOracle interface for Compound v2.\",\"params\":{\"cToken\":\"The cToken address for price retrieval\"},\"returns\":{\"_0\":\"The price for the given cToken address\"}},\"invalidateReporter(bytes,bytes)\":{\"details\":\"Only the reporter may sign a message which allows it to invalidate itself.  To be used in cases of emergency, if the reporter thinks their key may be compromised.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"}},\"postPrices(bytes[],bytes[],string[])\":{\"details\":\"We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\",\"params\":{\"messages\":\"The messages to post to the oracle\",\"signatures\":\"The signatures for the corresponding messages\",\"symbols\":\"The symbols to compare to anchor for authoritative reading\"}},\"price(string)\":{\"params\":{\"symbol\":\"The symbol to fetch the price of\"},\"returns\":{\"_0\":\"Price denominated in USD, with 6 decimals\"}},\"source(bytes,bytes)\":{\"details\":\"Comparing to a claimed address would add nothing,  as the caller could simply perform the recover and claim that address.\",\"params\":{\"message\":\"The data that was presumably signed\",\"signature\":\"The fingerprint of the data + private key\"},\"returns\":{\"_0\":\"The source address which signed the message, presumably\"}}}},\"userdoc\":{\"methods\":{\"anchorPeriod()\":{\"notice\":\"The minimum amount of time required for the old uniswap price accumulator to be replaced\"},\"ethBaseUnit()\":{\"notice\":\"the number of wei in 1 ETH\"},\"expScale()\":{\"notice\":\"a common scaling factor to maintain precision\"},\"getUnderlyingPrice(address)\":{\"notice\":\"Get the underlying price of a cToken\"},\"invalidateReporter(bytes,bytes)\":{\"notice\":\"Invalidate the reporter, and fall back to using anchor directly in all cases\"},\"lowerBoundAnchorRatio()\":{\"notice\":\"The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"},\"newObservations(address)\":{\"notice\":\"The new observation for each uniswap market\"},\"oldObservations(address)\":{\"notice\":\"The old observation for each uniswap market\"},\"postPrices(bytes[],bytes[],string[])\":{\"notice\":\"Post open oracle reporter prices, and recalculate stored price by comparing to anchor\"},\"price(string)\":{\"notice\":\"Get the official price for a symbol\"},\"priceData()\":{\"notice\":\"The Open Oracle Price Data contract\"},\"prices(bytes32)\":{\"notice\":\"Official prices by symbol hash\"},\"reporter()\":{\"notice\":\"the Open Oracle Reporter\"},\"reporterInvalidated()\":{\"notice\":\"Circuit breaker for using anchor price oracle directly, ignoring reporter\"},\"source(bytes,bytes)\":{\"notice\":\"Recovers the source address which signed a message\"},\"upperBoundAnchorRatio()\":{\"notice\":\"The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\"}}}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapAnchoredView.sol\":\"MockUniswapAnchoredView\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OpenOracleData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title The Open Oracle Data Base Contract\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOracleData {\\n    /**\\n     * @notice The event emitted when a source writes to its storage\\n     */\\n    //event Write(address indexed source, <Key> indexed key, string kind, uint64 timestamp, <Value> value);\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    //function put(bytes calldata message, bytes calldata signature) external returns (<Key> memory);\\n\\n    /**\\n     * @notice Read a single key with a pre-defined type signature from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the encoded value (defaults to (0, 0x))\\n     */\\n    //function get(address source, <Key> key) external view returns (uint, <Value>);\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xce1c5e0af5d2642d2b35559b5ca24c1ad0bcf08ffb7dfd92b0f2121b5b3d4faa\",\"license\":\"GPL-3.0\"},\"contracts/OpenOraclePriceData.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\nimport \\\"./OpenOracleData.sol\\\";\\n\\n/**\\n * @title The Open Oracle Price Data Contract\\n * @notice Values stored in this contract should represent a USD price with 6 decimals precision\\n * @author Compound Labs, Inc.\\n */\\ncontract OpenOraclePriceData is OpenOracleData {\\n    ///@notice The event emitted when a source writes to its storage\\n    event Write(address indexed source, string key, uint64 timestamp, uint64 value);\\n    ///@notice The event emitted when the timestamp on a price is invalid and it is not written to storage\\n    event NotWritten(uint64 priorTimestamp, uint256 messageTimestamp, uint256 blockTimestamp);\\n\\n    ///@notice The fundamental unit of storage for a reporter source\\n    struct Datum {\\n        uint64 timestamp;\\n        uint64 value;\\n    }\\n\\n    /**\\n     * @dev The most recent authenticated data from all sources.\\n     *  This is private because dynamic mapping keys preclude auto-generated getters.\\n     */\\n    mapping(address => mapping(string => Datum)) private data;\\n\\n    /**\\n     * @notice Write a bunch of signed datum to the authenticated storage mapping\\n     * @param message The payload containing the timestamp, and (key, value) pairs\\n     * @param signature The cryptographic signature of the message payload, authorizing the source to write\\n     * @return The keys that were written\\n     */\\n    function put(bytes calldata message, bytes calldata signature) external returns (string memory) {\\n        // Recover the source address\\n        address source = source(message, signature);\\n\\n        // Decode the message and check the kind\\n        (string memory kind, uint64 timestamp, string memory key, uint64 value) = abi.decode(message, (string, uint64, string, uint64));\\n        require(keccak256(abi.encodePacked(kind)) == keccak256(abi.encodePacked(\\\"prices\\\")), \\\"Kind of data must be 'prices'\\\");\\n\\n        // Only update if newer than stored, according to source\\n        Datum storage prior = data[source][key];\\n        if (timestamp > prior.timestamp && timestamp < block.timestamp + 60 minutes && source != address(0)) {\\n            data[source][key] = Datum(timestamp, value);\\n            emit Write(source, key, timestamp, value);\\n        } else {\\n            emit NotWritten(prior.timestamp, timestamp, block.timestamp);\\n        }\\n\\n        return key;\\n    }\\n\\n    /**\\n     * @notice Read a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The claimed Unix timestamp for the data and the price value (defaults to (0, 0))\\n     */\\n    function get(address source, string calldata key) external view returns (uint64, uint64) {\\n        Datum storage datum = data[source][key];\\n        return (datum.timestamp, datum.value);\\n    }\\n\\n    /**\\n     * @notice Read only the value for a single key from an authenticated source\\n     * @param source The verifiable author of the data\\n     * @param key The selector for the value to return\\n     * @return The price value (defaults to 0)\\n     */\\n    function getPrice(address source, string calldata key) external view returns (uint64) {\\n        return data[source][key].value;\\n    }\\n}\\n\",\"keccak256\":\"0x9429fbfc82572ea5c7ec6d5a56d4670fc5154dc87c49695738ee8b302b94bdc0\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../OpenOraclePriceData.sol\\\";\\nimport \\\"./UniswapConfig.sol\\\";\\nimport \\\"./UniswapLib.sol\\\";\\n\\nstruct Observation {\\n    uint timestamp;\\n    uint acc;\\n}\\n\\ncontract UniswapAnchoredView is UniswapConfig {\\n    using FixedPoint for *;\\n\\n    /// @notice The Open Oracle Price Data contract\\n    OpenOraclePriceData public immutable priceData;\\n\\n    /// @notice the number of wei in 1 ETH\\n    uint public constant ethBaseUnit = 1e18;\\n\\n    /// @notice a common scaling factor to maintain precision\\n    uint public constant expScale = 1e18;\\n\\n    /// @notice the Open Oracle Reporter\\n    address public immutable reporter;\\n\\n    /// @notice The highest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint public immutable upperBoundAnchorRatio;\\n\\n    /// @notice The lowest ratio of the new median price to the anchor price that will still trigger the median price to be updated\\n    uint public immutable lowerBoundAnchorRatio;\\n\\n    /// @notice The minimum amount of time required for the old uniswap price accumulator to be replaced\\n    uint public immutable anchorPeriod;\\n\\n    /// @notice Official prices by symbol hash\\n    mapping(bytes32 => uint) public prices;\\n\\n    /// @notice Circuit breaker for using anchor price oracle directly, ignoring reporter\\n    bool public reporterInvalidated;\\n\\n    /// @notice The old observation for each uniswap market\\n    mapping(address => Observation) public oldObservations;\\n    /// @notice The new observation for each uniswap market\\n    mapping(address => Observation) public newObservations;\\n\\n    /// @notice The event emitted when the stored price is updated\\n    event PriceUpdated(string symbol, uint price);\\n\\n    /// @notice The event emitted when new prices are posted but the stored price is not updated due to the anchor\\n    event PriceGuarded(string symbol, uint reporter, uint anchor);\\n\\n    /// @notice The event emitted when reporter invalidates itself\\n    event ReporterInvalidated(address reporter);\\n\\n    /// @notice The event emitted when the uniswap window changes\\n    event UniswapWindowUpdate(address indexed uniswapMarket, uint oldTimestamp, uint newTimestamp, uint oldPrice, uint newPrice);\\n\\n    /// @notice The event emitted when anchor price is updated\\n    event AnchorPriceUpdate(address indexed uniswapMarket, uint anchorPrice, uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp);\\n\\n    bytes32 constant ethHash = keccak256(abi.encodePacked(\\\"ETH\\\"));\\n    bytes32 constant rotateHash = keccak256(abi.encodePacked(\\\"rotate\\\"));\\n\\n    /**\\n     * @notice Construct a uniswap anchored view for a set of token configurations\\n     * @param reporter_ The reporter whose prices are to be used\\n     * @param anchorToleranceMantissa_ The percentage tolerance that the reporter may deviate from the uniswap anchor\\n     * @param anchorPeriod_ The minimum amount of time required for the old uniswap price accumulator to be replaced\\n     */\\n    constructor(OpenOraclePriceData priceData_,\\n                address reporter_,\\n                uint anchorToleranceMantissa_,\\n                uint anchorPeriod_,\\n                TokenConfig[] memory configs) UniswapConfig(configs) public {\\n        priceData = priceData_;\\n        reporter = reporter_;\\n        anchorPeriod = anchorPeriod_;\\n\\n        require(anchorToleranceMantissa_ < 100e16, \\\"anchor tolerance is too high\\\");\\n        upperBoundAnchorRatio = 100e16 + anchorToleranceMantissa_;\\n        lowerBoundAnchorRatio = 100e16 - anchorToleranceMantissa_;\\n\\n        for (uint i = 0; i < configs.length; i++) {\\n            TokenConfig memory config = configs[i];\\n            address uniswapMarket = config.uniswapMarket;\\n            if (config.priceSource == PriceSource.REPORTER) {\\n                require(uniswapMarket != address(0), \\\"reported prices must have an anchor\\\");\\n                uint cumulativePrice = currentCumulativePrice(config);\\n                oldObservations[uniswapMarket].timestamp = block.timestamp;\\n                newObservations[uniswapMarket].timestamp = block.timestamp;\\n                oldObservations[uniswapMarket].acc = cumulativePrice;\\n                newObservations[uniswapMarket].acc = cumulativePrice;\\n            } else {\\n                require(uniswapMarket == address(0), \\\"only reported prices utilize an anchor\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the official price for a symbol\\n     * @param symbol The symbol to fetch the price of\\n     * @return Price denominated in USD, with 6 decimals\\n     */\\n    function price(string memory symbol) public view returns (uint) {\\n        TokenConfig memory config = getTokenConfigBySymbol(symbol);\\n        return priceInternal(config);\\n    }\\n\\n    function priceInternal(TokenConfig memory config) internal view returns (uint) {\\n        if (config.priceSource == PriceSource.REPORTER) return prices[config.symbolHash];\\n        if (config.priceSource == PriceSource.FIXED_USD) return config.fixedPrice;\\n        if (config.priceSource == PriceSource.FIXED_ETH) {\\n            uint usdPerEth = prices[ethHash];\\n            require(usdPerEth > 0, \\\"ETH price not set, cannot convert to dollars\\\");\\n            return mul(usdPerEth, config.fixedPrice) / ethBaseUnit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the underlying price of a cToken\\n     * @dev Implements the PriceOracle interface for Compound v2.\\n     * @param cToken The cToken address for price retrieval\\n     * @return The price for the given cToken address\\n     */\\n    function getUnderlyingPrice(address cToken) public view returns (uint) {\\n        TokenConfig memory config = getTokenConfigByCToken(cToken);\\n         // Comptroller needs prices in the format: ${raw price} * 1e(36 - baseUnit)\\n         // Since the prices in this view have 6 decimals, we must scale them by 1e(36 - 6 - baseUnit)\\n        return mul(1e30, priceInternal(config)) / config.baseUnit;\\n    }\\n\\n    /**\\n     * @notice Post open oracle reporter prices, and recalculate stored price by comparing to anchor\\n     * @dev We let anyone pay to post anything, but only prices from configured reporter will be stored in the view.\\n     * @param messages The messages to post to the oracle\\n     * @param signatures The signatures for the corresponding messages\\n     * @param symbols The symbols to compare to anchor for authoritative reading\\n     */\\n    function postPrices(bytes[] calldata messages, bytes[] calldata signatures, string[] calldata symbols) external {\\n        require(messages.length == signatures.length, \\\"messages and signatures must be 1:1\\\");\\n\\n        // Save the prices\\n        for (uint i = 0; i < messages.length; i++) {\\n            priceData.put(messages[i], signatures[i]);\\n        }\\n\\n        uint ethPrice = fetchEthPrice();\\n\\n        // Try to update the view storage\\n        for (uint i = 0; i < symbols.length; i++) {\\n            TokenConfig memory config = getTokenConfigBySymbol(symbols[i]);\\n            string memory symbol = symbols[i];\\n            bytes32 symbolHash = keccak256(abi.encodePacked(symbol));\\n\\n            uint reporterPrice = priceData.getPrice(reporter, symbol);\\n            uint anchorPrice;\\n            if (symbolHash == ethHash) {\\n                anchorPrice = ethPrice;\\n            } else {\\n                anchorPrice = fetchAnchorPrice(config, ethPrice);\\n            }\\n\\n            if (reporterInvalidated == true) {\\n                prices[symbolHash] = anchorPrice;\\n                emit PriceUpdated(symbol, anchorPrice);\\n            } else if (isWithinAnchor(reporterPrice, anchorPrice)) {\\n                prices[symbolHash] = reporterPrice;\\n                emit PriceUpdated(symbol, reporterPrice);\\n            } else {\\n                emit PriceGuarded(symbol, reporterPrice, anchorPrice);\\n            }\\n        }\\n    }\\n\\n    function isWithinAnchor(uint reporterPrice, uint anchorPrice) internal view returns (bool) {\\n        if (reporterPrice > 0) {\\n            uint anchorRatio = mul(anchorPrice, 100e16) / reporterPrice;\\n            return anchorRatio <= upperBoundAnchorRatio && anchorRatio >= lowerBoundAnchorRatio;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/eth price accumulator from uniswap.\\n     */\\n    function currentCumulativePrice(TokenConfig memory config) internal view returns (uint) {\\n        (uint cumulativePrice0, uint cumulativePrice1,) = UniswapV2OracleLibrary.currentCumulativePrices(config.uniswapMarket);\\n        if (config.isUniswapReversed) {\\n            return cumulativePrice1;\\n        } else {\\n            return cumulativePrice0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fetches the current eth/usd price from unsiwap, with 6 decimals of precision.\\n     *  Conversion factor is 1e18 for eth/usdc market, since we decode uniswap price statically with 18 decimals.\\n     */\\n    function fetchEthPrice() internal returns (uint) {\\n        return fetchAnchorPrice(getTokenConfigBySymbolHash(ethHash), ethBaseUnit);\\n    }\\n\\n    /**\\n     * @dev Fetches the current token/usd price from uniswap, with 6 decimals of precision.\\n     * @param conversionFactor 1e18 if seeking the ETH price, and a 6 decimal ETH-USDC price in the case of other assets\\n     */\\n    function fetchAnchorPrice(TokenConfig memory config, uint conversionFactor) internal virtual returns (uint) {\\n        (uint nowCumulativePrice, uint oldCumulativePrice, uint oldTimestamp) = pokeWindowValues(config);\\n\\n        // This should be impossible, but better safe than sorry\\n        require(block.timestamp > oldTimestamp, \\\"now must come after before\\\");\\n        uint timeElapsed = block.timestamp - oldTimestamp;\\n\\n        // Calculate uniswap time-weighted average price\\n        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(uint224((nowCumulativePrice - oldCumulativePrice) / timeElapsed));\\n        uint rawUniswapPriceMantissa = mul(priceAverage.decode112with18(), conversionFactor);\\n        uint anchorPrice;\\n\\n        // Adjust rawUniswapPrice according to the units of the non-ETH asset\\n        // In the case of ETH, we would have to scale by 1e6 / USDC_UNITS, but since baseUnit2 is 1e6 (USDC), it cancels\\n        if (config.isUniswapReversed) {\\n            // rawUniswapPriceMantissa * ethBaseUnit / config.baseUnit / expScale, but we simplify bc ethBaseUnit == expScale\\n            anchorPrice = rawUniswapPriceMantissa / config.baseUnit;\\n        } else {\\n            anchorPrice = mul(rawUniswapPriceMantissa, config.baseUnit) / ethBaseUnit / expScale;\\n        }\\n\\n        emit AnchorPriceUpdate(config.uniswapMarket, anchorPrice, nowCumulativePrice, oldCumulativePrice, oldTimestamp);\\n\\n        return anchorPrice;\\n    }\\n\\n    /**\\n     * @dev Get time-weighted average prices for a token at the current timestamp.\\n     *  Update new and old observations of lagging window if period elapsed.\\n     */\\n    function pokeWindowValues(TokenConfig memory config) internal returns (uint, uint, uint) {\\n        address uniswapMarket = config.uniswapMarket;\\n        uint cumulativePrice = currentCumulativePrice(config);\\n\\n        Observation memory newObservation = newObservations[uniswapMarket];\\n\\n        // Update new and old observations if elapsed time is greater than or equal to anchor period\\n        uint timeElapsed = block.timestamp - newObservation.timestamp;\\n        if (timeElapsed >= anchorPeriod) {\\n            oldObservations[uniswapMarket].timestamp = newObservation.timestamp;\\n            oldObservations[uniswapMarket].acc = newObservation.acc;\\n\\n            newObservations[uniswapMarket].timestamp = block.timestamp;\\n            newObservations[uniswapMarket].acc = cumulativePrice;\\n            emit UniswapWindowUpdate(uniswapMarket, newObservation.timestamp, block.timestamp, newObservation.acc, cumulativePrice);\\n        }\\n        return (cumulativePrice, oldObservations[uniswapMarket].acc, oldObservations[uniswapMarket].timestamp);\\n    }\\n\\n    /**\\n     * @notice Invalidate the reporter, and fall back to using anchor directly in all cases\\n     * @dev Only the reporter may sign a message which allows it to invalidate itself.\\n     *  To be used in cases of emergency, if the reporter thinks their key may be compromised.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     */\\n    function invalidateReporter(bytes memory message, bytes memory signature) external {\\n        (string memory decoded_message, ) = abi.decode(message, (string, address));\\n        require(keccak256(abi.encodePacked(decoded_message)) == rotateHash, \\\"invalid message must be 'rotate'\\\");\\n        require(source(message, signature) == reporter, \\\"invalidation message must come from the reporter\\\");\\n        reporterInvalidated = true;\\n        emit ReporterInvalidated(reporter);\\n    }\\n\\n    /**\\n     * @notice Recovers the source address which signed a message\\n     * @dev Comparing to a claimed address would add nothing,\\n     *  as the caller could simply perform the recover and claim that address.\\n     * @param message The data that was presumably signed\\n     * @param signature The fingerprint of the data + private key\\n     * @return The source address which signed the message, presumably\\n     */\\n    function source(bytes memory message, bytes memory signature) public pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = abi.decode(signature, (bytes32, bytes32, uint8));\\n        bytes32 hash = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", keccak256(message)));\\n        return ecrecover(hash, v, r, s);\\n    }\\n\\n    /// @dev Overflow proof multiplication\\n    function mul(uint a, uint b) internal pure returns (uint) {\\n        if (a == 0) return 0;\\n        uint c = a * b;\\n        require(c / a == b, \\\"multiplication overflow\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x4e3a1d06c48b55cb1e1071be3f09793e6107dbdca9eed8271d388364cdd53812\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ninterface CErc20 {\\n    function underlying() external view returns (address);\\n}\\n\\ncontract UniswapConfig {\\n    enum PriceSource {FIXED_ETH, FIXED_USD, REPORTER}\\n    struct TokenConfig {\\n        address cToken;\\n        address underlying;\\n        bytes32 symbolHash;\\n        uint256 baseUnit;\\n        PriceSource priceSource;\\n        uint256 fixedPrice;\\n        address uniswapMarket;\\n        bool isUniswapReversed;\\n    }\\n\\n    uint public constant maxTokens = 30;\\n    uint public immutable numTokens;\\n\\n    address internal immutable cToken00;\\n    address internal immutable cToken01;\\n    address internal immutable cToken02;\\n    address internal immutable cToken03;\\n    address internal immutable cToken04;\\n    address internal immutable cToken05;\\n    address internal immutable cToken06;\\n    address internal immutable cToken07;\\n    address internal immutable cToken08;\\n    address internal immutable cToken09;\\n    address internal immutable cToken10;\\n    address internal immutable cToken11;\\n    address internal immutable cToken12;\\n    address internal immutable cToken13;\\n    address internal immutable cToken14;\\n    address internal immutable cToken15;\\n    address internal immutable cToken16;\\n    address internal immutable cToken17;\\n    address internal immutable cToken18;\\n    address internal immutable cToken19;\\n    address internal immutable cToken20;\\n    address internal immutable cToken21;\\n    address internal immutable cToken22;\\n    address internal immutable cToken23;\\n    address internal immutable cToken24;\\n    address internal immutable cToken25;\\n    address internal immutable cToken26;\\n    address internal immutable cToken27;\\n    address internal immutable cToken28;\\n    address internal immutable cToken29;\\n\\n    address internal immutable underlying00;\\n    address internal immutable underlying01;\\n    address internal immutable underlying02;\\n    address internal immutable underlying03;\\n    address internal immutable underlying04;\\n    address internal immutable underlying05;\\n    address internal immutable underlying06;\\n    address internal immutable underlying07;\\n    address internal immutable underlying08;\\n    address internal immutable underlying09;\\n    address internal immutable underlying10;\\n    address internal immutable underlying11;\\n    address internal immutable underlying12;\\n    address internal immutable underlying13;\\n    address internal immutable underlying14;\\n    address internal immutable underlying15;\\n    address internal immutable underlying16;\\n    address internal immutable underlying17;\\n    address internal immutable underlying18;\\n    address internal immutable underlying19;\\n    address internal immutable underlying20;\\n    address internal immutable underlying21;\\n    address internal immutable underlying22;\\n    address internal immutable underlying23;\\n    address internal immutable underlying24;\\n    address internal immutable underlying25;\\n    address internal immutable underlying26;\\n    address internal immutable underlying27;\\n    address internal immutable underlying28;\\n    address internal immutable underlying29;\\n\\n    bytes32 internal immutable symbolHash00;\\n    bytes32 internal immutable symbolHash01;\\n    bytes32 internal immutable symbolHash02;\\n    bytes32 internal immutable symbolHash03;\\n    bytes32 internal immutable symbolHash04;\\n    bytes32 internal immutable symbolHash05;\\n    bytes32 internal immutable symbolHash06;\\n    bytes32 internal immutable symbolHash07;\\n    bytes32 internal immutable symbolHash08;\\n    bytes32 internal immutable symbolHash09;\\n    bytes32 internal immutable symbolHash10;\\n    bytes32 internal immutable symbolHash11;\\n    bytes32 internal immutable symbolHash12;\\n    bytes32 internal immutable symbolHash13;\\n    bytes32 internal immutable symbolHash14;\\n    bytes32 internal immutable symbolHash15;\\n    bytes32 internal immutable symbolHash16;\\n    bytes32 internal immutable symbolHash17;\\n    bytes32 internal immutable symbolHash18;\\n    bytes32 internal immutable symbolHash19;\\n    bytes32 internal immutable symbolHash20;\\n    bytes32 internal immutable symbolHash21;\\n    bytes32 internal immutable symbolHash22;\\n    bytes32 internal immutable symbolHash23;\\n    bytes32 internal immutable symbolHash24;\\n    bytes32 internal immutable symbolHash25;\\n    bytes32 internal immutable symbolHash26;\\n    bytes32 internal immutable symbolHash27;\\n    bytes32 internal immutable symbolHash28;\\n    bytes32 internal immutable symbolHash29;\\n\\n    uint256 internal immutable baseUnit00;\\n    uint256 internal immutable baseUnit01;\\n    uint256 internal immutable baseUnit02;\\n    uint256 internal immutable baseUnit03;\\n    uint256 internal immutable baseUnit04;\\n    uint256 internal immutable baseUnit05;\\n    uint256 internal immutable baseUnit06;\\n    uint256 internal immutable baseUnit07;\\n    uint256 internal immutable baseUnit08;\\n    uint256 internal immutable baseUnit09;\\n    uint256 internal immutable baseUnit10;\\n    uint256 internal immutable baseUnit11;\\n    uint256 internal immutable baseUnit12;\\n    uint256 internal immutable baseUnit13;\\n    uint256 internal immutable baseUnit14;\\n    uint256 internal immutable baseUnit15;\\n    uint256 internal immutable baseUnit16;\\n    uint256 internal immutable baseUnit17;\\n    uint256 internal immutable baseUnit18;\\n    uint256 internal immutable baseUnit19;\\n    uint256 internal immutable baseUnit20;\\n    uint256 internal immutable baseUnit21;\\n    uint256 internal immutable baseUnit22;\\n    uint256 internal immutable baseUnit23;\\n    uint256 internal immutable baseUnit24;\\n    uint256 internal immutable baseUnit25;\\n    uint256 internal immutable baseUnit26;\\n    uint256 internal immutable baseUnit27;\\n    uint256 internal immutable baseUnit28;\\n    uint256 internal immutable baseUnit29;\\n\\n    PriceSource internal immutable priceSource00;\\n    PriceSource internal immutable priceSource01;\\n    PriceSource internal immutable priceSource02;\\n    PriceSource internal immutable priceSource03;\\n    PriceSource internal immutable priceSource04;\\n    PriceSource internal immutable priceSource05;\\n    PriceSource internal immutable priceSource06;\\n    PriceSource internal immutable priceSource07;\\n    PriceSource internal immutable priceSource08;\\n    PriceSource internal immutable priceSource09;\\n    PriceSource internal immutable priceSource10;\\n    PriceSource internal immutable priceSource11;\\n    PriceSource internal immutable priceSource12;\\n    PriceSource internal immutable priceSource13;\\n    PriceSource internal immutable priceSource14;\\n    PriceSource internal immutable priceSource15;\\n    PriceSource internal immutable priceSource16;\\n    PriceSource internal immutable priceSource17;\\n    PriceSource internal immutable priceSource18;\\n    PriceSource internal immutable priceSource19;\\n    PriceSource internal immutable priceSource20;\\n    PriceSource internal immutable priceSource21;\\n    PriceSource internal immutable priceSource22;\\n    PriceSource internal immutable priceSource23;\\n    PriceSource internal immutable priceSource24;\\n    PriceSource internal immutable priceSource25;\\n    PriceSource internal immutable priceSource26;\\n    PriceSource internal immutable priceSource27;\\n    PriceSource internal immutable priceSource28;\\n    PriceSource internal immutable priceSource29;\\n\\n    uint256 internal immutable fixedPrice00;\\n    uint256 internal immutable fixedPrice01;\\n    uint256 internal immutable fixedPrice02;\\n    uint256 internal immutable fixedPrice03;\\n    uint256 internal immutable fixedPrice04;\\n    uint256 internal immutable fixedPrice05;\\n    uint256 internal immutable fixedPrice06;\\n    uint256 internal immutable fixedPrice07;\\n    uint256 internal immutable fixedPrice08;\\n    uint256 internal immutable fixedPrice09;\\n    uint256 internal immutable fixedPrice10;\\n    uint256 internal immutable fixedPrice11;\\n    uint256 internal immutable fixedPrice12;\\n    uint256 internal immutable fixedPrice13;\\n    uint256 internal immutable fixedPrice14;\\n    uint256 internal immutable fixedPrice15;\\n    uint256 internal immutable fixedPrice16;\\n    uint256 internal immutable fixedPrice17;\\n    uint256 internal immutable fixedPrice18;\\n    uint256 internal immutable fixedPrice19;\\n    uint256 internal immutable fixedPrice20;\\n    uint256 internal immutable fixedPrice21;\\n    uint256 internal immutable fixedPrice22;\\n    uint256 internal immutable fixedPrice23;\\n    uint256 internal immutable fixedPrice24;\\n    uint256 internal immutable fixedPrice25;\\n    uint256 internal immutable fixedPrice26;\\n    uint256 internal immutable fixedPrice27;\\n    uint256 internal immutable fixedPrice28;\\n    uint256 internal immutable fixedPrice29;\\n\\n    address internal immutable uniswapMarket00;\\n    address internal immutable uniswapMarket01;\\n    address internal immutable uniswapMarket02;\\n    address internal immutable uniswapMarket03;\\n    address internal immutable uniswapMarket04;\\n    address internal immutable uniswapMarket05;\\n    address internal immutable uniswapMarket06;\\n    address internal immutable uniswapMarket07;\\n    address internal immutable uniswapMarket08;\\n    address internal immutable uniswapMarket09;\\n    address internal immutable uniswapMarket10;\\n    address internal immutable uniswapMarket11;\\n    address internal immutable uniswapMarket12;\\n    address internal immutable uniswapMarket13;\\n    address internal immutable uniswapMarket14;\\n    address internal immutable uniswapMarket15;\\n    address internal immutable uniswapMarket16;\\n    address internal immutable uniswapMarket17;\\n    address internal immutable uniswapMarket18;\\n    address internal immutable uniswapMarket19;\\n    address internal immutable uniswapMarket20;\\n    address internal immutable uniswapMarket21;\\n    address internal immutable uniswapMarket22;\\n    address internal immutable uniswapMarket23;\\n    address internal immutable uniswapMarket24;\\n    address internal immutable uniswapMarket25;\\n    address internal immutable uniswapMarket26;\\n    address internal immutable uniswapMarket27;\\n    address internal immutable uniswapMarket28;\\n    address internal immutable uniswapMarket29;\\n\\n    bool internal immutable isUniswapReversed00;\\n    bool internal immutable isUniswapReversed01;\\n    bool internal immutable isUniswapReversed02;\\n    bool internal immutable isUniswapReversed03;\\n    bool internal immutable isUniswapReversed04;\\n    bool internal immutable isUniswapReversed05;\\n    bool internal immutable isUniswapReversed06;\\n    bool internal immutable isUniswapReversed07;\\n    bool internal immutable isUniswapReversed08;\\n    bool internal immutable isUniswapReversed09;\\n    bool internal immutable isUniswapReversed10;\\n    bool internal immutable isUniswapReversed11;\\n    bool internal immutable isUniswapReversed12;\\n    bool internal immutable isUniswapReversed13;\\n    bool internal immutable isUniswapReversed14;\\n    bool internal immutable isUniswapReversed15;\\n    bool internal immutable isUniswapReversed16;\\n    bool internal immutable isUniswapReversed17;\\n    bool internal immutable isUniswapReversed18;\\n    bool internal immutable isUniswapReversed19;\\n    bool internal immutable isUniswapReversed20;\\n    bool internal immutable isUniswapReversed21;\\n    bool internal immutable isUniswapReversed22;\\n    bool internal immutable isUniswapReversed23;\\n    bool internal immutable isUniswapReversed24;\\n    bool internal immutable isUniswapReversed25;\\n    bool internal immutable isUniswapReversed26;\\n    bool internal immutable isUniswapReversed27;\\n    bool internal immutable isUniswapReversed28;\\n    bool internal immutable isUniswapReversed29;\\n\\n    constructor(TokenConfig[] memory configs) public {\\n        require(configs.length <= maxTokens, \\\"too many configs\\\");\\n        numTokens = configs.length;\\n\\n        cToken00 = get(configs, 0).cToken;\\n        cToken01 = get(configs, 1).cToken;\\n        cToken02 = get(configs, 2).cToken;\\n        cToken03 = get(configs, 3).cToken;\\n        cToken04 = get(configs, 4).cToken;\\n        cToken05 = get(configs, 5).cToken;\\n        cToken06 = get(configs, 6).cToken;\\n        cToken07 = get(configs, 7).cToken;\\n        cToken08 = get(configs, 8).cToken;\\n        cToken09 = get(configs, 9).cToken;\\n        cToken10 = get(configs, 10).cToken;\\n        cToken11 = get(configs, 11).cToken;\\n        cToken12 = get(configs, 12).cToken;\\n        cToken13 = get(configs, 13).cToken;\\n        cToken14 = get(configs, 14).cToken;\\n        cToken15 = get(configs, 15).cToken;\\n        cToken16 = get(configs, 16).cToken;\\n        cToken17 = get(configs, 17).cToken;\\n        cToken18 = get(configs, 18).cToken;\\n        cToken19 = get(configs, 19).cToken;\\n        cToken20 = get(configs, 20).cToken;\\n        cToken21 = get(configs, 21).cToken;\\n        cToken22 = get(configs, 22).cToken;\\n        cToken23 = get(configs, 23).cToken;\\n        cToken24 = get(configs, 24).cToken;\\n        cToken25 = get(configs, 25).cToken;\\n        cToken26 = get(configs, 26).cToken;\\n        cToken27 = get(configs, 27).cToken;\\n        cToken28 = get(configs, 28).cToken;\\n        cToken29 = get(configs, 29).cToken;\\n\\n        underlying00 = get(configs, 0).underlying;\\n        underlying01 = get(configs, 1).underlying;\\n        underlying02 = get(configs, 2).underlying;\\n        underlying03 = get(configs, 3).underlying;\\n        underlying04 = get(configs, 4).underlying;\\n        underlying05 = get(configs, 5).underlying;\\n        underlying06 = get(configs, 6).underlying;\\n        underlying07 = get(configs, 7).underlying;\\n        underlying08 = get(configs, 8).underlying;\\n        underlying09 = get(configs, 9).underlying;\\n        underlying10 = get(configs, 10).underlying;\\n        underlying11 = get(configs, 11).underlying;\\n        underlying12 = get(configs, 12).underlying;\\n        underlying13 = get(configs, 13).underlying;\\n        underlying14 = get(configs, 14).underlying;\\n        underlying15 = get(configs, 15).underlying;\\n        underlying16 = get(configs, 16).underlying;\\n        underlying17 = get(configs, 17).underlying;\\n        underlying18 = get(configs, 18).underlying;\\n        underlying19 = get(configs, 19).underlying;\\n        underlying20 = get(configs, 20).underlying;\\n        underlying21 = get(configs, 21).underlying;\\n        underlying22 = get(configs, 22).underlying;\\n        underlying23 = get(configs, 23).underlying;\\n        underlying24 = get(configs, 24).underlying;\\n        underlying25 = get(configs, 25).underlying;\\n        underlying26 = get(configs, 26).underlying;\\n        underlying27 = get(configs, 27).underlying;\\n        underlying28 = get(configs, 28).underlying;\\n        underlying29 = get(configs, 29).underlying;\\n\\n        symbolHash00 = get(configs, 0).symbolHash;\\n        symbolHash01 = get(configs, 1).symbolHash;\\n        symbolHash02 = get(configs, 2).symbolHash;\\n        symbolHash03 = get(configs, 3).symbolHash;\\n        symbolHash04 = get(configs, 4).symbolHash;\\n        symbolHash05 = get(configs, 5).symbolHash;\\n        symbolHash06 = get(configs, 6).symbolHash;\\n        symbolHash07 = get(configs, 7).symbolHash;\\n        symbolHash08 = get(configs, 8).symbolHash;\\n        symbolHash09 = get(configs, 9).symbolHash;\\n        symbolHash10 = get(configs, 10).symbolHash;\\n        symbolHash11 = get(configs, 11).symbolHash;\\n        symbolHash12 = get(configs, 12).symbolHash;\\n        symbolHash13 = get(configs, 13).symbolHash;\\n        symbolHash14 = get(configs, 14).symbolHash;\\n        symbolHash15 = get(configs, 15).symbolHash;\\n        symbolHash16 = get(configs, 16).symbolHash;\\n        symbolHash17 = get(configs, 17).symbolHash;\\n        symbolHash18 = get(configs, 18).symbolHash;\\n        symbolHash19 = get(configs, 19).symbolHash;\\n        symbolHash20 = get(configs, 20).symbolHash;\\n        symbolHash21 = get(configs, 21).symbolHash;\\n        symbolHash22 = get(configs, 22).symbolHash;\\n        symbolHash23 = get(configs, 23).symbolHash;\\n        symbolHash24 = get(configs, 24).symbolHash;\\n        symbolHash25 = get(configs, 25).symbolHash;\\n        symbolHash26 = get(configs, 26).symbolHash;\\n        symbolHash27 = get(configs, 27).symbolHash;\\n        symbolHash28 = get(configs, 28).symbolHash;\\n        symbolHash29 = get(configs, 29).symbolHash;\\n\\n        baseUnit00 = get(configs, 0).baseUnit;\\n        baseUnit01 = get(configs, 1).baseUnit;\\n        baseUnit02 = get(configs, 2).baseUnit;\\n        baseUnit03 = get(configs, 3).baseUnit;\\n        baseUnit04 = get(configs, 4).baseUnit;\\n        baseUnit05 = get(configs, 5).baseUnit;\\n        baseUnit06 = get(configs, 6).baseUnit;\\n        baseUnit07 = get(configs, 7).baseUnit;\\n        baseUnit08 = get(configs, 8).baseUnit;\\n        baseUnit09 = get(configs, 9).baseUnit;\\n        baseUnit10 = get(configs, 10).baseUnit;\\n        baseUnit11 = get(configs, 11).baseUnit;\\n        baseUnit12 = get(configs, 12).baseUnit;\\n        baseUnit13 = get(configs, 13).baseUnit;\\n        baseUnit14 = get(configs, 14).baseUnit;\\n        baseUnit15 = get(configs, 15).baseUnit;\\n        baseUnit16 = get(configs, 16).baseUnit;\\n        baseUnit17 = get(configs, 17).baseUnit;\\n        baseUnit18 = get(configs, 18).baseUnit;\\n        baseUnit19 = get(configs, 19).baseUnit;\\n        baseUnit20 = get(configs, 20).baseUnit;\\n        baseUnit21 = get(configs, 21).baseUnit;\\n        baseUnit22 = get(configs, 22).baseUnit;\\n        baseUnit23 = get(configs, 23).baseUnit;\\n        baseUnit24 = get(configs, 24).baseUnit;\\n        baseUnit25 = get(configs, 25).baseUnit;\\n        baseUnit26 = get(configs, 26).baseUnit;\\n        baseUnit27 = get(configs, 27).baseUnit;\\n        baseUnit28 = get(configs, 28).baseUnit;\\n        baseUnit29 = get(configs, 29).baseUnit;\\n\\n        priceSource00 = get(configs, 0).priceSource;\\n        priceSource01 = get(configs, 1).priceSource;\\n        priceSource02 = get(configs, 2).priceSource;\\n        priceSource03 = get(configs, 3).priceSource;\\n        priceSource04 = get(configs, 4).priceSource;\\n        priceSource05 = get(configs, 5).priceSource;\\n        priceSource06 = get(configs, 6).priceSource;\\n        priceSource07 = get(configs, 7).priceSource;\\n        priceSource08 = get(configs, 8).priceSource;\\n        priceSource09 = get(configs, 9).priceSource;\\n        priceSource10 = get(configs, 10).priceSource;\\n        priceSource11 = get(configs, 11).priceSource;\\n        priceSource12 = get(configs, 12).priceSource;\\n        priceSource13 = get(configs, 13).priceSource;\\n        priceSource14 = get(configs, 14).priceSource;\\n        priceSource15 = get(configs, 15).priceSource;\\n        priceSource16 = get(configs, 16).priceSource;\\n        priceSource17 = get(configs, 17).priceSource;\\n        priceSource18 = get(configs, 18).priceSource;\\n        priceSource19 = get(configs, 19).priceSource;\\n        priceSource20 = get(configs, 20).priceSource;\\n        priceSource21 = get(configs, 21).priceSource;\\n        priceSource22 = get(configs, 22).priceSource;\\n        priceSource23 = get(configs, 23).priceSource;\\n        priceSource24 = get(configs, 24).priceSource;\\n        priceSource25 = get(configs, 25).priceSource;\\n        priceSource26 = get(configs, 26).priceSource;\\n        priceSource27 = get(configs, 27).priceSource;\\n        priceSource28 = get(configs, 28).priceSource;\\n        priceSource29 = get(configs, 29).priceSource;\\n\\n        fixedPrice00 = get(configs, 0).fixedPrice;\\n        fixedPrice01 = get(configs, 1).fixedPrice;\\n        fixedPrice02 = get(configs, 2).fixedPrice;\\n        fixedPrice03 = get(configs, 3).fixedPrice;\\n        fixedPrice04 = get(configs, 4).fixedPrice;\\n        fixedPrice05 = get(configs, 5).fixedPrice;\\n        fixedPrice06 = get(configs, 6).fixedPrice;\\n        fixedPrice07 = get(configs, 7).fixedPrice;\\n        fixedPrice08 = get(configs, 8).fixedPrice;\\n        fixedPrice09 = get(configs, 9).fixedPrice;\\n        fixedPrice10 = get(configs, 10).fixedPrice;\\n        fixedPrice11 = get(configs, 11).fixedPrice;\\n        fixedPrice12 = get(configs, 12).fixedPrice;\\n        fixedPrice13 = get(configs, 13).fixedPrice;\\n        fixedPrice14 = get(configs, 14).fixedPrice;\\n        fixedPrice15 = get(configs, 15).fixedPrice;\\n        fixedPrice16 = get(configs, 16).fixedPrice;\\n        fixedPrice17 = get(configs, 17).fixedPrice;\\n        fixedPrice18 = get(configs, 18).fixedPrice;\\n        fixedPrice19 = get(configs, 19).fixedPrice;\\n        fixedPrice20 = get(configs, 20).fixedPrice;\\n        fixedPrice21 = get(configs, 21).fixedPrice;\\n        fixedPrice22 = get(configs, 22).fixedPrice;\\n        fixedPrice23 = get(configs, 23).fixedPrice;\\n        fixedPrice24 = get(configs, 24).fixedPrice;\\n        fixedPrice25 = get(configs, 25).fixedPrice;\\n        fixedPrice26 = get(configs, 26).fixedPrice;\\n        fixedPrice27 = get(configs, 27).fixedPrice;\\n        fixedPrice28 = get(configs, 28).fixedPrice;\\n        fixedPrice29 = get(configs, 29).fixedPrice;\\n\\n        uniswapMarket00 = get(configs, 0).uniswapMarket;\\n        uniswapMarket01 = get(configs, 1).uniswapMarket;\\n        uniswapMarket02 = get(configs, 2).uniswapMarket;\\n        uniswapMarket03 = get(configs, 3).uniswapMarket;\\n        uniswapMarket04 = get(configs, 4).uniswapMarket;\\n        uniswapMarket05 = get(configs, 5).uniswapMarket;\\n        uniswapMarket06 = get(configs, 6).uniswapMarket;\\n        uniswapMarket07 = get(configs, 7).uniswapMarket;\\n        uniswapMarket08 = get(configs, 8).uniswapMarket;\\n        uniswapMarket09 = get(configs, 9).uniswapMarket;\\n        uniswapMarket10 = get(configs, 10).uniswapMarket;\\n        uniswapMarket11 = get(configs, 11).uniswapMarket;\\n        uniswapMarket12 = get(configs, 12).uniswapMarket;\\n        uniswapMarket13 = get(configs, 13).uniswapMarket;\\n        uniswapMarket14 = get(configs, 14).uniswapMarket;\\n        uniswapMarket15 = get(configs, 15).uniswapMarket;\\n        uniswapMarket16 = get(configs, 16).uniswapMarket;\\n        uniswapMarket17 = get(configs, 17).uniswapMarket;\\n        uniswapMarket18 = get(configs, 18).uniswapMarket;\\n        uniswapMarket19 = get(configs, 19).uniswapMarket;\\n        uniswapMarket20 = get(configs, 20).uniswapMarket;\\n        uniswapMarket21 = get(configs, 21).uniswapMarket;\\n        uniswapMarket22 = get(configs, 22).uniswapMarket;\\n        uniswapMarket23 = get(configs, 23).uniswapMarket;\\n        uniswapMarket24 = get(configs, 24).uniswapMarket;\\n        uniswapMarket25 = get(configs, 25).uniswapMarket;\\n        uniswapMarket26 = get(configs, 26).uniswapMarket;\\n        uniswapMarket27 = get(configs, 27).uniswapMarket;\\n        uniswapMarket28 = get(configs, 28).uniswapMarket;\\n        uniswapMarket29 = get(configs, 29).uniswapMarket;\\n\\n        isUniswapReversed00 = get(configs, 0).isUniswapReversed;\\n        isUniswapReversed01 = get(configs, 1).isUniswapReversed;\\n        isUniswapReversed02 = get(configs, 2).isUniswapReversed;\\n        isUniswapReversed03 = get(configs, 3).isUniswapReversed;\\n        isUniswapReversed04 = get(configs, 4).isUniswapReversed;\\n        isUniswapReversed05 = get(configs, 5).isUniswapReversed;\\n        isUniswapReversed06 = get(configs, 6).isUniswapReversed;\\n        isUniswapReversed07 = get(configs, 7).isUniswapReversed;\\n        isUniswapReversed08 = get(configs, 8).isUniswapReversed;\\n        isUniswapReversed09 = get(configs, 9).isUniswapReversed;\\n        isUniswapReversed10 = get(configs, 10).isUniswapReversed;\\n        isUniswapReversed11 = get(configs, 11).isUniswapReversed;\\n        isUniswapReversed12 = get(configs, 12).isUniswapReversed;\\n        isUniswapReversed13 = get(configs, 13).isUniswapReversed;\\n        isUniswapReversed14 = get(configs, 14).isUniswapReversed;\\n        isUniswapReversed15 = get(configs, 15).isUniswapReversed;\\n        isUniswapReversed16 = get(configs, 16).isUniswapReversed;\\n        isUniswapReversed17 = get(configs, 17).isUniswapReversed;\\n        isUniswapReversed18 = get(configs, 18).isUniswapReversed;\\n        isUniswapReversed19 = get(configs, 19).isUniswapReversed;\\n        isUniswapReversed20 = get(configs, 20).isUniswapReversed;\\n        isUniswapReversed21 = get(configs, 21).isUniswapReversed;\\n        isUniswapReversed22 = get(configs, 22).isUniswapReversed;\\n        isUniswapReversed23 = get(configs, 23).isUniswapReversed;\\n        isUniswapReversed24 = get(configs, 24).isUniswapReversed;\\n        isUniswapReversed25 = get(configs, 25).isUniswapReversed;\\n        isUniswapReversed26 = get(configs, 26).isUniswapReversed;\\n        isUniswapReversed27 = get(configs, 27).isUniswapReversed;\\n        isUniswapReversed28 = get(configs, 28).isUniswapReversed;\\n        isUniswapReversed29 = get(configs, 29).isUniswapReversed;\\n    }\\n\\n    function get(TokenConfig[] memory configs, uint i) internal pure returns (TokenConfig memory) {\\n        if (i < configs.length)\\n            return configs[i];\\n        return TokenConfig({\\n            cToken: address(0),\\n            underlying: address(0),\\n            symbolHash: bytes32(0),\\n            baseUnit: uint256(0),\\n            priceSource: PriceSource(0),\\n            fixedPrice: uint256(0),\\n            uniswapMarket: address(0),\\n            isUniswapReversed: false\\n        });\\n    }\\n\\n    function getCTokenIndex(address cToken) internal view returns (uint) {\\n        if (cToken == cToken00) return 0;\\n        if (cToken == cToken01) return 1;\\n        if (cToken == cToken02) return 2;\\n        if (cToken == cToken03) return 3;\\n        if (cToken == cToken04) return 4;\\n        if (cToken == cToken05) return 5;\\n        if (cToken == cToken06) return 6;\\n        if (cToken == cToken07) return 7;\\n        if (cToken == cToken08) return 8;\\n        if (cToken == cToken09) return 9;\\n        if (cToken == cToken10) return 10;\\n        if (cToken == cToken11) return 11;\\n        if (cToken == cToken12) return 12;\\n        if (cToken == cToken13) return 13;\\n        if (cToken == cToken14) return 14;\\n        if (cToken == cToken15) return 15;\\n        if (cToken == cToken16) return 16;\\n        if (cToken == cToken17) return 17;\\n        if (cToken == cToken18) return 18;\\n        if (cToken == cToken19) return 19;\\n        if (cToken == cToken20) return 20;\\n        if (cToken == cToken21) return 21;\\n        if (cToken == cToken22) return 22;\\n        if (cToken == cToken23) return 23;\\n        if (cToken == cToken24) return 24;\\n        if (cToken == cToken25) return 25;\\n        if (cToken == cToken26) return 26;\\n        if (cToken == cToken27) return 27;\\n        if (cToken == cToken28) return 28;\\n        if (cToken == cToken29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getUnderlyingIndex(address underlying) internal view returns (uint) {\\n        if (underlying == underlying00) return 0;\\n        if (underlying == underlying01) return 1;\\n        if (underlying == underlying02) return 2;\\n        if (underlying == underlying03) return 3;\\n        if (underlying == underlying04) return 4;\\n        if (underlying == underlying05) return 5;\\n        if (underlying == underlying06) return 6;\\n        if (underlying == underlying07) return 7;\\n        if (underlying == underlying08) return 8;\\n        if (underlying == underlying09) return 9;\\n        if (underlying == underlying10) return 10;\\n        if (underlying == underlying11) return 11;\\n        if (underlying == underlying12) return 12;\\n        if (underlying == underlying13) return 13;\\n        if (underlying == underlying14) return 14;\\n        if (underlying == underlying15) return 15;\\n        if (underlying == underlying16) return 16;\\n        if (underlying == underlying17) return 17;\\n        if (underlying == underlying18) return 18;\\n        if (underlying == underlying19) return 19;\\n        if (underlying == underlying20) return 20;\\n        if (underlying == underlying21) return 21;\\n        if (underlying == underlying22) return 22;\\n        if (underlying == underlying23) return 23;\\n        if (underlying == underlying24) return 24;\\n        if (underlying == underlying25) return 25;\\n        if (underlying == underlying26) return 26;\\n        if (underlying == underlying27) return 27;\\n        if (underlying == underlying28) return 28;\\n        if (underlying == underlying29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getSymbolHashIndex(bytes32 symbolHash) internal view returns (uint) {\\n        if (symbolHash == symbolHash00) return 0;\\n        if (symbolHash == symbolHash01) return 1;\\n        if (symbolHash == symbolHash02) return 2;\\n        if (symbolHash == symbolHash03) return 3;\\n        if (symbolHash == symbolHash04) return 4;\\n        if (symbolHash == symbolHash05) return 5;\\n        if (symbolHash == symbolHash06) return 6;\\n        if (symbolHash == symbolHash07) return 7;\\n        if (symbolHash == symbolHash08) return 8;\\n        if (symbolHash == symbolHash09) return 9;\\n        if (symbolHash == symbolHash10) return 10;\\n        if (symbolHash == symbolHash11) return 11;\\n        if (symbolHash == symbolHash12) return 12;\\n        if (symbolHash == symbolHash13) return 13;\\n        if (symbolHash == symbolHash14) return 14;\\n        if (symbolHash == symbolHash15) return 15;\\n        if (symbolHash == symbolHash16) return 16;\\n        if (symbolHash == symbolHash17) return 17;\\n        if (symbolHash == symbolHash18) return 18;\\n        if (symbolHash == symbolHash19) return 19;\\n        if (symbolHash == symbolHash20) return 20;\\n        if (symbolHash == symbolHash21) return 21;\\n        if (symbolHash == symbolHash22) return 22;\\n        if (symbolHash == symbolHash23) return 23;\\n        if (symbolHash == symbolHash24) return 24;\\n        if (symbolHash == symbolHash25) return 25;\\n        if (symbolHash == symbolHash26) return 26;\\n        if (symbolHash == symbolHash27) return 27;\\n        if (symbolHash == symbolHash28) return 28;\\n        if (symbolHash == symbolHash29) return 29;\\n\\n        return uint(-1);\\n    }\\n\\n    function getTokenConfig(uint i) public view returns (TokenConfig memory) {\\n        require(i < numTokens, \\\"token config not found\\\");\\n\\n        if (i == 0) return TokenConfig({cToken: cToken00, underlying: underlying00, symbolHash: symbolHash00, baseUnit: baseUnit00, priceSource: priceSource00, fixedPrice: fixedPrice00, uniswapMarket: uniswapMarket00, isUniswapReversed: isUniswapReversed00});\\n        if (i == 1) return TokenConfig({cToken: cToken01, underlying: underlying01, symbolHash: symbolHash01, baseUnit: baseUnit01, priceSource: priceSource01, fixedPrice: fixedPrice01, uniswapMarket: uniswapMarket01, isUniswapReversed: isUniswapReversed01});\\n        if (i == 2) return TokenConfig({cToken: cToken02, underlying: underlying02, symbolHash: symbolHash02, baseUnit: baseUnit02, priceSource: priceSource02, fixedPrice: fixedPrice02, uniswapMarket: uniswapMarket02, isUniswapReversed: isUniswapReversed02});\\n        if (i == 3) return TokenConfig({cToken: cToken03, underlying: underlying03, symbolHash: symbolHash03, baseUnit: baseUnit03, priceSource: priceSource03, fixedPrice: fixedPrice03, uniswapMarket: uniswapMarket03, isUniswapReversed: isUniswapReversed03});\\n        if (i == 4) return TokenConfig({cToken: cToken04, underlying: underlying04, symbolHash: symbolHash04, baseUnit: baseUnit04, priceSource: priceSource04, fixedPrice: fixedPrice04, uniswapMarket: uniswapMarket04, isUniswapReversed: isUniswapReversed04});\\n        if (i == 5) return TokenConfig({cToken: cToken05, underlying: underlying05, symbolHash: symbolHash05, baseUnit: baseUnit05, priceSource: priceSource05, fixedPrice: fixedPrice05, uniswapMarket: uniswapMarket05, isUniswapReversed: isUniswapReversed05});\\n        if (i == 6) return TokenConfig({cToken: cToken06, underlying: underlying06, symbolHash: symbolHash06, baseUnit: baseUnit06, priceSource: priceSource06, fixedPrice: fixedPrice06, uniswapMarket: uniswapMarket06, isUniswapReversed: isUniswapReversed06});\\n        if (i == 7) return TokenConfig({cToken: cToken07, underlying: underlying07, symbolHash: symbolHash07, baseUnit: baseUnit07, priceSource: priceSource07, fixedPrice: fixedPrice07, uniswapMarket: uniswapMarket07, isUniswapReversed: isUniswapReversed07});\\n        if (i == 8) return TokenConfig({cToken: cToken08, underlying: underlying08, symbolHash: symbolHash08, baseUnit: baseUnit08, priceSource: priceSource08, fixedPrice: fixedPrice08, uniswapMarket: uniswapMarket08, isUniswapReversed: isUniswapReversed08});\\n        if (i == 9) return TokenConfig({cToken: cToken09, underlying: underlying09, symbolHash: symbolHash09, baseUnit: baseUnit09, priceSource: priceSource09, fixedPrice: fixedPrice09, uniswapMarket: uniswapMarket09, isUniswapReversed: isUniswapReversed09});\\n\\n        if (i == 10) return TokenConfig({cToken: cToken10, underlying: underlying10, symbolHash: symbolHash10, baseUnit: baseUnit10, priceSource: priceSource10, fixedPrice: fixedPrice10, uniswapMarket: uniswapMarket10, isUniswapReversed: isUniswapReversed10});\\n        if (i == 11) return TokenConfig({cToken: cToken11, underlying: underlying11, symbolHash: symbolHash11, baseUnit: baseUnit11, priceSource: priceSource11, fixedPrice: fixedPrice11, uniswapMarket: uniswapMarket11, isUniswapReversed: isUniswapReversed11});\\n        if (i == 12) return TokenConfig({cToken: cToken12, underlying: underlying12, symbolHash: symbolHash12, baseUnit: baseUnit12, priceSource: priceSource12, fixedPrice: fixedPrice12, uniswapMarket: uniswapMarket12, isUniswapReversed: isUniswapReversed12});\\n        if (i == 13) return TokenConfig({cToken: cToken13, underlying: underlying13, symbolHash: symbolHash13, baseUnit: baseUnit13, priceSource: priceSource13, fixedPrice: fixedPrice13, uniswapMarket: uniswapMarket13, isUniswapReversed: isUniswapReversed13});\\n        if (i == 14) return TokenConfig({cToken: cToken14, underlying: underlying14, symbolHash: symbolHash14, baseUnit: baseUnit14, priceSource: priceSource14, fixedPrice: fixedPrice14, uniswapMarket: uniswapMarket14, isUniswapReversed: isUniswapReversed14});\\n        if (i == 15) return TokenConfig({cToken: cToken15, underlying: underlying15, symbolHash: symbolHash15, baseUnit: baseUnit15, priceSource: priceSource15, fixedPrice: fixedPrice15, uniswapMarket: uniswapMarket15, isUniswapReversed: isUniswapReversed15});\\n        if (i == 16) return TokenConfig({cToken: cToken16, underlying: underlying16, symbolHash: symbolHash16, baseUnit: baseUnit16, priceSource: priceSource16, fixedPrice: fixedPrice16, uniswapMarket: uniswapMarket16, isUniswapReversed: isUniswapReversed16});\\n        if (i == 17) return TokenConfig({cToken: cToken17, underlying: underlying17, symbolHash: symbolHash17, baseUnit: baseUnit17, priceSource: priceSource17, fixedPrice: fixedPrice17, uniswapMarket: uniswapMarket17, isUniswapReversed: isUniswapReversed17});\\n        if (i == 18) return TokenConfig({cToken: cToken18, underlying: underlying18, symbolHash: symbolHash18, baseUnit: baseUnit18, priceSource: priceSource18, fixedPrice: fixedPrice18, uniswapMarket: uniswapMarket18, isUniswapReversed: isUniswapReversed18});\\n        if (i == 19) return TokenConfig({cToken: cToken19, underlying: underlying19, symbolHash: symbolHash19, baseUnit: baseUnit19, priceSource: priceSource19, fixedPrice: fixedPrice19, uniswapMarket: uniswapMarket19, isUniswapReversed: isUniswapReversed19});\\n\\n        if (i == 20) return TokenConfig({cToken: cToken20, underlying: underlying20, symbolHash: symbolHash20, baseUnit: baseUnit20, priceSource: priceSource20, fixedPrice: fixedPrice20, uniswapMarket: uniswapMarket20, isUniswapReversed: isUniswapReversed20});\\n        if (i == 21) return TokenConfig({cToken: cToken21, underlying: underlying21, symbolHash: symbolHash21, baseUnit: baseUnit21, priceSource: priceSource21, fixedPrice: fixedPrice21, uniswapMarket: uniswapMarket21, isUniswapReversed: isUniswapReversed21});\\n        if (i == 22) return TokenConfig({cToken: cToken22, underlying: underlying22, symbolHash: symbolHash22, baseUnit: baseUnit22, priceSource: priceSource22, fixedPrice: fixedPrice22, uniswapMarket: uniswapMarket22, isUniswapReversed: isUniswapReversed22});\\n        if (i == 23) return TokenConfig({cToken: cToken23, underlying: underlying23, symbolHash: symbolHash23, baseUnit: baseUnit23, priceSource: priceSource23, fixedPrice: fixedPrice23, uniswapMarket: uniswapMarket23, isUniswapReversed: isUniswapReversed23});\\n        if (i == 24) return TokenConfig({cToken: cToken24, underlying: underlying24, symbolHash: symbolHash24, baseUnit: baseUnit24, priceSource: priceSource24, fixedPrice: fixedPrice24, uniswapMarket: uniswapMarket24, isUniswapReversed: isUniswapReversed24});\\n        if (i == 25) return TokenConfig({cToken: cToken25, underlying: underlying25, symbolHash: symbolHash25, baseUnit: baseUnit25, priceSource: priceSource25, fixedPrice: fixedPrice25, uniswapMarket: uniswapMarket25, isUniswapReversed: isUniswapReversed25});\\n        if (i == 26) return TokenConfig({cToken: cToken26, underlying: underlying26, symbolHash: symbolHash26, baseUnit: baseUnit26, priceSource: priceSource26, fixedPrice: fixedPrice26, uniswapMarket: uniswapMarket26, isUniswapReversed: isUniswapReversed26});\\n        if (i == 27) return TokenConfig({cToken: cToken27, underlying: underlying27, symbolHash: symbolHash27, baseUnit: baseUnit27, priceSource: priceSource27, fixedPrice: fixedPrice27, uniswapMarket: uniswapMarket27, isUniswapReversed: isUniswapReversed27});\\n        if (i == 28) return TokenConfig({cToken: cToken28, underlying: underlying28, symbolHash: symbolHash28, baseUnit: baseUnit28, priceSource: priceSource28, fixedPrice: fixedPrice28, uniswapMarket: uniswapMarket28, isUniswapReversed: isUniswapReversed28});\\n        if (i == 29) return TokenConfig({cToken: cToken29, underlying: underlying29, symbolHash: symbolHash29, baseUnit: baseUnit29, priceSource: priceSource29, fixedPrice: fixedPrice29, uniswapMarket: uniswapMarket29, isUniswapReversed: isUniswapReversed29});\\n    }\\n\\n    function getTokenConfigBySymbol(string memory symbol) public view returns (TokenConfig memory) {\\n        return getTokenConfigBySymbolHash(keccak256(abi.encodePacked(symbol)));\\n    }\\n\\n    function getTokenConfigBySymbolHash(bytes32 symbolHash) public view returns (TokenConfig memory) {\\n        uint index = getSymbolHashIndex(symbolHash);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n\\n    function getTokenConfigByCToken(address cToken) public view returns (TokenConfig memory) {\\n        uint index = getCTokenIndex(cToken);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        return getTokenConfigByUnderlying(CErc20(cToken).underlying());\\n    }\\n\\n    function getTokenConfigByUnderlying(address underlying) public view returns (TokenConfig memory) {\\n        uint index = getUnderlyingIndex(underlying);\\n        if (index != uint(-1)) {\\n            return getTokenConfig(index);\\n        }\\n\\n        revert(\\\"token config not found\\\");\\n    }\\n}\",\"keccak256\":\"0x5805b1637a0bdeb482b469313e7000c8655a501f3456753e9ea7515634f15afc\",\"license\":\"GPL-3.0\"},\"contracts/Uniswap/UniswapLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // returns a uq112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << 112) / denominator);\\n    }\\n\\n    // decode a uq112x112 into a uint with 18 decimals of precision\\n    function decode112with18(uq112x112 memory self) internal pure returns (uint) {\\n        // we only have 256 - 224 = 32 bits to spare, so scaling up by ~60 bits is dangerous\\n        // instead, get close to:\\n        //  (x * 1e18) >> 112\\n        // without risk of overflowing, e.g.:\\n        //  (x) / 2 ** (112 - lg(1e18))\\n        return uint(self._x) / 5192296858534816;\\n    }\\n}\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n    using FixedPoint for *;\\n\\n    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n    function currentBlockTimestamp() internal view returns (uint32) {\\n        return uint32(block.timestamp % 2 ** 32);\\n    }\\n\\n    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices(\\n        address pair\\n    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n        blockTimestamp = currentBlockTimestamp();\\n        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n        // if time has elapsed since the last update on the pair, mock the accumulated price values\\n        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n        if (blockTimestampLast != blockTimestamp) {\\n            // subtraction overflow is desired\\n            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n            // addition overflow is desired\\n            // counterfactual\\n            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n            // counterfactual\\n            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n        }\\n    }\\n}\\n\\ninterface IUniswapV2Pair {\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4031dd655d8e82c7fbf327e936292929a624af1f11565807b6c5704c410a3852\",\"license\":\"GPL-3.0\"},\"tests/contracts/MockUniswapAnchoredView.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../contracts/Uniswap/UniswapAnchoredView.sol\\\";\\n\\ncontract MockUniswapAnchoredView is UniswapAnchoredView {\\n    mapping(bytes32 => uint) public anchorPrices;\\n\\n    constructor(OpenOraclePriceData priceData_,\\n                address reporter_,\\n                uint anchorToleranceMantissa_,\\n                uint anchorPeriod_,\\n                TokenConfig[] memory configs) UniswapAnchoredView(priceData_, reporter_, anchorToleranceMantissa_, anchorPeriod_, configs) public {}\\n\\n    function setAnchorPrice(string memory symbol, uint price) external {\\n        anchorPrices[keccak256(abi.encodePacked(symbol))] = price;\\n    }\\n\\n    function fetchAnchorPrice(TokenConfig memory config, uint _conversionFactor) internal override returns (uint) {\\n        _conversionFactor; // Shh\\n        return anchorPrices[config.symbolHash];\\n    }\\n}\\n\",\"keccak256\":\"0x6d7c6848c4cd525e469dfc791da3d35996633e910212699aef86a268b7d19547\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"tests/contracts/MockUniswapTokenPair.sol:MockUniswapTokenPair":{"abi":"[{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reversedMarket\",\"type\":\"bool\"}],\"name\":\"getReservesFraction\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b506040516104a33803806104a3833981810160405260a081101561003357600080fd5b508051602082015160408301516060840151608090940151600080546001600160701b0319166001600160701b0395861617600160701b600160e01b031916600160701b9590941694909402929092176001600160e01b0316600160e01b63ffffffff909216919091021782556001929092556002919091556103e79081906100bc90396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80635a76f25e1161005b5780635a76f25e1461010b578063642f064e14610113578063c5700a021461014e578063d14393c11461016f57610088565b80630902f1ac1461008d578063443cb4bc146100c55780635909c0d5146100e95780635a3d549314610103575b600080fd5b6100956101b9565b604080516001600160701b03948516815292909316602083015263ffffffff168183015290519081900360600190f35b6100cd6101e3565b604080516001600160701b039092168252519081900360200190f35b6100f16101f2565b60408051918252519081900360200190f35b6100f16101f8565b6100cd6101fe565b6101326004803603602081101561012957600080fd5b50351515610214565b604080516001600160e01b039092168252519081900360200190f35b61015661032e565b6040805163ffffffff9092168252519081900360200190f35b6101b7600480360360a081101561018557600080fd5b506001600160701b03813581169160208101359091169063ffffffff6040820135169060608101359060800135610341565b005b6000546001600160701b0380821692600160701b830490911691600160e01b900463ffffffff1690565b6000546001600160701b031681565b60015481565b60025481565b600054600160701b90046001600160701b031681565b600080546001600160701b031661026a576040805162461bcd60e51b815260206004820152601560248201527405265736572766520697320657175616c20746f203605c1b604482015290519081900360640190fd5b600054600160701b90046001600160701b03166102c6576040805162461bcd60e51b815260206004820152601560248201527405265736572766520697320657175616c20746f203605c1b604482015290519081900360640190fd5b81156102fe57600054600160701b81046001600160701b03169060701b600160701b600160e01b0316816102f657fe5b049050610329565b6000546001600160701b03811690600160701b900460701b600160701b600160e01b0316816102f657fe5b919050565b600054600160e01b900463ffffffff1681565b600080546dffffffffffffffffffffffffffff19166001600160701b03968716176dffffffffffffffffffffffffffff60701b1916600160701b9590961694909402949094176001600160e01b0316600160e01b63ffffffff93909316929092029190911790915560015560025556fea2646970667358221220b8b4470beacb84522749efe02a8d21b3de8fd178ecccfb05d70e955622e78cce64736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"reversedMarket\",\"type\":\"bool\"}],\"name\":\"getReservesFraction\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve0\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve1\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0_\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1_\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"blockTimestampLast_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price0CumulativeLast_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price1CumulativeLast_\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"tests/contracts/MockUniswapTokenPair.sol\":\"MockUniswapTokenPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/MockUniswapTokenPair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\ncontract MockUniswapTokenPair {\\n    uint112 public reserve0;\\n    uint112 public reserve1;\\n    uint32 public blockTimestampLast;\\n\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n\\n    constructor(\\n        uint112 reserve0_,\\n        uint112 reserve1_,\\n        uint32 blockTimestampLast_,\\n        uint256 price0CumulativeLast_,\\n        uint256 price1CumulativeLast_\\n    ) public {\\n        reserve0 = reserve0_;\\n        reserve1 = reserve1_;\\n        blockTimestampLast = blockTimestampLast_;\\n        price0CumulativeLast = price0CumulativeLast_;\\n        price1CumulativeLast = price1CumulativeLast_;\\n    }\\n\\n    function update(\\n        uint112 reserve0_,\\n        uint112 reserve1_,\\n        uint32 blockTimestampLast_,\\n        uint256 price0CumulativeLast_,\\n        uint256 price1CumulativeLast_\\n    ) public {\\n        reserve0 = reserve0_;\\n        reserve1 = reserve1_;\\n        blockTimestampLast = blockTimestampLast_;\\n        price0CumulativeLast = price0CumulativeLast_;\\n        price1CumulativeLast = price1CumulativeLast_;\\n    }\\n\\n    function getReserves() external view returns(uint112, uint112, uint32) {\\n        return (reserve0, reserve1, blockTimestampLast);\\n    }\\n\\n    function getReservesFraction(bool reversedMarket) external view returns (uint224) {\\n        require(reserve0 > 0, \\\"Reserve is equal to 0\\\");\\n        require(reserve1 > 0, \\\"Reserve is equal to 0\\\");\\n        if (reversedMarket) {\\n          return (uint224(reserve0) << 112) / reserve1;\\n        } else {\\n          return (uint224(reserve1) << 112) / reserve0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb701290f6bc47261b8a365c775c3d0e9a2b97ef73525854e8308c52d183f60e6\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"tests/contracts/ProxyPriceOracle.sol:MockAnchorOracle":{"abi":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setAnchorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MockCToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b506102b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062e4768b14610066578063127ffda014610094578063485feabe146100c05780635e9a523c146100da578063692374e3146101005780639d0405c71461013f575b600080fd5b6100926004803603604081101561007c57600080fd5b506001600160a01b03813516906020013561016b565b005b610092600480360360408110156100aa57600080fd5b506001600160a01b038135169060200135610187565b6100c861020e565b60408051918252519081900360200190f35b6100c8600480360360208110156100f057600080fd5b50356001600160a01b0316610213565b6101266004803603602081101561011657600080fd5b50356001600160a01b0316610225565b6040805192835260208301919091528051918290030190f35b6100926004803603604081101561015557600080fd5b506001600160a01b03813516906020013561023e565b6001600160a01b03909116600090815260208190526040902055565b80600080846001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b1580156101c457600080fd5b505afa1580156101d8573d6000803e3d6000fd5b505050506040513d60208110156101ee57600080fd5b50516001600160a01b031681526020810191909152604001600020555050565b60f081565b60006020819052908152604090205481565b6001602081905260009182526040909120805491015482565b604080518082018252918252670de0b6b3a764000060208084019182526001600160a01b03909416600090815260019485905291909120915182555191015556fea2646970667358221220bd901fed3a6731c56ccfe02f2c152a684e652c9978d3ce2db3ddc9841c2970bc64736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"anchors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceMantissa\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numBlocksPerPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setAnchorPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract MockCToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"MockAnchorOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"tests/contracts/ProxyPriceOracle.sol:MockCToken":{"abi":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b506040516100f83803806100f88339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b03199092169190911790556094806100646000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636f307dc314602d575b600080fd5b6033604f565b604080516001600160a01b039092168252519081900360200190f35b6000546001600160a01b03168156fea2646970667358221220fa6100d5d7d6b3e2eef2748999b69016b07a8250447b0685f5e3784d511f2d9a64736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"MockCToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"tests/contracts/ProxyPriceOracle.sol:ProxyPriceOracle":{"abi":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b50610151806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063127ffda014610046578063cfed246b14610074578063fc57d4df146100ac575b600080fd5b6100726004803603604081101561005c57600080fd5b506001600160a01b0381351690602001356100d2565b005b61009a6004803603602081101561008a57600080fd5b50356001600160a01b03166100ee565b60408051918252519081900360200190f35b61009a600480360360208110156100c257600080fd5b50356001600160a01b0316610100565b6001600160a01b03909116600090815260208190526040902055565b60006020819052908152604090205481565b6001600160a01b03166000908152602081905260409020549056fea26469706673582212207fca8fa12587146761e8393840d3df9518c8e96992e96f233aefb8739fe760ce64736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"}],\"name\":\"getUnderlyingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ctoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"tests/contracts/ProxyPriceOracle.sol\":\"ProxyPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/ProxyPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\n\\n// @dev mock version of v1 price oracle, allowing manually setting return values\\ncontract ProxyPriceOracle {\\n\\n    mapping(address => uint256) public prices;\\n\\n    function setUnderlyingPrice(address ctoken, uint price) external {\\n        prices[ctoken] = price;\\n    }\\n\\n    function getUnderlyingPrice(address ctoken) external view returns (uint) {\\n        return prices[ctoken];\\n    }\\n}\\n\\n\\ncontract MockAnchorOracle {\\n    struct Anchor {\\n        // floor(block.number / numBlocksPerPeriod) + 1\\n        uint period;\\n\\n        // Price in ETH, scaled by 10**18\\n        uint priceMantissa;\\n    }\\n    mapping(address => uint256) public assetPrices;\\n\\n    function setPrice(address asset, uint price) external {\\n        assetPrices[asset] = price;\\n    }\\n\\n    function setUnderlyingPrice(MockCToken asset, uint price) external {\\n        assetPrices[asset.underlying()] = price;\\n    }\\n\\n\\n    uint public constant numBlocksPerPeriod = 240;\\n\\n    mapping(address => Anchor) public anchors;\\n    function setAnchorPeriod(address asset, uint period) external {\\n        // dont care about anchor price, only period\\n        anchors[asset] = Anchor({period: period, priceMantissa: 1e18});\\n    }\\n}\\n\\ncontract MockCToken {\\n    address public underlying;\\n    constructor(address underlying_) public {\\n        underlying = underlying_;\\n    }\\n}\\n\",\"keccak256\":\"0x9fa105ab4a388ff2851d21560f0ebb706df8ad7ac088ad5595455a4e5fce647e\",\"license\":\"GPL-3.0\"}},\"version\":1}"},"tests/contracts/Test.sol:TestOverflow":{"abi":"[{\"inputs\":[],\"name\":\"testOverflow\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b5060e58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638040cac414602d575b600080fd5b60336035565b005b6801fffffffffffffffe604c565b60405180910390fd5b60026fffffffffffffffffffffffffffffffff82160467ffffffffffffffff8082161460885760405162461bcd60e51b8152600401604390608c565b5050565b60208082526009908201526837bb32b9333637bb9960b91b60408201526060019056fea2646970667358221220c96ff14fb2823d46dba02a4475a71c6329305a1226feed5d8b23643e18c4728c64736f6c634300060a0033","metadata":"{\"compiler\":{\"version\":\"0.6.10+commit.00c0fcaf\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"testOverflow\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"tests/contracts/Test.sol\":\"TestOverflow\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"tests/contracts/Test.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.6.10;\\npragma experimental ABIEncoderV2;\\n\\ncontract TestOverflow {\\n\\n    function testOverflow() public pure {\\n        uint128 sum = uint128(uint64(-1)) + uint128(uint64(-1));\\n        require(sum == 36893488147419103230, \\\"overflows\\\");// (2^64 -1)*2\\n        uint64 half = uint64(sum / 2);\\n        require(half == 18446744073709551615, \\\"overflow2\\\");// 2 ^ 64 - 1\\n    }\\n}\\n\",\"keccak256\":\"0x54896be410933145616d842ffd8a5052b3e6736a414fb84c0f8bb9dd7abb5487\",\"license\":\"GPL-3.0\"}},\"version\":1}"}},"version":"0.6.10+commit.00c0fcaf.Darwin.appleclang"}
